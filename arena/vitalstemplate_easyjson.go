// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package arena

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonB55a1443DecodeGithubComKlauspostCompressArena(in *jlexer.Lexer, out *VitalsTemplateSpec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "respiratory_rate":
			if in.IsNull() {
				in.Skip()
				out.RespiratoryRate = nil
			} else {
				if out.RespiratoryRate == nil {
					out.RespiratoryRate = new(int64)
				}
				*out.RespiratoryRate = int64(in.Int64())
			}
		case "spo2":
			if in.IsNull() {
				in.Skip()
				out.SpO2 = nil
			} else {
				if out.SpO2 == nil {
					out.SpO2 = new(int64)
				}
				*out.SpO2 = int64(in.Int64())
			}
		case "blood_pressure":
			if in.IsNull() {
				in.Skip()
				out.BloodPressure = nil
			} else {
				if out.BloodPressure == nil {
					out.BloodPressure = new(BloodPressure)
				}
				(*out.BloodPressure).UnmarshalEasyJSON(in)
			}
		case "etco2":
			if in.IsNull() {
				in.Skip()
				out.EtCO2 = nil
			} else {
				if out.EtCO2 == nil {
					out.EtCO2 = new(int64)
				}
				*out.EtCO2 = int64(in.Int64())
			}
		case "temperature_blood":
			if in.IsNull() {
				in.Skip()
				out.TemperatureBlood = nil
			} else {
				if out.TemperatureBlood == nil {
					out.TemperatureBlood = new(float64)
				}
				*out.TemperatureBlood = float64(in.Float64())
			}
		case "temperature_peripheral":
			if in.IsNull() {
				in.Skip()
				out.TemperaturePeripheral = nil
			} else {
				if out.TemperaturePeripheral == nil {
					out.TemperaturePeripheral = new(float64)
				}
				*out.TemperaturePeripheral = float64(in.Float64())
			}
		case "ecg":
			if in.IsNull() {
				in.Skip()
				out.Ecg = nil
			} else {
				if out.Ecg == nil {
					out.Ecg = new(Ecg)
				}
				(*out.Ecg).UnmarshalEasyJSON(in)
			}
		case "eyes":
			if in.IsNull() {
				in.Skip()
				out.Eyes = nil
			} else {
				if out.Eyes == nil {
					out.Eyes = new(Eyes)
				}
				(*out.Eyes).UnmarshalEasyJSON(in)
			}
		case "airway_obstruction":
			if in.IsNull() {
				in.Skip()
				out.AirwayObstruction = nil
			} else {
				if out.AirwayObstruction == nil {
					out.AirwayObstruction = new(AirwayObstruction)
				}
				(*out.AirwayObstruction).UnmarshalEasyJSON(in)
			}
		case "lung_sounds":
			if in.IsNull() {
				in.Skip()
				out.LungSounds = nil
			} else {
				if out.LungSounds == nil {
					out.LungSounds = new(LungSounds)
				}
				(*out.LungSounds).UnmarshalEasyJSON(in)
			}
		case "heart_sounds":
			if in.IsNull() {
				in.Skip()
				out.HeartSounds = nil
			} else {
				if out.HeartSounds == nil {
					out.HeartSounds = new(HeartSounds)
				}
				(*out.HeartSounds).UnmarshalEasyJSON(in)
			}
		case "bowel_sounds":
			if in.IsNull() {
				in.Skip()
				out.BowelSounds = nil
			} else {
				if out.BowelSounds == nil {
					out.BowelSounds = new(BowelSounds)
				}
				(*out.BowelSounds).UnmarshalEasyJSON(in)
			}
		case "pulses":
			if in.IsNull() {
				in.Skip()
				out.Pulses = nil
			} else {
				if out.Pulses == nil {
					out.Pulses = new(Pulses)
				}
				(*out.Pulses).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB55a1443EncodeGithubComKlauspostCompressArena(out *jwriter.Writer, in VitalsTemplateSpec) {
	out.RawByte('{')
	first := true
	_ = first
	if in.RespiratoryRate != nil {
		const prefix string = ",\"respiratory_rate\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(*in.RespiratoryRate))
	}
	if in.SpO2 != nil {
		const prefix string = ",\"spo2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.SpO2))
	}
	if in.BloodPressure != nil {
		const prefix string = ",\"blood_pressure\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.BloodPressure).MarshalEasyJSON(out)
	}
	if in.EtCO2 != nil {
		const prefix string = ",\"etco2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.EtCO2))
	}
	if in.TemperatureBlood != nil {
		const prefix string = ",\"temperature_blood\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(*in.TemperatureBlood))
	}
	if in.TemperaturePeripheral != nil {
		const prefix string = ",\"temperature_peripheral\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(*in.TemperaturePeripheral))
	}
	if in.Ecg != nil {
		const prefix string = ",\"ecg\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ecg).MarshalEasyJSON(out)
	}
	if in.Eyes != nil {
		const prefix string = ",\"eyes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Eyes).MarshalEasyJSON(out)
	}
	if in.AirwayObstruction != nil {
		const prefix string = ",\"airway_obstruction\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.AirwayObstruction).MarshalEasyJSON(out)
	}
	if in.LungSounds != nil {
		const prefix string = ",\"lung_sounds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.LungSounds).MarshalEasyJSON(out)
	}
	if in.HeartSounds != nil {
		const prefix string = ",\"heart_sounds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.HeartSounds).MarshalEasyJSON(out)
	}
	if in.BowelSounds != nil {
		const prefix string = ",\"bowel_sounds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.BowelSounds).MarshalEasyJSON(out)
	}
	if in.Pulses != nil {
		const prefix string = ",\"pulses\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Pulses).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VitalsTemplateSpec) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB55a1443EncodeGithubComKlauspostCompressArena(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VitalsTemplateSpec) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB55a1443EncodeGithubComKlauspostCompressArena(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VitalsTemplateSpec) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB55a1443DecodeGithubComKlauspostCompressArena(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VitalsTemplateSpec) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB55a1443DecodeGithubComKlauspostCompressArena(l, v)
}
func easyjsonB55a1443DecodeGithubComKlauspostCompressArena1(in *jlexer.Lexer, out *VitalsTemplate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "spec":
			(out.Spec).UnmarshalEasyJSON(in)
		case "foo":
			if in.IsNull() {
				in.Skip()
				out.Foo = nil
			} else {
				if out.Foo == nil {
					out.Foo = new(int)
				}
				*out.Foo = int(in.Int())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB55a1443EncodeGithubComKlauspostCompressArena1(out *jwriter.Writer, in VitalsTemplate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"spec\":"
		out.RawString(prefix[1:])
		(in.Spec).MarshalEasyJSON(out)
	}
	if in.Foo != nil {
		const prefix string = ",\"foo\":"
		out.RawString(prefix)
		out.Int(int(*in.Foo))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VitalsTemplate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB55a1443EncodeGithubComKlauspostCompressArena1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VitalsTemplate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB55a1443EncodeGithubComKlauspostCompressArena1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VitalsTemplate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB55a1443DecodeGithubComKlauspostCompressArena1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VitalsTemplate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB55a1443DecodeGithubComKlauspostCompressArena1(l, v)
}
func easyjsonB55a1443DecodeGithubComKlauspostCompressArena2(in *jlexer.Lexer, out *SingleLungSounds) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "anterior_upper":
			if in.IsNull() {
				in.Skip()
				out.AnteriorUpper = nil
			} else {
				if out.AnteriorUpper == nil {
					out.AnteriorUpper = new(string)
				}
				*out.AnteriorUpper = string(in.String())
			}
		case "anterior_upper_volume":
			if in.IsNull() {
				in.Skip()
				out.AnteriorUpperVolume = nil
			} else {
				if out.AnteriorUpperVolume == nil {
					out.AnteriorUpperVolume = new(int64)
				}
				*out.AnteriorUpperVolume = int64(in.Int64())
			}
		case "anterior_lower":
			if in.IsNull() {
				in.Skip()
				out.AnteriorLower = nil
			} else {
				if out.AnteriorLower == nil {
					out.AnteriorLower = new(string)
				}
				*out.AnteriorLower = string(in.String())
			}
		case "anterior_lower_volume":
			if in.IsNull() {
				in.Skip()
				out.AnteriorLowerVolume = nil
			} else {
				if out.AnteriorLowerVolume == nil {
					out.AnteriorLowerVolume = new(int64)
				}
				*out.AnteriorLowerVolume = int64(in.Int64())
			}
		case "anterior_middle":
			if in.IsNull() {
				in.Skip()
				out.AnteriorMiddle = nil
			} else {
				if out.AnteriorMiddle == nil {
					out.AnteriorMiddle = new(string)
				}
				*out.AnteriorMiddle = string(in.String())
			}
		case "anterior_middle_volume":
			if in.IsNull() {
				in.Skip()
				out.AnteriorMiddleVolume = nil
			} else {
				if out.AnteriorMiddleVolume == nil {
					out.AnteriorMiddleVolume = new(int64)
				}
				*out.AnteriorMiddleVolume = int64(in.Int64())
			}
		case "posterior_upper":
			if in.IsNull() {
				in.Skip()
				out.PosteriorUpper = nil
			} else {
				if out.PosteriorUpper == nil {
					out.PosteriorUpper = new(string)
				}
				*out.PosteriorUpper = string(in.String())
			}
		case "posterior_upper_volume":
			if in.IsNull() {
				in.Skip()
				out.PosteriorUpperVolume = nil
			} else {
				if out.PosteriorUpperVolume == nil {
					out.PosteriorUpperVolume = new(int64)
				}
				*out.PosteriorUpperVolume = int64(in.Int64())
			}
		case "posterior_lower":
			if in.IsNull() {
				in.Skip()
				out.PosteriorLower = nil
			} else {
				if out.PosteriorLower == nil {
					out.PosteriorLower = new(string)
				}
				*out.PosteriorLower = string(in.String())
			}
		case "posterior_lower_volume":
			if in.IsNull() {
				in.Skip()
				out.PosteriorLowerVolume = nil
			} else {
				if out.PosteriorLowerVolume == nil {
					out.PosteriorLowerVolume = new(int64)
				}
				*out.PosteriorLowerVolume = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB55a1443EncodeGithubComKlauspostCompressArena2(out *jwriter.Writer, in SingleLungSounds) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AnteriorUpper != nil {
		const prefix string = ",\"anterior_upper\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(*in.AnteriorUpper))
	}
	if in.AnteriorUpperVolume != nil {
		const prefix string = ",\"anterior_upper_volume\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.AnteriorUpperVolume))
	}
	if in.AnteriorLower != nil {
		const prefix string = ",\"anterior_lower\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AnteriorLower))
	}
	if in.AnteriorLowerVolume != nil {
		const prefix string = ",\"anterior_lower_volume\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.AnteriorLowerVolume))
	}
	if in.AnteriorMiddle != nil {
		const prefix string = ",\"anterior_middle\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AnteriorMiddle))
	}
	if in.AnteriorMiddleVolume != nil {
		const prefix string = ",\"anterior_middle_volume\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.AnteriorMiddleVolume))
	}
	if in.PosteriorUpper != nil {
		const prefix string = ",\"posterior_upper\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.PosteriorUpper))
	}
	if in.PosteriorUpperVolume != nil {
		const prefix string = ",\"posterior_upper_volume\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.PosteriorUpperVolume))
	}
	if in.PosteriorLower != nil {
		const prefix string = ",\"posterior_lower\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.PosteriorLower))
	}
	if in.PosteriorLowerVolume != nil {
		const prefix string = ",\"posterior_lower_volume\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.PosteriorLowerVolume))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SingleLungSounds) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB55a1443EncodeGithubComKlauspostCompressArena2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SingleLungSounds) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB55a1443EncodeGithubComKlauspostCompressArena2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SingleLungSounds) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB55a1443DecodeGithubComKlauspostCompressArena2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SingleLungSounds) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB55a1443DecodeGithubComKlauspostCompressArena2(l, v)
}
func easyjsonB55a1443DecodeGithubComKlauspostCompressArena3(in *jlexer.Lexer, out *Pulses) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "central":
			if in.IsNull() {
				in.Skip()
				out.Central = nil
			} else {
				if out.Central == nil {
					out.Central = new(string)
				}
				*out.Central = string(in.String())
			}
		case "central_limited":
			if in.IsNull() {
				in.Skip()
				out.CentralLimited = nil
			} else {
				if out.CentralLimited == nil {
					out.CentralLimited = new(string)
				}
				*out.CentralLimited = string(in.String())
			}
		case "right_leg":
			if in.IsNull() {
				in.Skip()
				out.RightLeg = nil
			} else {
				if out.RightLeg == nil {
					out.RightLeg = new(string)
				}
				*out.RightLeg = string(in.String())
			}
		case "right_leg_limited":
			if in.IsNull() {
				in.Skip()
				out.RightLegLimited = nil
			} else {
				if out.RightLegLimited == nil {
					out.RightLegLimited = new(string)
				}
				*out.RightLegLimited = string(in.String())
			}
		case "left_leg":
			if in.IsNull() {
				in.Skip()
				out.LeftLeg = nil
			} else {
				if out.LeftLeg == nil {
					out.LeftLeg = new(string)
				}
				*out.LeftLeg = string(in.String())
			}
		case "left_leg_limited":
			if in.IsNull() {
				in.Skip()
				out.LeftLegLimited = nil
			} else {
				if out.LeftLegLimited == nil {
					out.LeftLegLimited = new(string)
				}
				*out.LeftLegLimited = string(in.String())
			}
		case "right_foot":
			if in.IsNull() {
				in.Skip()
				out.RightFoot = nil
			} else {
				if out.RightFoot == nil {
					out.RightFoot = new(string)
				}
				*out.RightFoot = string(in.String())
			}
		case "right_foot_limited":
			if in.IsNull() {
				in.Skip()
				out.RightFootLimited = nil
			} else {
				if out.RightFootLimited == nil {
					out.RightFootLimited = new(string)
				}
				*out.RightFootLimited = string(in.String())
			}
		case "left_foot":
			if in.IsNull() {
				in.Skip()
				out.LeftFoot = nil
			} else {
				if out.LeftFoot == nil {
					out.LeftFoot = new(string)
				}
				*out.LeftFoot = string(in.String())
			}
		case "left_foot_limited":
			if in.IsNull() {
				in.Skip()
				out.LeftFootLimited = nil
			} else {
				if out.LeftFootLimited == nil {
					out.LeftFootLimited = new(string)
				}
				*out.LeftFootLimited = string(in.String())
			}
		case "right_arm":
			if in.IsNull() {
				in.Skip()
				out.RightArm = nil
			} else {
				if out.RightArm == nil {
					out.RightArm = new(string)
				}
				*out.RightArm = string(in.String())
			}
		case "right_arm_limited":
			if in.IsNull() {
				in.Skip()
				out.RightArmLimited = nil
			} else {
				if out.RightArmLimited == nil {
					out.RightArmLimited = new(string)
				}
				*out.RightArmLimited = string(in.String())
			}
		case "left_arm":
			if in.IsNull() {
				in.Skip()
				out.LeftArm = nil
			} else {
				if out.LeftArm == nil {
					out.LeftArm = new(string)
				}
				*out.LeftArm = string(in.String())
			}
		case "left_arm_limited":
			if in.IsNull() {
				in.Skip()
				out.LeftArmLimited = nil
			} else {
				if out.LeftArmLimited == nil {
					out.LeftArmLimited = new(string)
				}
				*out.LeftArmLimited = string(in.String())
			}
		case "right_hand":
			if in.IsNull() {
				in.Skip()
				out.RightHand = nil
			} else {
				if out.RightHand == nil {
					out.RightHand = new(string)
				}
				*out.RightHand = string(in.String())
			}
		case "right_hand_limited":
			if in.IsNull() {
				in.Skip()
				out.RightHandLimited = nil
			} else {
				if out.RightHandLimited == nil {
					out.RightHandLimited = new(string)
				}
				*out.RightHandLimited = string(in.String())
			}
		case "left_hand":
			if in.IsNull() {
				in.Skip()
				out.LeftHand = nil
			} else {
				if out.LeftHand == nil {
					out.LeftHand = new(string)
				}
				*out.LeftHand = string(in.String())
			}
		case "left_hand_limited":
			if in.IsNull() {
				in.Skip()
				out.LeftHandLimited = nil
			} else {
				if out.LeftHandLimited == nil {
					out.LeftHandLimited = new(string)
				}
				*out.LeftHandLimited = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB55a1443EncodeGithubComKlauspostCompressArena3(out *jwriter.Writer, in Pulses) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Central != nil {
		const prefix string = ",\"central\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(*in.Central))
	}
	if in.CentralLimited != nil {
		const prefix string = ",\"central_limited\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.CentralLimited))
	}
	if in.RightLeg != nil {
		const prefix string = ",\"right_leg\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.RightLeg))
	}
	if in.RightLegLimited != nil {
		const prefix string = ",\"right_leg_limited\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.RightLegLimited))
	}
	if in.LeftLeg != nil {
		const prefix string = ",\"left_leg\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.LeftLeg))
	}
	if in.LeftLegLimited != nil {
		const prefix string = ",\"left_leg_limited\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.LeftLegLimited))
	}
	if in.RightFoot != nil {
		const prefix string = ",\"right_foot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.RightFoot))
	}
	if in.RightFootLimited != nil {
		const prefix string = ",\"right_foot_limited\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.RightFootLimited))
	}
	if in.LeftFoot != nil {
		const prefix string = ",\"left_foot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.LeftFoot))
	}
	if in.LeftFootLimited != nil {
		const prefix string = ",\"left_foot_limited\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.LeftFootLimited))
	}
	if in.RightArm != nil {
		const prefix string = ",\"right_arm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.RightArm))
	}
	if in.RightArmLimited != nil {
		const prefix string = ",\"right_arm_limited\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.RightArmLimited))
	}
	if in.LeftArm != nil {
		const prefix string = ",\"left_arm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.LeftArm))
	}
	if in.LeftArmLimited != nil {
		const prefix string = ",\"left_arm_limited\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.LeftArmLimited))
	}
	if in.RightHand != nil {
		const prefix string = ",\"right_hand\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.RightHand))
	}
	if in.RightHandLimited != nil {
		const prefix string = ",\"right_hand_limited\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.RightHandLimited))
	}
	if in.LeftHand != nil {
		const prefix string = ",\"left_hand\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.LeftHand))
	}
	if in.LeftHandLimited != nil {
		const prefix string = ",\"left_hand_limited\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.LeftHandLimited))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Pulses) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB55a1443EncodeGithubComKlauspostCompressArena3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Pulses) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB55a1443EncodeGithubComKlauspostCompressArena3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Pulses) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB55a1443DecodeGithubComKlauspostCompressArena3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Pulses) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB55a1443DecodeGithubComKlauspostCompressArena3(l, v)
}
func easyjsonB55a1443DecodeGithubComKlauspostCompressArena4(in *jlexer.Lexer, out *LungSounds) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "left":
			if in.IsNull() {
				in.Skip()
				out.Left = nil
			} else {
				if out.Left == nil {
					out.Left = new(SingleLungSounds)
				}
				(*out.Left).UnmarshalEasyJSON(in)
			}
		case "right":
			if in.IsNull() {
				in.Skip()
				out.Right = nil
			} else {
				if out.Right == nil {
					out.Right = new(SingleLungSounds)
				}
				(*out.Right).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB55a1443EncodeGithubComKlauspostCompressArena4(out *jwriter.Writer, in LungSounds) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Left != nil {
		const prefix string = ",\"left\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Left).MarshalEasyJSON(out)
	}
	if in.Right != nil {
		const prefix string = ",\"right\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Right).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LungSounds) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB55a1443EncodeGithubComKlauspostCompressArena4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LungSounds) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB55a1443EncodeGithubComKlauspostCompressArena4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LungSounds) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB55a1443DecodeGithubComKlauspostCompressArena4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LungSounds) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB55a1443DecodeGithubComKlauspostCompressArena4(l, v)
}
func easyjsonB55a1443DecodeGithubComKlauspostCompressArena5(in *jlexer.Lexer, out *HeartSounds) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "aortic":
			if in.IsNull() {
				in.Skip()
				out.Aortic = nil
			} else {
				if out.Aortic == nil {
					out.Aortic = new(string)
				}
				*out.Aortic = string(in.String())
			}
		case "aortic_volume":
			if in.IsNull() {
				in.Skip()
				out.AorticVolume = nil
			} else {
				if out.AorticVolume == nil {
					out.AorticVolume = new(int64)
				}
				*out.AorticVolume = int64(in.Int64())
			}
		case "pulmonary":
			if in.IsNull() {
				in.Skip()
				out.Pulmonary = nil
			} else {
				if out.Pulmonary == nil {
					out.Pulmonary = new(string)
				}
				*out.Pulmonary = string(in.String())
			}
		case "pulmonary_volume":
			if in.IsNull() {
				in.Skip()
				out.PulmonaryVolume = nil
			} else {
				if out.PulmonaryVolume == nil {
					out.PulmonaryVolume = new(int64)
				}
				*out.PulmonaryVolume = int64(in.Int64())
			}
		case "tricuspid":
			if in.IsNull() {
				in.Skip()
				out.Tricuspid = nil
			} else {
				if out.Tricuspid == nil {
					out.Tricuspid = new(string)
				}
				*out.Tricuspid = string(in.String())
			}
		case "tricuspid_volume":
			if in.IsNull() {
				in.Skip()
				out.TricuspidVolume = nil
			} else {
				if out.TricuspidVolume == nil {
					out.TricuspidVolume = new(int64)
				}
				*out.TricuspidVolume = int64(in.Int64())
			}
		case "mitral":
			if in.IsNull() {
				in.Skip()
				out.Mitral = nil
			} else {
				if out.Mitral == nil {
					out.Mitral = new(string)
				}
				*out.Mitral = string(in.String())
			}
		case "mitral_volume":
			if in.IsNull() {
				in.Skip()
				out.MitralVolume = nil
			} else {
				if out.MitralVolume == nil {
					out.MitralVolume = new(int64)
				}
				*out.MitralVolume = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB55a1443EncodeGithubComKlauspostCompressArena5(out *jwriter.Writer, in HeartSounds) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Aortic != nil {
		const prefix string = ",\"aortic\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(*in.Aortic))
	}
	if in.AorticVolume != nil {
		const prefix string = ",\"aortic_volume\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.AorticVolume))
	}
	if in.Pulmonary != nil {
		const prefix string = ",\"pulmonary\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Pulmonary))
	}
	if in.PulmonaryVolume != nil {
		const prefix string = ",\"pulmonary_volume\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.PulmonaryVolume))
	}
	if in.Tricuspid != nil {
		const prefix string = ",\"tricuspid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Tricuspid))
	}
	if in.TricuspidVolume != nil {
		const prefix string = ",\"tricuspid_volume\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.TricuspidVolume))
	}
	if in.Mitral != nil {
		const prefix string = ",\"mitral\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Mitral))
	}
	if in.MitralVolume != nil {
		const prefix string = ",\"mitral_volume\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.MitralVolume))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HeartSounds) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB55a1443EncodeGithubComKlauspostCompressArena5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HeartSounds) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB55a1443EncodeGithubComKlauspostCompressArena5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HeartSounds) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB55a1443DecodeGithubComKlauspostCompressArena5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HeartSounds) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB55a1443DecodeGithubComKlauspostCompressArena5(l, v)
}
func easyjsonB55a1443DecodeGithubComKlauspostCompressArena6(in *jlexer.Lexer, out *Eyes) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "left":
			if in.IsNull() {
				in.Skip()
				out.Left = nil
			} else {
				if out.Left == nil {
					out.Left = new(Eye)
				}
				(*out.Left).UnmarshalEasyJSON(in)
			}
		case "right":
			if in.IsNull() {
				in.Skip()
				out.Right = nil
			} else {
				if out.Right == nil {
					out.Right = new(Eye)
				}
				(*out.Right).UnmarshalEasyJSON(in)
			}
		case "blink_rate":
			if in.IsNull() {
				in.Skip()
				out.BlinkRate = nil
			} else {
				if out.BlinkRate == nil {
					out.BlinkRate = new(string)
				}
				*out.BlinkRate = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB55a1443EncodeGithubComKlauspostCompressArena6(out *jwriter.Writer, in Eyes) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Left != nil {
		const prefix string = ",\"left\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Left).MarshalEasyJSON(out)
	}
	if in.Right != nil {
		const prefix string = ",\"right\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Right).MarshalEasyJSON(out)
	}
	if in.BlinkRate != nil {
		const prefix string = ",\"blink_rate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.BlinkRate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Eyes) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB55a1443EncodeGithubComKlauspostCompressArena6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Eyes) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB55a1443EncodeGithubComKlauspostCompressArena6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Eyes) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB55a1443DecodeGithubComKlauspostCompressArena6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Eyes) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB55a1443DecodeGithubComKlauspostCompressArena6(l, v)
}
func easyjsonB55a1443DecodeGithubComKlauspostCompressArena7(in *jlexer.Lexer, out *Eye) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "eyelid_position":
			if in.IsNull() {
				in.Skip()
				out.EyelidPosition = nil
			} else {
				if out.EyelidPosition == nil {
					out.EyelidPosition = new(string)
				}
				*out.EyelidPosition = string(in.String())
			}
		case "pupil_size":
			if in.IsNull() {
				in.Skip()
				out.PupilSize = nil
			} else {
				if out.PupilSize == nil {
					out.PupilSize = new(int64)
				}
				*out.PupilSize = int64(in.Int64())
			}
		case "pupil_responsiveness":
			if in.IsNull() {
				in.Skip()
				out.PupilResponsiveness = nil
			} else {
				if out.PupilResponsiveness == nil {
					out.PupilResponsiveness = new(string)
				}
				*out.PupilResponsiveness = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB55a1443EncodeGithubComKlauspostCompressArena7(out *jwriter.Writer, in Eye) {
	out.RawByte('{')
	first := true
	_ = first
	if in.EyelidPosition != nil {
		const prefix string = ",\"eyelid_position\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(*in.EyelidPosition))
	}
	if in.PupilSize != nil {
		const prefix string = ",\"pupil_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.PupilSize))
	}
	if in.PupilResponsiveness != nil {
		const prefix string = ",\"pupil_responsiveness\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.PupilResponsiveness))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Eye) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB55a1443EncodeGithubComKlauspostCompressArena7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Eye) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB55a1443EncodeGithubComKlauspostCompressArena7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Eye) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB55a1443DecodeGithubComKlauspostCompressArena7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Eye) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB55a1443DecodeGithubComKlauspostCompressArena7(l, v)
}
func easyjsonB55a1443DecodeGithubComKlauspostCompressArena8(in *jlexer.Lexer, out *Extrasystole) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(string)
				}
				*out.Type = string(in.String())
			}
		case "probability":
			if in.IsNull() {
				in.Skip()
				out.Probability = nil
			} else {
				if out.Probability == nil {
					out.Probability = new(int64)
				}
				*out.Probability = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB55a1443EncodeGithubComKlauspostCompressArena8(out *jwriter.Writer, in Extrasystole) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != nil {
		const prefix string = ",\"type\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(*in.Type))
	}
	if in.Probability != nil {
		const prefix string = ",\"probability\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Probability))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Extrasystole) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB55a1443EncodeGithubComKlauspostCompressArena8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Extrasystole) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB55a1443EncodeGithubComKlauspostCompressArena8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Extrasystole) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB55a1443DecodeGithubComKlauspostCompressArena8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Extrasystole) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB55a1443DecodeGithubComKlauspostCompressArena8(l, v)
}
func easyjsonB55a1443DecodeGithubComKlauspostCompressArena9(in *jlexer.Lexer, out *Ecg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "heart_rate":
			if in.IsNull() {
				in.Skip()
				out.HeartRate = nil
			} else {
				if out.HeartRate == nil {
					out.HeartRate = new(int64)
				}
				*out.HeartRate = int64(in.Int64())
			}
		case "basic_rhythm":
			if in.IsNull() {
				in.Skip()
				out.BasicRhythm = nil
			} else {
				if out.BasicRhythm == nil {
					out.BasicRhythm = new(string)
				}
				*out.BasicRhythm = string(in.String())
			}
		case "extrasystole":
			if in.IsNull() {
				in.Skip()
				out.Extrasystole = nil
			} else {
				if out.Extrasystole == nil {
					out.Extrasystole = new(Extrasystole)
				}
				(*out.Extrasystole).UnmarshalEasyJSON(in)
			}
		case "severity":
			if in.IsNull() {
				in.Skip()
				out.Severity = nil
			} else {
				if out.Severity == nil {
					out.Severity = new(int64)
				}
				*out.Severity = int64(in.Int64())
			}
		case "allow_pacing":
			if in.IsNull() {
				in.Skip()
				out.AllowPacing = nil
			} else {
				if out.AllowPacing == nil {
					out.AllowPacing = new(bool)
				}
				*out.AllowPacing = bool(in.Bool())
			}
		case "emd_pea":
			if in.IsNull() {
				in.Skip()
				out.EmdPea = nil
			} else {
				if out.EmdPea == nil {
					out.EmdPea = new(bool)
				}
				*out.EmdPea = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB55a1443EncodeGithubComKlauspostCompressArena9(out *jwriter.Writer, in Ecg) {
	out.RawByte('{')
	first := true
	_ = first
	if in.HeartRate != nil {
		const prefix string = ",\"heart_rate\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(*in.HeartRate))
	}
	if in.BasicRhythm != nil {
		const prefix string = ",\"basic_rhythm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.BasicRhythm))
	}
	if in.Extrasystole != nil {
		const prefix string = ",\"extrasystole\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Extrasystole).MarshalEasyJSON(out)
	}
	if in.Severity != nil {
		const prefix string = ",\"severity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Severity))
	}
	if in.AllowPacing != nil {
		const prefix string = ",\"allow_pacing\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.AllowPacing))
	}
	if in.EmdPea != nil {
		const prefix string = ",\"emd_pea\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.EmdPea))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Ecg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB55a1443EncodeGithubComKlauspostCompressArena9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Ecg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB55a1443EncodeGithubComKlauspostCompressArena9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Ecg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB55a1443DecodeGithubComKlauspostCompressArena9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Ecg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB55a1443DecodeGithubComKlauspostCompressArena9(l, v)
}
func easyjsonB55a1443DecodeGithubComKlauspostCompressArena10(in *jlexer.Lexer, out *BowelSounds) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bowel":
			if in.IsNull() {
				in.Skip()
				out.Bowel = nil
			} else {
				if out.Bowel == nil {
					out.Bowel = new(string)
				}
				*out.Bowel = string(in.String())
			}
		case "bowel_volume":
			if in.IsNull() {
				in.Skip()
				out.BowelVolume = nil
			} else {
				if out.BowelVolume == nil {
					out.BowelVolume = new(int64)
				}
				*out.BowelVolume = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB55a1443EncodeGithubComKlauspostCompressArena10(out *jwriter.Writer, in BowelSounds) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Bowel != nil {
		const prefix string = ",\"bowel\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(*in.Bowel))
	}
	if in.BowelVolume != nil {
		const prefix string = ",\"bowel_volume\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.BowelVolume))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BowelSounds) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB55a1443EncodeGithubComKlauspostCompressArena10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BowelSounds) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB55a1443EncodeGithubComKlauspostCompressArena10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BowelSounds) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB55a1443DecodeGithubComKlauspostCompressArena10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BowelSounds) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB55a1443DecodeGithubComKlauspostCompressArena10(l, v)
}
func easyjsonB55a1443DecodeGithubComKlauspostCompressArena11(in *jlexer.Lexer, out *BloodPressure) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "systolic":
			if in.IsNull() {
				in.Skip()
				out.Systolic = nil
			} else {
				if out.Systolic == nil {
					out.Systolic = new(int64)
				}
				*out.Systolic = int64(in.Int64())
			}
		case "diastolic":
			if in.IsNull() {
				in.Skip()
				out.Diastolic = nil
			} else {
				if out.Diastolic == nil {
					out.Diastolic = new(int64)
				}
				*out.Diastolic = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB55a1443EncodeGithubComKlauspostCompressArena11(out *jwriter.Writer, in BloodPressure) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Systolic != nil {
		const prefix string = ",\"systolic\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(*in.Systolic))
	}
	if in.Diastolic != nil {
		const prefix string = ",\"diastolic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Diastolic))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BloodPressure) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB55a1443EncodeGithubComKlauspostCompressArena11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BloodPressure) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB55a1443EncodeGithubComKlauspostCompressArena11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BloodPressure) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB55a1443DecodeGithubComKlauspostCompressArena11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BloodPressure) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB55a1443DecodeGithubComKlauspostCompressArena11(l, v)
}
func easyjsonB55a1443DecodeGithubComKlauspostCompressArena12(in *jlexer.Lexer, out *AirwayObstruction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tongue_edema":
			if in.IsNull() {
				in.Skip()
				out.TongueEdema = nil
			} else {
				if out.TongueEdema == nil {
					out.TongueEdema = new(string)
				}
				*out.TongueEdema = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB55a1443EncodeGithubComKlauspostCompressArena12(out *jwriter.Writer, in AirwayObstruction) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TongueEdema != nil {
		const prefix string = ",\"tongue_edema\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(*in.TongueEdema))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AirwayObstruction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB55a1443EncodeGithubComKlauspostCompressArena12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AirwayObstruction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB55a1443EncodeGithubComKlauspostCompressArena12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AirwayObstruction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB55a1443DecodeGithubComKlauspostCompressArena12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AirwayObstruction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB55a1443DecodeGithubComKlauspostCompressArena12(l, v)
}
