package arena

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"time"

	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *SimEventPacingArguments) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "time_stamp":
			z.TimeStamp, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "TimeStamp")
				return
			}
		case "measured_current":
			z.MeasuredCurrent, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "MeasuredCurrent")
				return
			}
		case "capture":
			z.Capture, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Capture")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z SimEventPacingArguments) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(3)
	var zb0001Mask uint8 /* 3 bits */
	if z.TimeStamp == (time.Time{}) {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.MeasuredCurrent == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.Capture == false {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// write "time_stamp"
		err = en.Append(0xaa, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70)
		if err != nil {
			return
		}
		err = en.WriteTime(z.TimeStamp)
		if err != nil {
			err = msgp.WrapError(err, "TimeStamp")
			return
		}
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// write "measured_current"
		err = en.Append(0xb0, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74)
		if err != nil {
			return
		}
		err = en.WriteInt32(z.MeasuredCurrent)
		if err != nil {
			err = msgp.WrapError(err, "MeasuredCurrent")
			return
		}
	}
	if (zb0001Mask & 0x4) == 0 { // if not empty
		// write "capture"
		err = en.Append(0xa7, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65)
		if err != nil {
			return
		}
		err = en.WriteBool(z.Capture)
		if err != nil {
			err = msgp.WrapError(err, "Capture")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z SimEventPacingArguments) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(3)
	var zb0001Mask uint8 /* 3 bits */
	if z.TimeStamp == (time.Time{}) {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.MeasuredCurrent == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.Capture == false {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// string "time_stamp"
		o = append(o, 0xaa, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70)
		o = msgp.AppendTime(o, z.TimeStamp)
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// string "measured_current"
		o = append(o, 0xb0, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74)
		o = msgp.AppendInt32(o, z.MeasuredCurrent)
	}
	if (zb0001Mask & 0x4) == 0 { // if not empty
		// string "capture"
		o = append(o, 0xa7, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65)
		o = msgp.AppendBool(o, z.Capture)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SimEventPacingArguments) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "time_stamp":
			z.TimeStamp, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TimeStamp")
				return
			}
		case "measured_current":
			z.MeasuredCurrent, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MeasuredCurrent")
				return
			}
		case "capture":
			z.Capture, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Capture")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z SimEventPacingArguments) Msgsize() (s int) {
	s = 1 + 11 + msgp.TimeSize + 17 + msgp.Int32Size + 8 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SimEventRegisterEventCmd) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "api_version":
			z.ApiVersion, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ApiVersion")
				return
			}
		case "simulator_name":
			z.SimulatorName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "SimulatorName")
				return
			}
		case "tenant":
			z.Tenant, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Tenant")
				return
			}
		case "event_id":
			z.EventID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "EventID")
				return
			}
		case "time_stamp":
			z.TimeStamp, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "TimeStamp")
				return
			}
		case "arguments":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Arguments")
				return
			}
			if z.Arguments == nil {
				z.Arguments = make(map[string]interface{}, zb0002)
			} else if len(z.Arguments) > 0 {
				for key := range z.Arguments {
					delete(z.Arguments, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 interface{}
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Arguments")
					return
				}
				za0002, err = dc.ReadIntf()
				if err != nil {
					err = msgp.WrapError(err, "Arguments", za0001)
					return
				}
				z.Arguments[za0001] = za0002
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *SimEventRegisterEventCmd) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(6)
	var zb0001Mask uint8 /* 6 bits */
	if z.ApiVersion == "" {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.SimulatorName == "" {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.Tenant == "" {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.EventID == "" {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.TimeStamp == (time.Time{}) {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if z.Arguments == nil {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// write "api_version"
		err = en.Append(0xab, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
		if err != nil {
			return
		}
		err = en.WriteString(z.ApiVersion)
		if err != nil {
			err = msgp.WrapError(err, "ApiVersion")
			return
		}
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// write "simulator_name"
		err = en.Append(0xae, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65)
		if err != nil {
			return
		}
		err = en.WriteString(z.SimulatorName)
		if err != nil {
			err = msgp.WrapError(err, "SimulatorName")
			return
		}
	}
	if (zb0001Mask & 0x4) == 0 { // if not empty
		// write "tenant"
		err = en.Append(0xa6, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74)
		if err != nil {
			return
		}
		err = en.WriteString(z.Tenant)
		if err != nil {
			err = msgp.WrapError(err, "Tenant")
			return
		}
	}
	if (zb0001Mask & 0x8) == 0 { // if not empty
		// write "event_id"
		err = en.Append(0xa8, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64)
		if err != nil {
			return
		}
		err = en.WriteString(z.EventID)
		if err != nil {
			err = msgp.WrapError(err, "EventID")
			return
		}
	}
	if (zb0001Mask & 0x10) == 0 { // if not empty
		// write "time_stamp"
		err = en.Append(0xaa, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70)
		if err != nil {
			return
		}
		err = en.WriteTime(z.TimeStamp)
		if err != nil {
			err = msgp.WrapError(err, "TimeStamp")
			return
		}
	}
	if (zb0001Mask & 0x20) == 0 { // if not empty
		// write "arguments"
		err = en.Append(0xa9, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73)
		if err != nil {
			return
		}
		err = en.WriteMapHeader(uint32(len(z.Arguments)))
		if err != nil {
			err = msgp.WrapError(err, "Arguments")
			return
		}
		for za0001, za0002 := range z.Arguments {
			err = en.WriteString(za0001)
			if err != nil {
				err = msgp.WrapError(err, "Arguments")
				return
			}
			err = en.WriteIntf(za0002)
			if err != nil {
				err = msgp.WrapError(err, "Arguments", za0001)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SimEventRegisterEventCmd) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(6)
	var zb0001Mask uint8 /* 6 bits */
	if z.ApiVersion == "" {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.SimulatorName == "" {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.Tenant == "" {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.EventID == "" {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.TimeStamp == (time.Time{}) {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if z.Arguments == nil {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// string "api_version"
		o = append(o, 0xab, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
		o = msgp.AppendString(o, z.ApiVersion)
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// string "simulator_name"
		o = append(o, 0xae, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65)
		o = msgp.AppendString(o, z.SimulatorName)
	}
	if (zb0001Mask & 0x4) == 0 { // if not empty
		// string "tenant"
		o = append(o, 0xa6, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74)
		o = msgp.AppendString(o, z.Tenant)
	}
	if (zb0001Mask & 0x8) == 0 { // if not empty
		// string "event_id"
		o = append(o, 0xa8, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64)
		o = msgp.AppendString(o, z.EventID)
	}
	if (zb0001Mask & 0x10) == 0 { // if not empty
		// string "time_stamp"
		o = append(o, 0xaa, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70)
		o = msgp.AppendTime(o, z.TimeStamp)
	}
	if (zb0001Mask & 0x20) == 0 { // if not empty
		// string "arguments"
		o = append(o, 0xa9, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73)
		o = msgp.AppendMapHeader(o, uint32(len(z.Arguments)))
		for za0001, za0002 := range z.Arguments {
			o = msgp.AppendString(o, za0001)
			o, err = msgp.AppendIntf(o, za0002)
			if err != nil {
				err = msgp.WrapError(err, "Arguments", za0001)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SimEventRegisterEventCmd) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "api_version":
			z.ApiVersion, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ApiVersion")
				return
			}
		case "simulator_name":
			z.SimulatorName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SimulatorName")
				return
			}
		case "tenant":
			z.Tenant, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Tenant")
				return
			}
		case "event_id":
			z.EventID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "EventID")
				return
			}
		case "time_stamp":
			z.TimeStamp, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TimeStamp")
				return
			}
		case "arguments":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Arguments")
				return
			}
			if z.Arguments == nil {
				z.Arguments = make(map[string]interface{}, zb0002)
			} else if len(z.Arguments) > 0 {
				for key := range z.Arguments {
					delete(z.Arguments, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 interface{}
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Arguments")
					return
				}
				za0002, bts, err = msgp.ReadIntfBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Arguments", za0001)
					return
				}
				z.Arguments[za0001] = za0002
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SimEventRegisterEventCmd) Msgsize() (s int) {
	s = 1 + 12 + msgp.StringPrefixSize + len(z.ApiVersion) + 15 + msgp.StringPrefixSize + len(z.SimulatorName) + 7 + msgp.StringPrefixSize + len(z.Tenant) + 9 + msgp.StringPrefixSize + len(z.EventID) + 11 + msgp.TimeSize + 10 + msgp.MapHeaderSize
	if z.Arguments != nil {
		for za0001, za0002 := range z.Arguments {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.GuessSize(za0002)
		}
	}
	return
}
