// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package arena

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonA683d928DecodeGithubComKlauspostCompressArena(in *jlexer.Lexer, out *SimEventRegisterEventCmd) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "api_version":
			out.ApiVersion = string(in.String())
		case "simulator_name":
			out.SimulatorName = string(in.String())
		case "tenant":
			out.Tenant = string(in.String())
		case "event_id":
			out.EventID = string(in.String())
		case "time_stamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TimeStamp).UnmarshalJSON(data))
			}
		case "arguments":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Arguments = make(map[string]interface{})
				} else {
					out.Arguments = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 interface{}
					if m, ok := v1.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v1.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v1 = in.Interface()
					}
					(out.Arguments)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA683d928EncodeGithubComKlauspostCompressArena(out *jwriter.Writer, in SimEventRegisterEventCmd) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ApiVersion != "" {
		const prefix string = ",\"api_version\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ApiVersion))
	}
	if in.SimulatorName != "" {
		const prefix string = ",\"simulator_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SimulatorName))
	}
	if in.Tenant != "" {
		const prefix string = ",\"tenant\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Tenant))
	}
	if in.EventID != "" {
		const prefix string = ",\"event_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EventID))
	}
	if true {
		const prefix string = ",\"time_stamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.TimeStamp).MarshalJSON())
	}
	if len(in.Arguments) != 0 {
		const prefix string = ",\"arguments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Arguments {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				if m, ok := v2Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v2Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v2Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SimEventRegisterEventCmd) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA683d928EncodeGithubComKlauspostCompressArena(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SimEventRegisterEventCmd) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA683d928EncodeGithubComKlauspostCompressArena(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SimEventRegisterEventCmd) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA683d928DecodeGithubComKlauspostCompressArena(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SimEventRegisterEventCmd) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA683d928DecodeGithubComKlauspostCompressArena(l, v)
}
func easyjsonA683d928DecodeGithubComKlauspostCompressArena1(in *jlexer.Lexer, out *SimEventPacingArguments) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time_stamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TimeStamp).UnmarshalJSON(data))
			}
		case "measured_current":
			out.MeasuredCurrent = int32(in.Int32())
		case "capture":
			out.Capture = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA683d928EncodeGithubComKlauspostCompressArena1(out *jwriter.Writer, in SimEventPacingArguments) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"time_stamp\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((in.TimeStamp).MarshalJSON())
	}
	if in.MeasuredCurrent != 0 {
		const prefix string = ",\"measured_current\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.MeasuredCurrent))
	}
	if in.Capture {
		const prefix string = ",\"capture\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Capture))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SimEventPacingArguments) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA683d928EncodeGithubComKlauspostCompressArena1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SimEventPacingArguments) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA683d928EncodeGithubComKlauspostCompressArena1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SimEventPacingArguments) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA683d928DecodeGithubComKlauspostCompressArena1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SimEventPacingArguments) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA683d928DecodeGithubComKlauspostCompressArena1(l, v)
}
