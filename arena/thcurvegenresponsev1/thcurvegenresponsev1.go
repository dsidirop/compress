// Code generated by Thrift Compiler (0.16.0). DO NOT EDIT.

package thcurvegenresponsev1

import (
	"bytes"
	"context"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

// Attributes:
//  - ClientId
//  - Spec
//  - Lead1
//  - Lead2
//  - Lead3
//  - Lead4
//  - Lead5
//  - Lead6
//  - Lead7
//  - Lead8
//  - Lead9
//  - Lead10
//  - Lead11
//  - Lead12
//  - Abp
//  - Cvp
//  - Pap
//  - Spo2
//  - Wp
//  - Tags
type THCurveGenReplyV1 struct {
  ClientId string `thrift:"ClientId,1" db:"ClientId" json:"ClientId"`
  Spec *THCurveSpecificationV1 `thrift:"Spec,2" db:"Spec" json:"Spec"`
  Lead1 []int64 `thrift:"Lead1,3" db:"Lead1" json:"Lead1"`
  Lead2 []int64 `thrift:"Lead2,4" db:"Lead2" json:"Lead2"`
  Lead3 []int64 `thrift:"Lead3,5" db:"Lead3" json:"Lead3"`
  Lead4 []int64 `thrift:"Lead4,6" db:"Lead4" json:"Lead4"`
  Lead5 []int64 `thrift:"Lead5,7" db:"Lead5" json:"Lead5"`
  Lead6 []int64 `thrift:"Lead6,8" db:"Lead6" json:"Lead6"`
  Lead7 []int64 `thrift:"Lead7,9" db:"Lead7" json:"Lead7"`
  Lead8 []int64 `thrift:"Lead8,10" db:"Lead8" json:"Lead8"`
  Lead9 []int64 `thrift:"Lead9,11" db:"Lead9" json:"Lead9"`
  Lead10 []int64 `thrift:"Lead10,12" db:"Lead10" json:"Lead10"`
  Lead11 []int64 `thrift:"Lead11,13" db:"Lead11" json:"Lead11"`
  Lead12 []int64 `thrift:"Lead12,14" db:"Lead12" json:"Lead12"`
  Abp []int64 `thrift:"Abp,15" db:"Abp" json:"Abp"`
  Cvp []int64 `thrift:"Cvp,16" db:"Cvp" json:"Cvp"`
  Pap []int64 `thrift:"Pap,17" db:"Pap" json:"Pap"`
  Spo2 []int64 `thrift:"Spo2,18" db:"Spo2" json:"Spo2"`
  Wp []int64 `thrift:"Wp,19" db:"Wp" json:"Wp"`
  Tags []*THTag `thrift:"Tags,20" db:"Tags" json:"Tags"`
}

func NewTHCurveGenReplyV1() *THCurveGenReplyV1 {
  return &THCurveGenReplyV1{}
}


func (p *THCurveGenReplyV1) GetClientId() string {
  return p.ClientId
}
var THCurveGenReplyV1_Spec_DEFAULT *THCurveSpecificationV1
func (p *THCurveGenReplyV1) GetSpec() *THCurveSpecificationV1 {
  if !p.IsSetSpec() {
    return THCurveGenReplyV1_Spec_DEFAULT
  }
return p.Spec
}

func (p *THCurveGenReplyV1) GetLead1() []int64 {
  return p.Lead1
}

func (p *THCurveGenReplyV1) GetLead2() []int64 {
  return p.Lead2
}

func (p *THCurveGenReplyV1) GetLead3() []int64 {
  return p.Lead3
}

func (p *THCurveGenReplyV1) GetLead4() []int64 {
  return p.Lead4
}

func (p *THCurveGenReplyV1) GetLead5() []int64 {
  return p.Lead5
}

func (p *THCurveGenReplyV1) GetLead6() []int64 {
  return p.Lead6
}

func (p *THCurveGenReplyV1) GetLead7() []int64 {
  return p.Lead7
}

func (p *THCurveGenReplyV1) GetLead8() []int64 {
  return p.Lead8
}

func (p *THCurveGenReplyV1) GetLead9() []int64 {
  return p.Lead9
}

func (p *THCurveGenReplyV1) GetLead10() []int64 {
  return p.Lead10
}

func (p *THCurveGenReplyV1) GetLead11() []int64 {
  return p.Lead11
}

func (p *THCurveGenReplyV1) GetLead12() []int64 {
  return p.Lead12
}

func (p *THCurveGenReplyV1) GetAbp() []int64 {
  return p.Abp
}

func (p *THCurveGenReplyV1) GetCvp() []int64 {
  return p.Cvp
}

func (p *THCurveGenReplyV1) GetPap() []int64 {
  return p.Pap
}

func (p *THCurveGenReplyV1) GetSpo2() []int64 {
  return p.Spo2
}

func (p *THCurveGenReplyV1) GetWp() []int64 {
  return p.Wp
}

func (p *THCurveGenReplyV1) GetTags() []*THTag {
  return p.Tags
}
func (p *THCurveGenReplyV1) IsSetSpec() bool {
  return p.Spec != nil
}

func (p *THCurveGenReplyV1) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField16(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField17(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField18(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField19(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *THCurveGenReplyV1)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ClientId = v
}
  return nil
}

func (p *THCurveGenReplyV1)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Spec = &THCurveSpecificationV1{}
  if err := p.Spec.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Spec), err)
  }
  return nil
}

func (p *THCurveGenReplyV1)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Lead1 =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.Lead1 = append(p.Lead1, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *THCurveGenReplyV1)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Lead2 =  tSlice
  for i := 0; i < size; i ++ {
var _elem1 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem1 = v
}
    p.Lead2 = append(p.Lead2, _elem1)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *THCurveGenReplyV1)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Lead3 =  tSlice
  for i := 0; i < size; i ++ {
var _elem2 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem2 = v
}
    p.Lead3 = append(p.Lead3, _elem2)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *THCurveGenReplyV1)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Lead4 =  tSlice
  for i := 0; i < size; i ++ {
var _elem3 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem3 = v
}
    p.Lead4 = append(p.Lead4, _elem3)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *THCurveGenReplyV1)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Lead5 =  tSlice
  for i := 0; i < size; i ++ {
var _elem4 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem4 = v
}
    p.Lead5 = append(p.Lead5, _elem4)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *THCurveGenReplyV1)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Lead6 =  tSlice
  for i := 0; i < size; i ++ {
var _elem5 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem5 = v
}
    p.Lead6 = append(p.Lead6, _elem5)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *THCurveGenReplyV1)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Lead7 =  tSlice
  for i := 0; i < size; i ++ {
var _elem6 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem6 = v
}
    p.Lead7 = append(p.Lead7, _elem6)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *THCurveGenReplyV1)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Lead8 =  tSlice
  for i := 0; i < size; i ++ {
var _elem7 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem7 = v
}
    p.Lead8 = append(p.Lead8, _elem7)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *THCurveGenReplyV1)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Lead9 =  tSlice
  for i := 0; i < size; i ++ {
var _elem8 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem8 = v
}
    p.Lead9 = append(p.Lead9, _elem8)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *THCurveGenReplyV1)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Lead10 =  tSlice
  for i := 0; i < size; i ++ {
var _elem9 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem9 = v
}
    p.Lead10 = append(p.Lead10, _elem9)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *THCurveGenReplyV1)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Lead11 =  tSlice
  for i := 0; i < size; i ++ {
var _elem10 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem10 = v
}
    p.Lead11 = append(p.Lead11, _elem10)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *THCurveGenReplyV1)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Lead12 =  tSlice
  for i := 0; i < size; i ++ {
var _elem11 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem11 = v
}
    p.Lead12 = append(p.Lead12, _elem11)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *THCurveGenReplyV1)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Abp =  tSlice
  for i := 0; i < size; i ++ {
var _elem12 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem12 = v
}
    p.Abp = append(p.Abp, _elem12)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *THCurveGenReplyV1)  ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Cvp =  tSlice
  for i := 0; i < size; i ++ {
var _elem13 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem13 = v
}
    p.Cvp = append(p.Cvp, _elem13)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *THCurveGenReplyV1)  ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Pap =  tSlice
  for i := 0; i < size; i ++ {
var _elem14 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem14 = v
}
    p.Pap = append(p.Pap, _elem14)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *THCurveGenReplyV1)  ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Spo2 =  tSlice
  for i := 0; i < size; i ++ {
var _elem15 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem15 = v
}
    p.Spo2 = append(p.Spo2, _elem15)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *THCurveGenReplyV1)  ReadField19(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Wp =  tSlice
  for i := 0; i < size; i ++ {
var _elem16 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem16 = v
}
    p.Wp = append(p.Wp, _elem16)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *THCurveGenReplyV1)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*THTag, 0, size)
  p.Tags =  tSlice
  for i := 0; i < size; i ++ {
    _elem17 := &THTag{}
    if err := _elem17.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem17), err)
    }
    p.Tags = append(p.Tags, _elem17)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *THCurveGenReplyV1) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "THCurveGenReplyV1"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField16(ctx, oprot); err != nil { return err }
    if err := p.writeField17(ctx, oprot); err != nil { return err }
    if err := p.writeField18(ctx, oprot); err != nil { return err }
    if err := p.writeField19(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THCurveGenReplyV1) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ClientId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ClientId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ClientId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ClientId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ClientId: ", p), err) }
  return err
}

func (p *THCurveGenReplyV1) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "Spec", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Spec: ", p), err) }
  if err := p.Spec.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Spec), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Spec: ", p), err) }
  return err
}

func (p *THCurveGenReplyV1) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "Lead1", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Lead1: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.Lead1)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Lead1 {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Lead1: ", p), err) }
  return err
}

func (p *THCurveGenReplyV1) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "Lead2", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Lead2: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.Lead2)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Lead2 {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Lead2: ", p), err) }
  return err
}

func (p *THCurveGenReplyV1) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "Lead3", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Lead3: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.Lead3)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Lead3 {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Lead3: ", p), err) }
  return err
}

func (p *THCurveGenReplyV1) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "Lead4", thrift.LIST, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:Lead4: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.Lead4)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Lead4 {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:Lead4: ", p), err) }
  return err
}

func (p *THCurveGenReplyV1) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "Lead5", thrift.LIST, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:Lead5: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.Lead5)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Lead5 {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:Lead5: ", p), err) }
  return err
}

func (p *THCurveGenReplyV1) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "Lead6", thrift.LIST, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:Lead6: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.Lead6)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Lead6 {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:Lead6: ", p), err) }
  return err
}

func (p *THCurveGenReplyV1) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "Lead7", thrift.LIST, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:Lead7: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.Lead7)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Lead7 {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:Lead7: ", p), err) }
  return err
}

func (p *THCurveGenReplyV1) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "Lead8", thrift.LIST, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:Lead8: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.Lead8)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Lead8 {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:Lead8: ", p), err) }
  return err
}

func (p *THCurveGenReplyV1) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "Lead9", thrift.LIST, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:Lead9: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.Lead9)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Lead9 {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:Lead9: ", p), err) }
  return err
}

func (p *THCurveGenReplyV1) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "Lead10", thrift.LIST, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:Lead10: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.Lead10)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Lead10 {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:Lead10: ", p), err) }
  return err
}

func (p *THCurveGenReplyV1) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "Lead11", thrift.LIST, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:Lead11: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.Lead11)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Lead11 {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:Lead11: ", p), err) }
  return err
}

func (p *THCurveGenReplyV1) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "Lead12", thrift.LIST, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:Lead12: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.Lead12)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Lead12 {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:Lead12: ", p), err) }
  return err
}

func (p *THCurveGenReplyV1) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "Abp", thrift.LIST, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:Abp: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.Abp)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Abp {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:Abp: ", p), err) }
  return err
}

func (p *THCurveGenReplyV1) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "Cvp", thrift.LIST, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:Cvp: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.Cvp)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Cvp {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:Cvp: ", p), err) }
  return err
}

func (p *THCurveGenReplyV1) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "Pap", thrift.LIST, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:Pap: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.Pap)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Pap {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:Pap: ", p), err) }
  return err
}

func (p *THCurveGenReplyV1) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "Spo2", thrift.LIST, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:Spo2: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.Spo2)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Spo2 {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:Spo2: ", p), err) }
  return err
}

func (p *THCurveGenReplyV1) writeField19(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "Wp", thrift.LIST, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:Wp: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.Wp)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Wp {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:Wp: ", p), err) }
  return err
}

func (p *THCurveGenReplyV1) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "Tags", thrift.LIST, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:Tags: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Tags)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Tags {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:Tags: ", p), err) }
  return err
}

func (p *THCurveGenReplyV1) Equals(other *THCurveGenReplyV1) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ClientId != other.ClientId { return false }
  if !p.Spec.Equals(other.Spec) { return false }
  if len(p.Lead1) != len(other.Lead1) { return false }
  for i, _tgt := range p.Lead1 {
    _src18 := other.Lead1[i]
    if _tgt != _src18 { return false }
  }
  if len(p.Lead2) != len(other.Lead2) { return false }
  for i, _tgt := range p.Lead2 {
    _src19 := other.Lead2[i]
    if _tgt != _src19 { return false }
  }
  if len(p.Lead3) != len(other.Lead3) { return false }
  for i, _tgt := range p.Lead3 {
    _src20 := other.Lead3[i]
    if _tgt != _src20 { return false }
  }
  if len(p.Lead4) != len(other.Lead4) { return false }
  for i, _tgt := range p.Lead4 {
    _src21 := other.Lead4[i]
    if _tgt != _src21 { return false }
  }
  if len(p.Lead5) != len(other.Lead5) { return false }
  for i, _tgt := range p.Lead5 {
    _src22 := other.Lead5[i]
    if _tgt != _src22 { return false }
  }
  if len(p.Lead6) != len(other.Lead6) { return false }
  for i, _tgt := range p.Lead6 {
    _src23 := other.Lead6[i]
    if _tgt != _src23 { return false }
  }
  if len(p.Lead7) != len(other.Lead7) { return false }
  for i, _tgt := range p.Lead7 {
    _src24 := other.Lead7[i]
    if _tgt != _src24 { return false }
  }
  if len(p.Lead8) != len(other.Lead8) { return false }
  for i, _tgt := range p.Lead8 {
    _src25 := other.Lead8[i]
    if _tgt != _src25 { return false }
  }
  if len(p.Lead9) != len(other.Lead9) { return false }
  for i, _tgt := range p.Lead9 {
    _src26 := other.Lead9[i]
    if _tgt != _src26 { return false }
  }
  if len(p.Lead10) != len(other.Lead10) { return false }
  for i, _tgt := range p.Lead10 {
    _src27 := other.Lead10[i]
    if _tgt != _src27 { return false }
  }
  if len(p.Lead11) != len(other.Lead11) { return false }
  for i, _tgt := range p.Lead11 {
    _src28 := other.Lead11[i]
    if _tgt != _src28 { return false }
  }
  if len(p.Lead12) != len(other.Lead12) { return false }
  for i, _tgt := range p.Lead12 {
    _src29 := other.Lead12[i]
    if _tgt != _src29 { return false }
  }
  if len(p.Abp) != len(other.Abp) { return false }
  for i, _tgt := range p.Abp {
    _src30 := other.Abp[i]
    if _tgt != _src30 { return false }
  }
  if len(p.Cvp) != len(other.Cvp) { return false }
  for i, _tgt := range p.Cvp {
    _src31 := other.Cvp[i]
    if _tgt != _src31 { return false }
  }
  if len(p.Pap) != len(other.Pap) { return false }
  for i, _tgt := range p.Pap {
    _src32 := other.Pap[i]
    if _tgt != _src32 { return false }
  }
  if len(p.Spo2) != len(other.Spo2) { return false }
  for i, _tgt := range p.Spo2 {
    _src33 := other.Spo2[i]
    if _tgt != _src33 { return false }
  }
  if len(p.Wp) != len(other.Wp) { return false }
  for i, _tgt := range p.Wp {
    _src34 := other.Wp[i]
    if _tgt != _src34 { return false }
  }
  if len(p.Tags) != len(other.Tags) { return false }
  for i, _tgt := range p.Tags {
    _src35 := other.Tags[i]
    if !_tgt.Equals(_src35) { return false }
  }
  return true
}

func (p *THCurveGenReplyV1) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THCurveGenReplyV1(%+v)", *p)
}

// Attributes:
//  - SimulatorName
//  - Tenant
//  - StartTime
//  - EndTime
//  - SampleInterval
//  - CurveTypes
type THCurveSpecificationV1 struct {
  SimulatorName string `thrift:"SimulatorName,1" db:"SimulatorName" json:"SimulatorName"`
  Tenant string `thrift:"Tenant,2" db:"Tenant" json:"Tenant"`
  StartTime int64 `thrift:"StartTime,3" db:"StartTime" json:"StartTime"`
  EndTime int64 `thrift:"EndTime,4" db:"EndTime" json:"EndTime"`
  SampleInterval int64 `thrift:"SampleInterval,5" db:"SampleInterval" json:"SampleInterval"`
  CurveTypes int64 `thrift:"CurveTypes,6" db:"CurveTypes" json:"CurveTypes"`
}

func NewTHCurveSpecificationV1() *THCurveSpecificationV1 {
  return &THCurveSpecificationV1{}
}


func (p *THCurveSpecificationV1) GetSimulatorName() string {
  return p.SimulatorName
}

func (p *THCurveSpecificationV1) GetTenant() string {
  return p.Tenant
}

func (p *THCurveSpecificationV1) GetStartTime() int64 {
  return p.StartTime
}

func (p *THCurveSpecificationV1) GetEndTime() int64 {
  return p.EndTime
}

func (p *THCurveSpecificationV1) GetSampleInterval() int64 {
  return p.SampleInterval
}

func (p *THCurveSpecificationV1) GetCurveTypes() int64 {
  return p.CurveTypes
}
func (p *THCurveSpecificationV1) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *THCurveSpecificationV1)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SimulatorName = v
}
  return nil
}

func (p *THCurveSpecificationV1)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Tenant = v
}
  return nil
}

func (p *THCurveSpecificationV1)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *THCurveSpecificationV1)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.EndTime = v
}
  return nil
}

func (p *THCurveSpecificationV1)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.SampleInterval = v
}
  return nil
}

func (p *THCurveSpecificationV1)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.CurveTypes = v
}
  return nil
}

func (p *THCurveSpecificationV1) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "THCurveSpecificationV1"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THCurveSpecificationV1) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "SimulatorName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:SimulatorName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SimulatorName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.SimulatorName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:SimulatorName: ", p), err) }
  return err
}

func (p *THCurveSpecificationV1) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "Tenant", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Tenant: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Tenant)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Tenant (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Tenant: ", p), err) }
  return err
}

func (p *THCurveSpecificationV1) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "StartTime", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:StartTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.StartTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:StartTime: ", p), err) }
  return err
}

func (p *THCurveSpecificationV1) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "EndTime", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:EndTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.EndTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.EndTime (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:EndTime: ", p), err) }
  return err
}

func (p *THCurveSpecificationV1) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "SampleInterval", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:SampleInterval: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.SampleInterval)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.SampleInterval (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:SampleInterval: ", p), err) }
  return err
}

func (p *THCurveSpecificationV1) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "CurveTypes", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:CurveTypes: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CurveTypes)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.CurveTypes (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:CurveTypes: ", p), err) }
  return err
}

func (p *THCurveSpecificationV1) Equals(other *THCurveSpecificationV1) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SimulatorName != other.SimulatorName { return false }
  if p.Tenant != other.Tenant { return false }
  if p.StartTime != other.StartTime { return false }
  if p.EndTime != other.EndTime { return false }
  if p.SampleInterval != other.SampleInterval { return false }
  if p.CurveTypes != other.CurveTypes { return false }
  return true
}

func (p *THCurveSpecificationV1) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THCurveSpecificationV1(%+v)", *p)
}

// Attributes:
//  - TagTime
//  - TagType
type THTag struct {
  TagTime int64 `thrift:"TagTime,1" db:"TagTime" json:"TagTime"`
  TagType int64 `thrift:"TagType,2" db:"TagType" json:"TagType"`
}

func NewTHTag() *THTag {
  return &THTag{}
}


func (p *THTag) GetTagTime() int64 {
  return p.TagTime
}

func (p *THTag) GetTagType() int64 {
  return p.TagType
}
func (p *THTag) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *THTag)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TagTime = v
}
  return nil
}

func (p *THTag)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TagType = v
}
  return nil
}

func (p *THTag) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "THTag"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THTag) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "TagTime", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:TagTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.TagTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.TagTime (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:TagTime: ", p), err) }
  return err
}

func (p *THTag) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "TagType", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:TagType: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.TagType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.TagType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:TagType: ", p), err) }
  return err
}

func (p *THTag) Equals(other *THTag) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.TagTime != other.TagTime { return false }
  if p.TagType != other.TagType { return false }
  return true
}

func (p *THTag) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THTag(%+v)", *p)
}

