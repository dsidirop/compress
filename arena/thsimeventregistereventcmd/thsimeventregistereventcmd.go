// Code generated by Thrift Compiler (0.16.0). DO NOT EDIT.

package thsimeventregistereventcmd

import (
	"bytes"
	"context"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

type Timestamp string

func TimestampPtr(v Timestamp) *Timestamp { return &v }

// Attributes:
//  - ApiVersion
//  - SimulatorName
//  - Tenant
//  - EventID
//  - TimeStamp
//  - Arguments
type THSimEventRegisterEventCmd struct {
  ApiVersion string `thrift:"ApiVersion,1" db:"ApiVersion" json:"ApiVersion"`
  SimulatorName string `thrift:"SimulatorName,2" db:"SimulatorName" json:"SimulatorName"`
  Tenant string `thrift:"Tenant,3" db:"Tenant" json:"Tenant"`
  EventID string `thrift:"EventID,4" db:"EventID" json:"EventID"`
  TimeStamp Timestamp `thrift:"TimeStamp,5" db:"TimeStamp" json:"TimeStamp"`
  Arguments *THSimEventArguments `thrift:"Arguments,6" db:"Arguments" json:"Arguments,omitempty"`
}

func NewTHSimEventRegisterEventCmd() *THSimEventRegisterEventCmd {
  return &THSimEventRegisterEventCmd{}
}


func (p *THSimEventRegisterEventCmd) GetApiVersion() string {
  return p.ApiVersion
}

func (p *THSimEventRegisterEventCmd) GetSimulatorName() string {
  return p.SimulatorName
}

func (p *THSimEventRegisterEventCmd) GetTenant() string {
  return p.Tenant
}

func (p *THSimEventRegisterEventCmd) GetEventID() string {
  return p.EventID
}

func (p *THSimEventRegisterEventCmd) GetTimeStamp() Timestamp {
  return p.TimeStamp
}
var THSimEventRegisterEventCmd_Arguments_DEFAULT *THSimEventArguments
func (p *THSimEventRegisterEventCmd) GetArguments() *THSimEventArguments {
  if !p.IsSetArguments() {
    return THSimEventRegisterEventCmd_Arguments_DEFAULT
  }
return p.Arguments
}
func (p *THSimEventRegisterEventCmd) IsSetArguments() bool {
  return p.Arguments != nil
}

func (p *THSimEventRegisterEventCmd) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *THSimEventRegisterEventCmd)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ApiVersion = v
}
  return nil
}

func (p *THSimEventRegisterEventCmd)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SimulatorName = v
}
  return nil
}

func (p *THSimEventRegisterEventCmd)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Tenant = v
}
  return nil
}

func (p *THSimEventRegisterEventCmd)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.EventID = v
}
  return nil
}

func (p *THSimEventRegisterEventCmd)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := Timestamp(v)
  p.TimeStamp = temp
}
  return nil
}

func (p *THSimEventRegisterEventCmd)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  p.Arguments = &THSimEventArguments{}
  if err := p.Arguments.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Arguments), err)
  }
  return nil
}

func (p *THSimEventRegisterEventCmd) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "THSimEventRegisterEventCmd"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THSimEventRegisterEventCmd) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ApiVersion", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ApiVersion: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ApiVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ApiVersion (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ApiVersion: ", p), err) }
  return err
}

func (p *THSimEventRegisterEventCmd) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "SimulatorName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:SimulatorName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SimulatorName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.SimulatorName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:SimulatorName: ", p), err) }
  return err
}

func (p *THSimEventRegisterEventCmd) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "Tenant", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Tenant: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Tenant)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Tenant (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Tenant: ", p), err) }
  return err
}

func (p *THSimEventRegisterEventCmd) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "EventID", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:EventID: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.EventID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.EventID (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:EventID: ", p), err) }
  return err
}

func (p *THSimEventRegisterEventCmd) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "TimeStamp", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:TimeStamp: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TimeStamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.TimeStamp (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:TimeStamp: ", p), err) }
  return err
}

func (p *THSimEventRegisterEventCmd) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetArguments() {
    if err := oprot.WriteFieldBegin(ctx, "Arguments", thrift.STRUCT, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:Arguments: ", p), err) }
    if err := p.Arguments.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Arguments), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:Arguments: ", p), err) }
  }
  return err
}

func (p *THSimEventRegisterEventCmd) Equals(other *THSimEventRegisterEventCmd) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ApiVersion != other.ApiVersion { return false }
  if p.SimulatorName != other.SimulatorName { return false }
  if p.Tenant != other.Tenant { return false }
  if p.EventID != other.EventID { return false }
  if p.TimeStamp != other.TimeStamp { return false }
  if !p.Arguments.Equals(other.Arguments) { return false }
  return true
}

func (p *THSimEventRegisterEventCmd) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THSimEventRegisterEventCmd(%+v)", *p)
}

// Attributes:
//  - PacingArguments
type THSimEventArguments struct {
  PacingArguments *THPacingArguments `thrift:"PacingArguments,1" db:"PacingArguments" json:"PacingArguments,omitempty"`
}

func NewTHSimEventArguments() *THSimEventArguments {
  return &THSimEventArguments{}
}

var THSimEventArguments_PacingArguments_DEFAULT *THPacingArguments
func (p *THSimEventArguments) GetPacingArguments() *THPacingArguments {
  if !p.IsSetPacingArguments() {
    return THSimEventArguments_PacingArguments_DEFAULT
  }
return p.PacingArguments
}
func (p *THSimEventArguments) CountSetFieldsTHSimEventArguments() int {
  count := 0
  if (p.IsSetPacingArguments()) {
    count++
  }
  return count

}

func (p *THSimEventArguments) IsSetPacingArguments() bool {
  return p.PacingArguments != nil
}

func (p *THSimEventArguments) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *THSimEventArguments)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.PacingArguments = &THPacingArguments{}
  if err := p.PacingArguments.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PacingArguments), err)
  }
  return nil
}

func (p *THSimEventArguments) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if c := p.CountSetFieldsTHSimEventArguments(); c != 1 {
    return fmt.Errorf("%T write union: exactly one field must be set (%d set)", p, c)
  }
  if err := oprot.WriteStructBegin(ctx, "THSimEventArguments"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THSimEventArguments) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPacingArguments() {
    if err := oprot.WriteFieldBegin(ctx, "PacingArguments", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:PacingArguments: ", p), err) }
    if err := p.PacingArguments.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PacingArguments), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:PacingArguments: ", p), err) }
  }
  return err
}

func (p *THSimEventArguments) Equals(other *THSimEventArguments) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.PacingArguments.Equals(other.PacingArguments) { return false }
  return true
}

func (p *THSimEventArguments) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THSimEventArguments(%+v)", *p)
}

// Attributes:
//  - TimeStamp
//  - MeasuredCurrent
//  - Capture
type THPacingArguments struct {
  TimeStamp Timestamp `thrift:"TimeStamp,1" db:"TimeStamp" json:"TimeStamp"`
  MeasuredCurrent int32 `thrift:"MeasuredCurrent,2" db:"MeasuredCurrent" json:"MeasuredCurrent"`
  Capture bool `thrift:"Capture,3" db:"Capture" json:"Capture"`
}

func NewTHPacingArguments() *THPacingArguments {
  return &THPacingArguments{}
}


func (p *THPacingArguments) GetTimeStamp() Timestamp {
  return p.TimeStamp
}

func (p *THPacingArguments) GetMeasuredCurrent() int32 {
  return p.MeasuredCurrent
}

func (p *THPacingArguments) GetCapture() bool {
  return p.Capture
}
func (p *THPacingArguments) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *THPacingArguments)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Timestamp(v)
  p.TimeStamp = temp
}
  return nil
}

func (p *THPacingArguments)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MeasuredCurrent = v
}
  return nil
}

func (p *THPacingArguments)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Capture = v
}
  return nil
}

func (p *THPacingArguments) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "THPacingArguments"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THPacingArguments) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "TimeStamp", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:TimeStamp: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TimeStamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.TimeStamp (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:TimeStamp: ", p), err) }
  return err
}

func (p *THPacingArguments) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "MeasuredCurrent", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:MeasuredCurrent: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MeasuredCurrent)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.MeasuredCurrent (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:MeasuredCurrent: ", p), err) }
  return err
}

func (p *THPacingArguments) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "Capture", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Capture: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Capture)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Capture (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Capture: ", p), err) }
  return err
}

func (p *THPacingArguments) Equals(other *THPacingArguments) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.TimeStamp != other.TimeStamp { return false }
  if p.MeasuredCurrent != other.MeasuredCurrent { return false }
  if p.Capture != other.Capture { return false }
  return true
}

func (p *THPacingArguments) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THPacingArguments(%+v)", *p)
}

