// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package arena

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson5302faa3DecodeGithubComKlauspostCompressArena(in *jlexer.Lexer, out *FooProfile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "dob":
			out.Dob = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "about":
			out.About = string(in.String())
		case "address":
			out.Address = string(in.String())
		case "company":
			out.Company = string(in.String())
		case "location":
			(out.Location).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5302faa3EncodeGithubComKlauspostCompressArena(out *jwriter.Writer, in FooProfile) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"dob\":"
		out.RawString(prefix[1:])
		out.String(string(in.Dob))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"about\":"
		out.RawString(prefix)
		out.String(string(in.About))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"company\":"
		out.RawString(prefix)
		out.String(string(in.Company))
	}
	{
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		(in.Location).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FooProfile) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5302faa3EncodeGithubComKlauspostCompressArena(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FooProfile) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5302faa3EncodeGithubComKlauspostCompressArena(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FooProfile) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5302faa3DecodeGithubComKlauspostCompressArena(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FooProfile) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5302faa3DecodeGithubComKlauspostCompressArena(l, v)
}
func easyjson5302faa3DecodeGithubComKlauspostCompressArena1(in *jlexer.Lexer, out *FooLocation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "lat":
			out.Lat = float64(in.Float64())
		case "long":
			out.Long = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5302faa3EncodeGithubComKlauspostCompressArena1(out *jwriter.Writer, in FooLocation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"lat\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.Lat))
	}
	{
		const prefix string = ",\"long\":"
		out.RawString(prefix)
		out.Float64(float64(in.Long))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FooLocation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5302faa3EncodeGithubComKlauspostCompressArena1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FooLocation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5302faa3EncodeGithubComKlauspostCompressArena1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FooLocation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5302faa3DecodeGithubComKlauspostCompressArena1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FooLocation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5302faa3DecodeGithubComKlauspostCompressArena1(l, v)
}
func easyjson5302faa3DecodeGithubComKlauspostCompressArena2(in *jlexer.Lexer, out *FooItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "roles":
			if in.IsNull() {
				in.Skip()
				out.Roles = nil
			} else {
				in.Delim('[')
				if out.Roles == nil {
					if !in.IsDelim(']') {
						out.Roles = make([]string, 0, 4)
					} else {
						out.Roles = []string{}
					}
				} else {
					out.Roles = (out.Roles)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Roles = append(out.Roles, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "apiKey":
			out.APIKey = string(in.String())
		case "profile":
			(out.Profile).UnmarshalEasyJSON(in)
		case "username":
			out.Username = string(in.String())
		case "createdAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5302faa3EncodeGithubComKlauspostCompressArena2(out *jwriter.Writer, in FooItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"roles\":"
		out.RawString(prefix)
		if in.Roles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Roles {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"apiKey\":"
		out.RawString(prefix)
		out.String(string(in.APIKey))
	}
	{
		const prefix string = ",\"profile\":"
		out.RawString(prefix)
		(in.Profile).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"createdAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FooItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5302faa3EncodeGithubComKlauspostCompressArena2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FooItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5302faa3EncodeGithubComKlauspostCompressArena2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FooItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5302faa3DecodeGithubComKlauspostCompressArena2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FooItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5302faa3DecodeGithubComKlauspostCompressArena2(l, v)
}
