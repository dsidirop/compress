// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: pbvitalstemplate.proto

package arena

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PBVitalsTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec *PBVitalsTemplateSpec `protobuf:"bytes,1,opt,name=Spec,proto3" json:"Spec,omitempty"`
}

func (x *PBVitalsTemplate) Reset() {
	*x = PBVitalsTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbvitalstemplate_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBVitalsTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBVitalsTemplate) ProtoMessage() {}

func (x *PBVitalsTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_pbvitalstemplate_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBVitalsTemplate.ProtoReflect.Descriptor instead.
func (*PBVitalsTemplate) Descriptor() ([]byte, []int) {
	return file_pbvitalstemplate_proto_rawDescGZIP(), []int{0}
}

func (x *PBVitalsTemplate) GetSpec() *PBVitalsTemplateSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type PBVitalsTemplateSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RespiratoryRate       *int64               `protobuf:"varint,1,opt,name=RespiratoryRate,proto3,oneof" json:"RespiratoryRate,omitempty"`
	SpO2                  *int64               `protobuf:"varint,2,opt,name=SpO2,proto3,oneof" json:"SpO2,omitempty"`
	BloodPressure         *PBBloodPressure     `protobuf:"bytes,3,opt,name=BloodPressure,proto3,oneof" json:"BloodPressure,omitempty"`
	EtCO2                 *int64               `protobuf:"varint,4,opt,name=EtCO2,proto3,oneof" json:"EtCO2,omitempty"`
	TemperatureBlood      *float64             `protobuf:"fixed64,5,opt,name=TemperatureBlood,proto3,oneof" json:"TemperatureBlood,omitempty"`
	TemperaturePeripheral *float64             `protobuf:"fixed64,6,opt,name=TemperaturePeripheral,proto3,oneof" json:"TemperaturePeripheral,omitempty"`
	Ecg                   *PBEcg               `protobuf:"bytes,7,opt,name=Ecg,proto3,oneof" json:"Ecg,omitempty"`
	Eyes                  *PBEyes              `protobuf:"bytes,8,opt,name=Eyes,proto3,oneof" json:"Eyes,omitempty"`
	AirwayObstruction     *PBAirwayObstruction `protobuf:"bytes,9,opt,name=AirwayObstruction,proto3,oneof" json:"AirwayObstruction,omitempty"`
	LungSounds            *PBLungSounds        `protobuf:"bytes,10,opt,name=LungSounds,proto3,oneof" json:"LungSounds,omitempty"`
	HeartSounds           *PBHeartSounds       `protobuf:"bytes,11,opt,name=HeartSounds,proto3,oneof" json:"HeartSounds,omitempty"`
	BowelSounds           *PBBowelSounds       `protobuf:"bytes,12,opt,name=BowelSounds,proto3,oneof" json:"BowelSounds,omitempty"`
	Pulses                *PBPulses            `protobuf:"bytes,13,opt,name=Pulses,proto3,oneof" json:"Pulses,omitempty"`
}

func (x *PBVitalsTemplateSpec) Reset() {
	*x = PBVitalsTemplateSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbvitalstemplate_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBVitalsTemplateSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBVitalsTemplateSpec) ProtoMessage() {}

func (x *PBVitalsTemplateSpec) ProtoReflect() protoreflect.Message {
	mi := &file_pbvitalstemplate_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBVitalsTemplateSpec.ProtoReflect.Descriptor instead.
func (*PBVitalsTemplateSpec) Descriptor() ([]byte, []int) {
	return file_pbvitalstemplate_proto_rawDescGZIP(), []int{1}
}

func (x *PBVitalsTemplateSpec) GetRespiratoryRate() int64 {
	if x != nil && x.RespiratoryRate != nil {
		return *x.RespiratoryRate
	}
	return 0
}

func (x *PBVitalsTemplateSpec) GetSpO2() int64 {
	if x != nil && x.SpO2 != nil {
		return *x.SpO2
	}
	return 0
}

func (x *PBVitalsTemplateSpec) GetBloodPressure() *PBBloodPressure {
	if x != nil {
		return x.BloodPressure
	}
	return nil
}

func (x *PBVitalsTemplateSpec) GetEtCO2() int64 {
	if x != nil && x.EtCO2 != nil {
		return *x.EtCO2
	}
	return 0
}

func (x *PBVitalsTemplateSpec) GetTemperatureBlood() float64 {
	if x != nil && x.TemperatureBlood != nil {
		return *x.TemperatureBlood
	}
	return 0
}

func (x *PBVitalsTemplateSpec) GetTemperaturePeripheral() float64 {
	if x != nil && x.TemperaturePeripheral != nil {
		return *x.TemperaturePeripheral
	}
	return 0
}

func (x *PBVitalsTemplateSpec) GetEcg() *PBEcg {
	if x != nil {
		return x.Ecg
	}
	return nil
}

func (x *PBVitalsTemplateSpec) GetEyes() *PBEyes {
	if x != nil {
		return x.Eyes
	}
	return nil
}

func (x *PBVitalsTemplateSpec) GetAirwayObstruction() *PBAirwayObstruction {
	if x != nil {
		return x.AirwayObstruction
	}
	return nil
}

func (x *PBVitalsTemplateSpec) GetLungSounds() *PBLungSounds {
	if x != nil {
		return x.LungSounds
	}
	return nil
}

func (x *PBVitalsTemplateSpec) GetHeartSounds() *PBHeartSounds {
	if x != nil {
		return x.HeartSounds
	}
	return nil
}

func (x *PBVitalsTemplateSpec) GetBowelSounds() *PBBowelSounds {
	if x != nil {
		return x.BowelSounds
	}
	return nil
}

func (x *PBVitalsTemplateSpec) GetPulses() *PBPulses {
	if x != nil {
		return x.Pulses
	}
	return nil
}

type PBBloodPressure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Systolic  *int64 `protobuf:"varint,1,opt,name=Systolic,proto3,oneof" json:"Systolic,omitempty"`
	Diastolic *int64 `protobuf:"varint,2,opt,name=Diastolic,proto3,oneof" json:"Diastolic,omitempty"`
}

func (x *PBBloodPressure) Reset() {
	*x = PBBloodPressure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbvitalstemplate_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBBloodPressure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBBloodPressure) ProtoMessage() {}

func (x *PBBloodPressure) ProtoReflect() protoreflect.Message {
	mi := &file_pbvitalstemplate_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBBloodPressure.ProtoReflect.Descriptor instead.
func (*PBBloodPressure) Descriptor() ([]byte, []int) {
	return file_pbvitalstemplate_proto_rawDescGZIP(), []int{2}
}

func (x *PBBloodPressure) GetSystolic() int64 {
	if x != nil && x.Systolic != nil {
		return *x.Systolic
	}
	return 0
}

func (x *PBBloodPressure) GetDiastolic() int64 {
	if x != nil && x.Diastolic != nil {
		return *x.Diastolic
	}
	return 0
}

type PBEcg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeartRate    *int64          `protobuf:"varint,1,opt,name=HeartRate,proto3,oneof" json:"HeartRate,omitempty"`
	BasicRhythm  *string         `protobuf:"bytes,2,opt,name=BasicRhythm,proto3,oneof" json:"BasicRhythm,omitempty"`
	Extrasystole *PBExtrasystole `protobuf:"bytes,3,opt,name=Extrasystole,proto3,oneof" json:"Extrasystole,omitempty"`
	Severity     *int64          `protobuf:"varint,4,opt,name=Severity,proto3,oneof" json:"Severity,omitempty"`
	AllowPacing  *bool           `protobuf:"varint,5,opt,name=AllowPacing,proto3,oneof" json:"AllowPacing,omitempty"`
	EmdPea       *bool           `protobuf:"varint,6,opt,name=EmdPea,proto3,oneof" json:"EmdPea,omitempty"`
}

func (x *PBEcg) Reset() {
	*x = PBEcg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbvitalstemplate_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBEcg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBEcg) ProtoMessage() {}

func (x *PBEcg) ProtoReflect() protoreflect.Message {
	mi := &file_pbvitalstemplate_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBEcg.ProtoReflect.Descriptor instead.
func (*PBEcg) Descriptor() ([]byte, []int) {
	return file_pbvitalstemplate_proto_rawDescGZIP(), []int{3}
}

func (x *PBEcg) GetHeartRate() int64 {
	if x != nil && x.HeartRate != nil {
		return *x.HeartRate
	}
	return 0
}

func (x *PBEcg) GetBasicRhythm() string {
	if x != nil && x.BasicRhythm != nil {
		return *x.BasicRhythm
	}
	return ""
}

func (x *PBEcg) GetExtrasystole() *PBExtrasystole {
	if x != nil {
		return x.Extrasystole
	}
	return nil
}

func (x *PBEcg) GetSeverity() int64 {
	if x != nil && x.Severity != nil {
		return *x.Severity
	}
	return 0
}

func (x *PBEcg) GetAllowPacing() bool {
	if x != nil && x.AllowPacing != nil {
		return *x.AllowPacing
	}
	return false
}

func (x *PBEcg) GetEmdPea() bool {
	if x != nil && x.EmdPea != nil {
		return *x.EmdPea
	}
	return false
}

type PBExtrasystole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        *string `protobuf:"bytes,1,opt,name=Type,proto3,oneof" json:"Type,omitempty"`
	Probability *int64  `protobuf:"varint,2,opt,name=Probability,proto3,oneof" json:"Probability,omitempty"`
}

func (x *PBExtrasystole) Reset() {
	*x = PBExtrasystole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbvitalstemplate_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBExtrasystole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBExtrasystole) ProtoMessage() {}

func (x *PBExtrasystole) ProtoReflect() protoreflect.Message {
	mi := &file_pbvitalstemplate_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBExtrasystole.ProtoReflect.Descriptor instead.
func (*PBExtrasystole) Descriptor() ([]byte, []int) {
	return file_pbvitalstemplate_proto_rawDescGZIP(), []int{4}
}

func (x *PBExtrasystole) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *PBExtrasystole) GetProbability() int64 {
	if x != nil && x.Probability != nil {
		return *x.Probability
	}
	return 0
}

type PBEyes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Left      *PBEye  `protobuf:"bytes,1,opt,name=Left,proto3,oneof" json:"Left,omitempty"`
	Right     *PBEye  `protobuf:"bytes,2,opt,name=Right,proto3,oneof" json:"Right,omitempty"`
	BlinkRate *string `protobuf:"bytes,3,opt,name=BlinkRate,proto3,oneof" json:"BlinkRate,omitempty"`
}

func (x *PBEyes) Reset() {
	*x = PBEyes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbvitalstemplate_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBEyes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBEyes) ProtoMessage() {}

func (x *PBEyes) ProtoReflect() protoreflect.Message {
	mi := &file_pbvitalstemplate_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBEyes.ProtoReflect.Descriptor instead.
func (*PBEyes) Descriptor() ([]byte, []int) {
	return file_pbvitalstemplate_proto_rawDescGZIP(), []int{5}
}

func (x *PBEyes) GetLeft() *PBEye {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *PBEyes) GetRight() *PBEye {
	if x != nil {
		return x.Right
	}
	return nil
}

func (x *PBEyes) GetBlinkRate() string {
	if x != nil && x.BlinkRate != nil {
		return *x.BlinkRate
	}
	return ""
}

type PBHeartSounds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aortic          *string `protobuf:"bytes,1,opt,name=Aortic,proto3,oneof" json:"Aortic,omitempty"`
	AorticVolume    *int64  `protobuf:"varint,2,opt,name=AorticVolume,proto3,oneof" json:"AorticVolume,omitempty"`
	Pulmonary       *string `protobuf:"bytes,3,opt,name=Pulmonary,proto3,oneof" json:"Pulmonary,omitempty"`
	PulmonaryVolume *int64  `protobuf:"varint,4,opt,name=PulmonaryVolume,proto3,oneof" json:"PulmonaryVolume,omitempty"`
	Tricuspid       *string `protobuf:"bytes,5,opt,name=Tricuspid,proto3,oneof" json:"Tricuspid,omitempty"`
	TricuspidVolume *int64  `protobuf:"varint,6,opt,name=TricuspidVolume,proto3,oneof" json:"TricuspidVolume,omitempty"`
	Mitral          *string `protobuf:"bytes,7,opt,name=Mitral,proto3,oneof" json:"Mitral,omitempty"`
	MitralVolume    *int64  `protobuf:"varint,8,opt,name=MitralVolume,proto3,oneof" json:"MitralVolume,omitempty"`
}

func (x *PBHeartSounds) Reset() {
	*x = PBHeartSounds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbvitalstemplate_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBHeartSounds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBHeartSounds) ProtoMessage() {}

func (x *PBHeartSounds) ProtoReflect() protoreflect.Message {
	mi := &file_pbvitalstemplate_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBHeartSounds.ProtoReflect.Descriptor instead.
func (*PBHeartSounds) Descriptor() ([]byte, []int) {
	return file_pbvitalstemplate_proto_rawDescGZIP(), []int{6}
}

func (x *PBHeartSounds) GetAortic() string {
	if x != nil && x.Aortic != nil {
		return *x.Aortic
	}
	return ""
}

func (x *PBHeartSounds) GetAorticVolume() int64 {
	if x != nil && x.AorticVolume != nil {
		return *x.AorticVolume
	}
	return 0
}

func (x *PBHeartSounds) GetPulmonary() string {
	if x != nil && x.Pulmonary != nil {
		return *x.Pulmonary
	}
	return ""
}

func (x *PBHeartSounds) GetPulmonaryVolume() int64 {
	if x != nil && x.PulmonaryVolume != nil {
		return *x.PulmonaryVolume
	}
	return 0
}

func (x *PBHeartSounds) GetTricuspid() string {
	if x != nil && x.Tricuspid != nil {
		return *x.Tricuspid
	}
	return ""
}

func (x *PBHeartSounds) GetTricuspidVolume() int64 {
	if x != nil && x.TricuspidVolume != nil {
		return *x.TricuspidVolume
	}
	return 0
}

func (x *PBHeartSounds) GetMitral() string {
	if x != nil && x.Mitral != nil {
		return *x.Mitral
	}
	return ""
}

func (x *PBHeartSounds) GetMitralVolume() int64 {
	if x != nil && x.MitralVolume != nil {
		return *x.MitralVolume
	}
	return 0
}

type PBEye struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EyelidPosition      *string `protobuf:"bytes,1,opt,name=EyelidPosition,proto3,oneof" json:"EyelidPosition,omitempty"`
	PupilSize           *int64  `protobuf:"varint,2,opt,name=PupilSize,proto3,oneof" json:"PupilSize,omitempty"`
	PupilResponsiveness *string `protobuf:"bytes,3,opt,name=PupilResponsiveness,proto3,oneof" json:"PupilResponsiveness,omitempty"`
}

func (x *PBEye) Reset() {
	*x = PBEye{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbvitalstemplate_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBEye) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBEye) ProtoMessage() {}

func (x *PBEye) ProtoReflect() protoreflect.Message {
	mi := &file_pbvitalstemplate_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBEye.ProtoReflect.Descriptor instead.
func (*PBEye) Descriptor() ([]byte, []int) {
	return file_pbvitalstemplate_proto_rawDescGZIP(), []int{7}
}

func (x *PBEye) GetEyelidPosition() string {
	if x != nil && x.EyelidPosition != nil {
		return *x.EyelidPosition
	}
	return ""
}

func (x *PBEye) GetPupilSize() int64 {
	if x != nil && x.PupilSize != nil {
		return *x.PupilSize
	}
	return 0
}

func (x *PBEye) GetPupilResponsiveness() string {
	if x != nil && x.PupilResponsiveness != nil {
		return *x.PupilResponsiveness
	}
	return ""
}

type PBAirwayObstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TongueEdema *string `protobuf:"bytes,1,opt,name=TongueEdema,proto3,oneof" json:"TongueEdema,omitempty"`
}

func (x *PBAirwayObstruction) Reset() {
	*x = PBAirwayObstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbvitalstemplate_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBAirwayObstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBAirwayObstruction) ProtoMessage() {}

func (x *PBAirwayObstruction) ProtoReflect() protoreflect.Message {
	mi := &file_pbvitalstemplate_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBAirwayObstruction.ProtoReflect.Descriptor instead.
func (*PBAirwayObstruction) Descriptor() ([]byte, []int) {
	return file_pbvitalstemplate_proto_rawDescGZIP(), []int{8}
}

func (x *PBAirwayObstruction) GetTongueEdema() string {
	if x != nil && x.TongueEdema != nil {
		return *x.TongueEdema
	}
	return ""
}

type PBLungSounds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Left  *PBSingleLungSounds `protobuf:"bytes,1,opt,name=Left,proto3,oneof" json:"Left,omitempty"`
	Right *PBSingleLungSounds `protobuf:"bytes,2,opt,name=Right,proto3,oneof" json:"Right,omitempty"`
}

func (x *PBLungSounds) Reset() {
	*x = PBLungSounds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbvitalstemplate_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBLungSounds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBLungSounds) ProtoMessage() {}

func (x *PBLungSounds) ProtoReflect() protoreflect.Message {
	mi := &file_pbvitalstemplate_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBLungSounds.ProtoReflect.Descriptor instead.
func (*PBLungSounds) Descriptor() ([]byte, []int) {
	return file_pbvitalstemplate_proto_rawDescGZIP(), []int{9}
}

func (x *PBLungSounds) GetLeft() *PBSingleLungSounds {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *PBLungSounds) GetRight() *PBSingleLungSounds {
	if x != nil {
		return x.Right
	}
	return nil
}

type PBSingleLungSounds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnteriorUpper        *string `protobuf:"bytes,1,opt,name=AnteriorUpper,proto3,oneof" json:"AnteriorUpper,omitempty"`
	AnteriorUpperVolume  *int64  `protobuf:"varint,2,opt,name=AnteriorUpperVolume,proto3,oneof" json:"AnteriorUpperVolume,omitempty"`
	AnteriorLower        *string `protobuf:"bytes,3,opt,name=AnteriorLower,proto3,oneof" json:"AnteriorLower,omitempty"`
	AnteriorLowerVolume  *int64  `protobuf:"varint,4,opt,name=AnteriorLowerVolume,proto3,oneof" json:"AnteriorLowerVolume,omitempty"`
	AnteriorMiddle       *string `protobuf:"bytes,5,opt,name=AnteriorMiddle,proto3,oneof" json:"AnteriorMiddle,omitempty"`
	AnteriorMiddleVolume *int64  `protobuf:"varint,6,opt,name=AnteriorMiddleVolume,proto3,oneof" json:"AnteriorMiddleVolume,omitempty"`
	PosteriorUpper       *string `protobuf:"bytes,7,opt,name=PosteriorUpper,proto3,oneof" json:"PosteriorUpper,omitempty"`
	PosteriorUpperVolume *int64  `protobuf:"varint,8,opt,name=PosteriorUpperVolume,proto3,oneof" json:"PosteriorUpperVolume,omitempty"`
	PosteriorLower       *string `protobuf:"bytes,9,opt,name=PosteriorLower,proto3,oneof" json:"PosteriorLower,omitempty"`
	PosteriorLowerVolume *int64  `protobuf:"varint,10,opt,name=PosteriorLowerVolume,proto3,oneof" json:"PosteriorLowerVolume,omitempty"`
}

func (x *PBSingleLungSounds) Reset() {
	*x = PBSingleLungSounds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbvitalstemplate_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBSingleLungSounds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBSingleLungSounds) ProtoMessage() {}

func (x *PBSingleLungSounds) ProtoReflect() protoreflect.Message {
	mi := &file_pbvitalstemplate_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBSingleLungSounds.ProtoReflect.Descriptor instead.
func (*PBSingleLungSounds) Descriptor() ([]byte, []int) {
	return file_pbvitalstemplate_proto_rawDescGZIP(), []int{10}
}

func (x *PBSingleLungSounds) GetAnteriorUpper() string {
	if x != nil && x.AnteriorUpper != nil {
		return *x.AnteriorUpper
	}
	return ""
}

func (x *PBSingleLungSounds) GetAnteriorUpperVolume() int64 {
	if x != nil && x.AnteriorUpperVolume != nil {
		return *x.AnteriorUpperVolume
	}
	return 0
}

func (x *PBSingleLungSounds) GetAnteriorLower() string {
	if x != nil && x.AnteriorLower != nil {
		return *x.AnteriorLower
	}
	return ""
}

func (x *PBSingleLungSounds) GetAnteriorLowerVolume() int64 {
	if x != nil && x.AnteriorLowerVolume != nil {
		return *x.AnteriorLowerVolume
	}
	return 0
}

func (x *PBSingleLungSounds) GetAnteriorMiddle() string {
	if x != nil && x.AnteriorMiddle != nil {
		return *x.AnteriorMiddle
	}
	return ""
}

func (x *PBSingleLungSounds) GetAnteriorMiddleVolume() int64 {
	if x != nil && x.AnteriorMiddleVolume != nil {
		return *x.AnteriorMiddleVolume
	}
	return 0
}

func (x *PBSingleLungSounds) GetPosteriorUpper() string {
	if x != nil && x.PosteriorUpper != nil {
		return *x.PosteriorUpper
	}
	return ""
}

func (x *PBSingleLungSounds) GetPosteriorUpperVolume() int64 {
	if x != nil && x.PosteriorUpperVolume != nil {
		return *x.PosteriorUpperVolume
	}
	return 0
}

func (x *PBSingleLungSounds) GetPosteriorLower() string {
	if x != nil && x.PosteriorLower != nil {
		return *x.PosteriorLower
	}
	return ""
}

func (x *PBSingleLungSounds) GetPosteriorLowerVolume() int64 {
	if x != nil && x.PosteriorLowerVolume != nil {
		return *x.PosteriorLowerVolume
	}
	return 0
}

type PBBowelSounds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bowel       *string `protobuf:"bytes,1,opt,name=Bowel,proto3,oneof" json:"Bowel,omitempty"`
	BowelVolume *int64  `protobuf:"varint,2,opt,name=BowelVolume,proto3,oneof" json:"BowelVolume,omitempty"`
}

func (x *PBBowelSounds) Reset() {
	*x = PBBowelSounds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbvitalstemplate_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBBowelSounds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBBowelSounds) ProtoMessage() {}

func (x *PBBowelSounds) ProtoReflect() protoreflect.Message {
	mi := &file_pbvitalstemplate_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBBowelSounds.ProtoReflect.Descriptor instead.
func (*PBBowelSounds) Descriptor() ([]byte, []int) {
	return file_pbvitalstemplate_proto_rawDescGZIP(), []int{11}
}

func (x *PBBowelSounds) GetBowel() string {
	if x != nil && x.Bowel != nil {
		return *x.Bowel
	}
	return ""
}

func (x *PBBowelSounds) GetBowelVolume() int64 {
	if x != nil && x.BowelVolume != nil {
		return *x.BowelVolume
	}
	return 0
}

type PBPulses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Central          *string `protobuf:"bytes,1,opt,name=Central,proto3,oneof" json:"Central,omitempty"`
	CentralLimited   *string `protobuf:"bytes,2,opt,name=CentralLimited,proto3,oneof" json:"CentralLimited,omitempty"`
	RightLeg         *string `protobuf:"bytes,3,opt,name=RightLeg,proto3,oneof" json:"RightLeg,omitempty"`
	RightLegLimited  *string `protobuf:"bytes,4,opt,name=RightLegLimited,proto3,oneof" json:"RightLegLimited,omitempty"`
	LeftLeg          *string `protobuf:"bytes,5,opt,name=LeftLeg,proto3,oneof" json:"LeftLeg,omitempty"`
	LeftLegLimited   *string `protobuf:"bytes,6,opt,name=LeftLegLimited,proto3,oneof" json:"LeftLegLimited,omitempty"`
	RightFoot        *string `protobuf:"bytes,7,opt,name=RightFoot,proto3,oneof" json:"RightFoot,omitempty"`
	RightFootLimited *string `protobuf:"bytes,8,opt,name=RightFootLimited,proto3,oneof" json:"RightFootLimited,omitempty"`
	LeftFoot         *string `protobuf:"bytes,9,opt,name=LeftFoot,proto3,oneof" json:"LeftFoot,omitempty"`
	LeftFootLimited  *string `protobuf:"bytes,10,opt,name=LeftFootLimited,proto3,oneof" json:"LeftFootLimited,omitempty"`
	RightArm         *string `protobuf:"bytes,11,opt,name=RightArm,proto3,oneof" json:"RightArm,omitempty"`
	RightArmLimited  *string `protobuf:"bytes,12,opt,name=RightArmLimited,proto3,oneof" json:"RightArmLimited,omitempty"`
	LeftArm          *string `protobuf:"bytes,13,opt,name=LeftArm,proto3,oneof" json:"LeftArm,omitempty"`
	LeftArmLimited   *string `protobuf:"bytes,14,opt,name=LeftArmLimited,proto3,oneof" json:"LeftArmLimited,omitempty"`
	RightHand        *string `protobuf:"bytes,15,opt,name=RightHand,proto3,oneof" json:"RightHand,omitempty"`
	RightHandLimited *string `protobuf:"bytes,16,opt,name=RightHandLimited,proto3,oneof" json:"RightHandLimited,omitempty"`
	LeftHand         *string `protobuf:"bytes,17,opt,name=LeftHand,proto3,oneof" json:"LeftHand,omitempty"`
	LeftHandLimited  *string `protobuf:"bytes,18,opt,name=LeftHandLimited,proto3,oneof" json:"LeftHandLimited,omitempty"`
}

func (x *PBPulses) Reset() {
	*x = PBPulses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbvitalstemplate_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBPulses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBPulses) ProtoMessage() {}

func (x *PBPulses) ProtoReflect() protoreflect.Message {
	mi := &file_pbvitalstemplate_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBPulses.ProtoReflect.Descriptor instead.
func (*PBPulses) Descriptor() ([]byte, []int) {
	return file_pbvitalstemplate_proto_rawDescGZIP(), []int{12}
}

func (x *PBPulses) GetCentral() string {
	if x != nil && x.Central != nil {
		return *x.Central
	}
	return ""
}

func (x *PBPulses) GetCentralLimited() string {
	if x != nil && x.CentralLimited != nil {
		return *x.CentralLimited
	}
	return ""
}

func (x *PBPulses) GetRightLeg() string {
	if x != nil && x.RightLeg != nil {
		return *x.RightLeg
	}
	return ""
}

func (x *PBPulses) GetRightLegLimited() string {
	if x != nil && x.RightLegLimited != nil {
		return *x.RightLegLimited
	}
	return ""
}

func (x *PBPulses) GetLeftLeg() string {
	if x != nil && x.LeftLeg != nil {
		return *x.LeftLeg
	}
	return ""
}

func (x *PBPulses) GetLeftLegLimited() string {
	if x != nil && x.LeftLegLimited != nil {
		return *x.LeftLegLimited
	}
	return ""
}

func (x *PBPulses) GetRightFoot() string {
	if x != nil && x.RightFoot != nil {
		return *x.RightFoot
	}
	return ""
}

func (x *PBPulses) GetRightFootLimited() string {
	if x != nil && x.RightFootLimited != nil {
		return *x.RightFootLimited
	}
	return ""
}

func (x *PBPulses) GetLeftFoot() string {
	if x != nil && x.LeftFoot != nil {
		return *x.LeftFoot
	}
	return ""
}

func (x *PBPulses) GetLeftFootLimited() string {
	if x != nil && x.LeftFootLimited != nil {
		return *x.LeftFootLimited
	}
	return ""
}

func (x *PBPulses) GetRightArm() string {
	if x != nil && x.RightArm != nil {
		return *x.RightArm
	}
	return ""
}

func (x *PBPulses) GetRightArmLimited() string {
	if x != nil && x.RightArmLimited != nil {
		return *x.RightArmLimited
	}
	return ""
}

func (x *PBPulses) GetLeftArm() string {
	if x != nil && x.LeftArm != nil {
		return *x.LeftArm
	}
	return ""
}

func (x *PBPulses) GetLeftArmLimited() string {
	if x != nil && x.LeftArmLimited != nil {
		return *x.LeftArmLimited
	}
	return ""
}

func (x *PBPulses) GetRightHand() string {
	if x != nil && x.RightHand != nil {
		return *x.RightHand
	}
	return ""
}

func (x *PBPulses) GetRightHandLimited() string {
	if x != nil && x.RightHandLimited != nil {
		return *x.RightHandLimited
	}
	return ""
}

func (x *PBPulses) GetLeftHand() string {
	if x != nil && x.LeftHand != nil {
		return *x.LeftHand
	}
	return ""
}

func (x *PBPulses) GetLeftHandLimited() string {
	if x != nil && x.LeftHandLimited != nil {
		return *x.LeftHandLimited
	}
	return ""
}

var File_pbvitalstemplate_proto protoreflect.FileDescriptor

var file_pbvitalstemplate_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x62, 0x76, 0x69, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x66, 0x6f, 0x6f, 0x2e, 0x76, 0x69,
	0x74, 0x61, 0x6c, 0x73, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x50, 0x0a, 0x10,
	0x50, 0x42, 0x56, 0x69, 0x74, 0x61, 0x6c, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x3c, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x66, 0x6f, 0x6f, 0x2e, 0x76, 0x69, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x50, 0x42, 0x56, 0x69, 0x74, 0x61, 0x6c, 0x73, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x53, 0x70, 0x65, 0x63, 0x22, 0xd7,
	0x07, 0x0a, 0x14, 0x50, 0x42, 0x56, 0x69, 0x74, 0x61, 0x6c, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2d, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x0f, 0x52, 0x65, 0x73, 0x70, 0x69, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x53, 0x70, 0x4f, 0x32, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x04, 0x53, 0x70, 0x4f, 0x32, 0x88, 0x01, 0x01, 0x12,
	0x4e, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x6f, 0x6f, 0x2e, 0x76, 0x69, 0x74,
	0x61, 0x6c, 0x73, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x42, 0x42, 0x6c,
	0x6f, 0x6f, 0x64, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x48, 0x02, 0x52, 0x0d, 0x42,
	0x6c, 0x6f, 0x6f, 0x64, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x45, 0x74, 0x43, 0x4f, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03,
	0x52, 0x05, 0x45, 0x74, 0x43, 0x4f, 0x32, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x10, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x15, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x65, 0x72, 0x69, 0x70, 0x68,
	0x65, 0x72, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x05, 0x52, 0x15, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x65, 0x72, 0x69, 0x70, 0x68, 0x65,
	0x72, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x03, 0x45, 0x63, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6f, 0x6f, 0x2e, 0x76, 0x69, 0x74, 0x61, 0x6c, 0x73,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x42, 0x45, 0x63, 0x67, 0x48, 0x06,
	0x52, 0x03, 0x45, 0x63, 0x67, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x04, 0x45, 0x79, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6f, 0x6f, 0x2e, 0x76, 0x69, 0x74,
	0x61, 0x6c, 0x73, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x42, 0x45, 0x79,
	0x65, 0x73, 0x48, 0x07, 0x52, 0x04, 0x45, 0x79, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a,
	0x11, 0x41, 0x69, 0x72, 0x77, 0x61, 0x79, 0x4f, 0x62, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x66, 0x6f, 0x6f, 0x2e, 0x76,
	0x69, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x42,
	0x41, 0x69, 0x72, 0x77, 0x61, 0x79, 0x4f, 0x62, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x08, 0x52, 0x11, 0x41, 0x69, 0x72, 0x77, 0x61, 0x79, 0x4f, 0x62, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x0a, 0x4c, 0x75, 0x6e,
	0x67, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x66, 0x6f, 0x6f, 0x2e, 0x76, 0x69, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x2e, 0x50, 0x42, 0x4c, 0x75, 0x6e, 0x67, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x48,
	0x09, 0x52, 0x0a, 0x4c, 0x75, 0x6e, 0x67, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x48, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x72, 0x74, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x6f, 0x6f, 0x2e, 0x76, 0x69, 0x74, 0x61,
	0x6c, 0x73, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x42, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x48, 0x0a, 0x52, 0x0b, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x0b, 0x42, 0x6f,
	0x77, 0x65, 0x6c, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x66, 0x6f, 0x6f, 0x2e, 0x76, 0x69, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x42, 0x42, 0x6f, 0x77, 0x65, 0x6c, 0x53, 0x6f, 0x75, 0x6e,
	0x64, 0x73, 0x48, 0x0b, 0x52, 0x0b, 0x42, 0x6f, 0x77, 0x65, 0x6c, 0x53, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x06, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x6f, 0x6f, 0x2e, 0x76, 0x69, 0x74, 0x61, 0x6c,
	0x73, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x42, 0x50, 0x75, 0x6c, 0x73,
	0x65, 0x73, 0x48, 0x0c, 0x52, 0x06, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x69, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x61, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x53, 0x70, 0x4f, 0x32, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x45, 0x74, 0x43, 0x4f, 0x32, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x54, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x18, 0x0a,
	0x16, 0x5f, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x65, 0x72,
	0x69, 0x70, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x45, 0x63, 0x67, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x45, 0x79, 0x65, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x41, 0x69, 0x72,
	0x77, 0x61, 0x79, 0x4f, 0x62, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x4c, 0x75, 0x6e, 0x67, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x48, 0x65, 0x61, 0x72, 0x74, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x42, 0x6f, 0x77, 0x65, 0x6c, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x73, 0x22, 0x70, 0x0a, 0x0f, 0x50, 0x42, 0x42, 0x6c,
	0x6f, 0x6f, 0x64, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x53,
	0x79, 0x73, 0x74, 0x6f, 0x6c, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x08, 0x53, 0x79, 0x73, 0x74, 0x6f, 0x6c, 0x69, 0x63, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09,
	0x44, 0x69, 0x61, 0x73, 0x74, 0x6f, 0x6c, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x01, 0x52, 0x09, 0x44, 0x69, 0x61, 0x73, 0x74, 0x6f, 0x6c, 0x69, 0x63, 0x88, 0x01, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x6f, 0x6c, 0x69, 0x63, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x44, 0x69, 0x61, 0x73, 0x74, 0x6f, 0x6c, 0x69, 0x63, 0x22, 0xda, 0x02, 0x0a, 0x05, 0x50,
	0x42, 0x45, 0x63, 0x67, 0x12, 0x21, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x52, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x4b,
	0x0a, 0x0c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x73, 0x79, 0x73, 0x74, 0x6f, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x6f, 0x6f, 0x2e, 0x76, 0x69, 0x74, 0x61, 0x6c,
	0x73, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x42, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x73, 0x79, 0x73, 0x74, 0x6f, 0x6c, 0x65, 0x48, 0x02, 0x52, 0x0c, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x73, 0x79, 0x73, 0x74, 0x6f, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x53,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52,
	0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x04, 0x52, 0x0b, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x63, 0x69, 0x6e, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x45, 0x6d, 0x64, 0x50, 0x65, 0x61, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x06, 0x45, 0x6d, 0x64, 0x50, 0x65, 0x61, 0x88, 0x01, 0x01,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x48, 0x65, 0x61, 0x72, 0x74, 0x52, 0x61, 0x74, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x45, 0x78, 0x74, 0x72, 0x61, 0x73, 0x79, 0x73, 0x74, 0x6f, 0x6c, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x45, 0x6d, 0x64, 0x50, 0x65, 0x61, 0x22, 0x69, 0x0a, 0x0e, 0x50, 0x42, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x73, 0x79, 0x73, 0x74, 0x6f, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x62, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x22, 0xb6, 0x01, 0x0a, 0x06, 0x50, 0x42, 0x45, 0x79, 0x65, 0x73, 0x12, 0x32, 0x0a,
	0x04, 0x4c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6f,
	0x6f, 0x2e, 0x76, 0x69, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x2e, 0x50, 0x42, 0x45, 0x79, 0x65, 0x48, 0x00, 0x52, 0x04, 0x4c, 0x65, 0x66, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x34, 0x0a, 0x05, 0x52, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x66, 0x6f, 0x6f, 0x2e, 0x76, 0x69, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x42, 0x45, 0x79, 0x65, 0x48, 0x01, 0x52, 0x05, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x42, 0x6c, 0x69, 0x6e, 0x6b,
	0x52, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x42, 0x6c,
	0x69, 0x6e, 0x6b, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4c,
	0x65, 0x66, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x42, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x61, 0x74, 0x65, 0x22, 0xbb, 0x03, 0x0a, 0x0d,
	0x50, 0x42, 0x48, 0x65, 0x61, 0x72, 0x74, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x1b, 0x0a,
	0x06, 0x41, 0x6f, 0x72, 0x74, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x06, 0x41, 0x6f, 0x72, 0x74, 0x69, 0x63, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x41, 0x6f,
	0x72, 0x74, 0x69, 0x63, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x01, 0x52, 0x0c, 0x41, 0x6f, 0x72, 0x74, 0x69, 0x63, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x50, 0x75, 0x6c, 0x6d, 0x6f, 0x6e, 0x61, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x50, 0x75, 0x6c, 0x6d, 0x6f, 0x6e,
	0x61, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x50, 0x75, 0x6c, 0x6d, 0x6f, 0x6e,
	0x61, 0x72, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x03, 0x52, 0x0f, 0x50, 0x75, 0x6c, 0x6d, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x54, 0x72, 0x69, 0x63, 0x75, 0x73, 0x70,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x09, 0x54, 0x72, 0x69, 0x63,
	0x75, 0x73, 0x70, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x54, 0x72, 0x69, 0x63,
	0x75, 0x73, 0x70, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x05, 0x52, 0x0f, 0x54, 0x72, 0x69, 0x63, 0x75, 0x73, 0x70, 0x69, 0x64, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x4d, 0x69, 0x74, 0x72, 0x61,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x06, 0x4d, 0x69, 0x74, 0x72, 0x61,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x4d, 0x69, 0x74, 0x72, 0x61, 0x6c, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x48, 0x07, 0x52, 0x0c, 0x4d, 0x69,
	0x74, 0x72, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x41, 0x6f, 0x72, 0x74, 0x69, 0x63, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x41, 0x6f, 0x72,
	0x74, 0x69, 0x63, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x50, 0x75,
	0x6c, 0x6d, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x50, 0x75, 0x6c, 0x6d,
	0x6f, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x54, 0x72, 0x69, 0x63, 0x75, 0x73, 0x70, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x54, 0x72,
	0x69, 0x63, 0x75, 0x73, 0x70, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x4d, 0x69, 0x74, 0x72, 0x61, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x4d, 0x69, 0x74,
	0x72, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x05, 0x50, 0x42,
	0x45, 0x79, 0x65, 0x12, 0x2b, 0x0a, 0x0e, 0x45, 0x79, 0x65, 0x6c, 0x69, 0x64, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x45,
	0x79, 0x65, 0x6c, 0x69, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x09, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x09, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x53, 0x69, 0x7a, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x13, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x45,
	0x79, 0x65, 0x6c, 0x69, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f,
	0x50, 0x75, 0x70, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x6e,
	0x65, 0x73, 0x73, 0x22, 0x4c, 0x0a, 0x13, 0x50, 0x42, 0x41, 0x69, 0x72, 0x77, 0x61, 0x79, 0x4f,
	0x62, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0b, 0x54, 0x6f,
	0x6e, 0x67, 0x75, 0x65, 0x45, 0x64, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0b, 0x54, 0x6f, 0x6e, 0x67, 0x75, 0x65, 0x45, 0x64, 0x65, 0x6d, 0x61, 0x88, 0x01,
	0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x54, 0x6f, 0x6e, 0x67, 0x75, 0x65, 0x45, 0x64, 0x65, 0x6d,
	0x61, 0x22, 0xa5, 0x01, 0x0a, 0x0c, 0x50, 0x42, 0x4c, 0x75, 0x6e, 0x67, 0x53, 0x6f, 0x75, 0x6e,
	0x64, 0x73, 0x12, 0x3f, 0x0a, 0x04, 0x4c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x66, 0x6f, 0x6f, 0x2e, 0x76, 0x69, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x42, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4c, 0x75,
	0x6e, 0x67, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x48, 0x00, 0x52, 0x04, 0x4c, 0x65, 0x66, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x05, 0x52, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x66, 0x6f, 0x6f, 0x2e, 0x76, 0x69, 0x74, 0x61, 0x6c, 0x73, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x42, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x4c, 0x75, 0x6e, 0x67, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x48, 0x01, 0x52, 0x05, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x22, 0xe2, 0x05, 0x0a, 0x12, 0x50, 0x42,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4c, 0x75, 0x6e, 0x67, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x73,
	0x12, 0x29, 0x0a, 0x0d, 0x41, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x55, 0x70, 0x70, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x41, 0x6e, 0x74, 0x65, 0x72,
	0x69, 0x6f, 0x72, 0x55, 0x70, 0x70, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x41,
	0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x55, 0x70, 0x70, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x13, 0x41, 0x6e, 0x74, 0x65,
	0x72, 0x69, 0x6f, 0x72, 0x55, 0x70, 0x70, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x41, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x4c, 0x6f,
	0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x41, 0x6e, 0x74,
	0x65, 0x72, 0x69, 0x6f, 0x72, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a,
	0x13, 0x41, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x13, 0x41, 0x6e,
	0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x41, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72,
	0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0e,
	0x41, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x37, 0x0a, 0x14, 0x41, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x4d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x05, 0x52, 0x14, 0x41, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x4d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x50, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x55, 0x70, 0x70, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x0e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x55,
	0x70, 0x70, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x14, 0x50, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x69, 0x6f, 0x72, 0x55, 0x70, 0x70, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x48, 0x07, 0x52, 0x14, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x69,
	0x6f, 0x72, 0x55, 0x70, 0x70, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2b, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x4c, 0x6f, 0x77,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0e, 0x50, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x69, 0x6f, 0x72, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a,
	0x14, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x48, 0x09, 0x52, 0x14, 0x50,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x41, 0x6e, 0x74, 0x65, 0x72,
	0x69, 0x6f, 0x72, 0x55, 0x70, 0x70, 0x65, 0x72, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x41, 0x6e, 0x74,
	0x65, 0x72, 0x69, 0x6f, 0x72, 0x55, 0x70, 0x70, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x41, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x4c, 0x6f, 0x77,
	0x65, 0x72, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x41, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x4c,
	0x6f, 0x77, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x41,
	0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x42, 0x17, 0x0a,
	0x15, 0x5f, 0x41, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x50, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x69, 0x6f, 0x72, 0x55, 0x70, 0x70, 0x65, 0x72, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x50, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x55, 0x70, 0x70, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72,
	0x4c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x69, 0x6f, 0x72, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x6b,
	0x0a, 0x0d, 0x50, 0x42, 0x42, 0x6f, 0x77, 0x65, 0x6c, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12,
	0x19, 0x0a, 0x05, 0x42, 0x6f, 0x77, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x05, 0x42, 0x6f, 0x77, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x42, 0x6f,
	0x77, 0x65, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x01, 0x52, 0x0b, 0x42, 0x6f, 0x77, 0x65, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x42, 0x6f, 0x77, 0x65, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x42, 0x6f, 0x77, 0x65, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0xfd, 0x07, 0x0a, 0x08,
	0x50, 0x42, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x43, 0x65, 0x6e, 0x74,
	0x72, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x43, 0x65, 0x6e,
	0x74, 0x72, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x43, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0e, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x65, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c,
	0x65, 0x67, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x65,
	0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x0f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x65, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x65, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x65, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x65, 0x67, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0e, 0x4c,
	0x65, 0x66, 0x74, 0x4c, 0x65, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x09, 0x52, 0x69, 0x67, 0x68, 0x74, 0x46, 0x6f, 0x6f, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x09, 0x52, 0x69, 0x67, 0x68, 0x74, 0x46, 0x6f, 0x6f, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x52, 0x69, 0x67, 0x68, 0x74, 0x46, 0x6f, 0x6f, 0x74,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52,
	0x10, 0x52, 0x69, 0x67, 0x68, 0x74, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x4c, 0x65, 0x66, 0x74, 0x46, 0x6f, 0x6f, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x08, 0x4c, 0x65, 0x66, 0x74, 0x46, 0x6f,
	0x6f, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x4c, 0x65, 0x66, 0x74, 0x46, 0x6f, 0x6f,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09,
	0x52, 0x0f, 0x4c, 0x65, 0x66, 0x74, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x52, 0x69, 0x67, 0x68, 0x74, 0x41, 0x72, 0x6d,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x08, 0x52, 0x69, 0x67, 0x68, 0x74, 0x41,
	0x72, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x41, 0x72,
	0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b,
	0x52, 0x0f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x41, 0x72, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x4c, 0x65, 0x66, 0x74, 0x41, 0x72, 0x6d, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x07, 0x4c, 0x65, 0x66, 0x74, 0x41, 0x72, 0x6d,
	0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x4c, 0x65, 0x66, 0x74, 0x41, 0x72, 0x6d, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0e, 0x4c,
	0x65, 0x66, 0x74, 0x41, 0x72, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x09, 0x52, 0x69, 0x67, 0x68, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x09, 0x52, 0x69, 0x67, 0x68, 0x74, 0x48, 0x61, 0x6e, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x52, 0x69, 0x67, 0x68, 0x74, 0x48, 0x61, 0x6e, 0x64,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52,
	0x10, 0x52, 0x69, 0x67, 0x68, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x4c, 0x65, 0x66, 0x74, 0x48, 0x61, 0x6e, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x08, 0x4c, 0x65, 0x66, 0x74, 0x48, 0x61,
	0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x4c, 0x65, 0x66, 0x74, 0x48, 0x61, 0x6e,
	0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11,
	0x52, 0x0f, 0x4c, 0x65, 0x66, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x65, 0x67,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x65, 0x67, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x65, 0x67,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x65, 0x67, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x65, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x46, 0x6f, 0x6f,
	0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x46, 0x6f, 0x6f, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x46,
	0x6f, 0x6f, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x46, 0x6f, 0x6f, 0x74,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x41, 0x72, 0x6d, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x41, 0x72,
	0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x4c, 0x65, 0x66,
	0x74, 0x41, 0x72, 0x6d, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x41, 0x72, 0x6d,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x48, 0x61, 0x6e, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x48,
	0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x4c,
	0x65, 0x66, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x4c, 0x65, 0x66, 0x74,
	0x48, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x42, 0x09, 0x5a, 0x07, 0x2e,
	0x3b, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pbvitalstemplate_proto_rawDescOnce sync.Once
	file_pbvitalstemplate_proto_rawDescData = file_pbvitalstemplate_proto_rawDesc
)

func file_pbvitalstemplate_proto_rawDescGZIP() []byte {
	file_pbvitalstemplate_proto_rawDescOnce.Do(func() {
		file_pbvitalstemplate_proto_rawDescData = protoimpl.X.CompressGZIP(file_pbvitalstemplate_proto_rawDescData)
	})
	return file_pbvitalstemplate_proto_rawDescData
}

var file_pbvitalstemplate_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_pbvitalstemplate_proto_goTypes = []interface{}{
	(*PBVitalsTemplate)(nil),     // 0: foo.vitalstemplate.PBVitalsTemplate
	(*PBVitalsTemplateSpec)(nil), // 1: foo.vitalstemplate.PBVitalsTemplateSpec
	(*PBBloodPressure)(nil),      // 2: foo.vitalstemplate.PBBloodPressure
	(*PBEcg)(nil),                // 3: foo.vitalstemplate.PBEcg
	(*PBExtrasystole)(nil),       // 4: foo.vitalstemplate.PBExtrasystole
	(*PBEyes)(nil),               // 5: foo.vitalstemplate.PBEyes
	(*PBHeartSounds)(nil),        // 6: foo.vitalstemplate.PBHeartSounds
	(*PBEye)(nil),                // 7: foo.vitalstemplate.PBEye
	(*PBAirwayObstruction)(nil),  // 8: foo.vitalstemplate.PBAirwayObstruction
	(*PBLungSounds)(nil),         // 9: foo.vitalstemplate.PBLungSounds
	(*PBSingleLungSounds)(nil),   // 10: foo.vitalstemplate.PBSingleLungSounds
	(*PBBowelSounds)(nil),        // 11: foo.vitalstemplate.PBBowelSounds
	(*PBPulses)(nil),             // 12: foo.vitalstemplate.PBPulses
}
var file_pbvitalstemplate_proto_depIdxs = []int32{
	1,  // 0: foo.vitalstemplate.PBVitalsTemplate.Spec:type_name -> foo.vitalstemplate.PBVitalsTemplateSpec
	2,  // 1: foo.vitalstemplate.PBVitalsTemplateSpec.BloodPressure:type_name -> foo.vitalstemplate.PBBloodPressure
	3,  // 2: foo.vitalstemplate.PBVitalsTemplateSpec.Ecg:type_name -> foo.vitalstemplate.PBEcg
	5,  // 3: foo.vitalstemplate.PBVitalsTemplateSpec.Eyes:type_name -> foo.vitalstemplate.PBEyes
	8,  // 4: foo.vitalstemplate.PBVitalsTemplateSpec.AirwayObstruction:type_name -> foo.vitalstemplate.PBAirwayObstruction
	9,  // 5: foo.vitalstemplate.PBVitalsTemplateSpec.LungSounds:type_name -> foo.vitalstemplate.PBLungSounds
	6,  // 6: foo.vitalstemplate.PBVitalsTemplateSpec.HeartSounds:type_name -> foo.vitalstemplate.PBHeartSounds
	11, // 7: foo.vitalstemplate.PBVitalsTemplateSpec.BowelSounds:type_name -> foo.vitalstemplate.PBBowelSounds
	12, // 8: foo.vitalstemplate.PBVitalsTemplateSpec.Pulses:type_name -> foo.vitalstemplate.PBPulses
	4,  // 9: foo.vitalstemplate.PBEcg.Extrasystole:type_name -> foo.vitalstemplate.PBExtrasystole
	7,  // 10: foo.vitalstemplate.PBEyes.Left:type_name -> foo.vitalstemplate.PBEye
	7,  // 11: foo.vitalstemplate.PBEyes.Right:type_name -> foo.vitalstemplate.PBEye
	10, // 12: foo.vitalstemplate.PBLungSounds.Left:type_name -> foo.vitalstemplate.PBSingleLungSounds
	10, // 13: foo.vitalstemplate.PBLungSounds.Right:type_name -> foo.vitalstemplate.PBSingleLungSounds
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_pbvitalstemplate_proto_init() }
func file_pbvitalstemplate_proto_init() {
	if File_pbvitalstemplate_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pbvitalstemplate_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBVitalsTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbvitalstemplate_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBVitalsTemplateSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbvitalstemplate_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBBloodPressure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbvitalstemplate_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBEcg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbvitalstemplate_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBExtrasystole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbvitalstemplate_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBEyes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbvitalstemplate_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBHeartSounds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbvitalstemplate_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBEye); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbvitalstemplate_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBAirwayObstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbvitalstemplate_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBLungSounds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbvitalstemplate_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBSingleLungSounds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbvitalstemplate_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBBowelSounds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbvitalstemplate_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBPulses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pbvitalstemplate_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_pbvitalstemplate_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_pbvitalstemplate_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_pbvitalstemplate_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_pbvitalstemplate_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_pbvitalstemplate_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_pbvitalstemplate_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_pbvitalstemplate_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_pbvitalstemplate_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_pbvitalstemplate_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_pbvitalstemplate_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_pbvitalstemplate_proto_msgTypes[12].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pbvitalstemplate_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pbvitalstemplate_proto_goTypes,
		DependencyIndexes: file_pbvitalstemplate_proto_depIdxs,
		MessageInfos:      file_pbvitalstemplate_proto_msgTypes,
	}.Build()
	File_pbvitalstemplate_proto = out.File
	file_pbvitalstemplate_proto_rawDesc = nil
	file_pbvitalstemplate_proto_goTypes = nil
	file_pbvitalstemplate_proto_depIdxs = nil
}
