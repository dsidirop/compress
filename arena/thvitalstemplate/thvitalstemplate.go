// Code generated by Thrift Compiler (0.16.0). DO NOT EDIT.

package thvitalstemplate

import (
	"bytes"
	"context"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

// Attributes:
//  - Spec
type THVitalsTemplate struct {
  Spec *THVitalsTemplateSpec `thrift:"Spec,1" db:"Spec" json:"Spec"`
}

func NewTHVitalsTemplate() *THVitalsTemplate {
  return &THVitalsTemplate{}
}

var THVitalsTemplate_Spec_DEFAULT *THVitalsTemplateSpec = &THVitalsTemplateSpec{}
func (p *THVitalsTemplate) GetSpec() *THVitalsTemplateSpec {
  if !p.IsSetSpec() {
    return THVitalsTemplate_Spec_DEFAULT
  }
return p.Spec
}
func (p *THVitalsTemplate) IsSetSpec() bool {
  return p.Spec != nil
}

func (p *THVitalsTemplate) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *THVitalsTemplate)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Spec = &THVitalsTemplateSpec{}
  if err := p.Spec.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Spec), err)
  }
  return nil
}

func (p *THVitalsTemplate) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "THVitalsTemplate"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THVitalsTemplate) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSpec() {
    if err := oprot.WriteFieldBegin(ctx, "Spec", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Spec: ", p), err) }
    if err := p.Spec.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Spec), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Spec: ", p), err) }
  }
  return err
}

func (p *THVitalsTemplate) Equals(other *THVitalsTemplate) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Spec.Equals(other.Spec) { return false }
  return true
}

func (p *THVitalsTemplate) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THVitalsTemplate(%+v)", *p)
}

// Attributes:
//  - RespiratoryRate
//  - SpO2
//  - BloodPressure
//  - EtCO2
//  - TemperatureBlood
//  - TemperaturePeripheral
//  - Ecg
//  - Eyes
//  - AirwayObstruction
//  - LungSounds
//  - HeartSounds
//  - BowelSounds
//  - Pulses
type THVitalsTemplateSpec struct {
  RespiratoryRate *int64 `thrift:"RespiratoryRate,1" db:"RespiratoryRate" json:"RespiratoryRate,omitempty"`
  SpO2 *int64 `thrift:"SpO2,2" db:"SpO2" json:"SpO2,omitempty"`
  BloodPressure *THBloodPressure `thrift:"BloodPressure,3" db:"BloodPressure" json:"BloodPressure,omitempty"`
  EtCO2 *int64 `thrift:"EtCO2,4" db:"EtCO2" json:"EtCO2,omitempty"`
  TemperatureBlood *float64 `thrift:"TemperatureBlood,5" db:"TemperatureBlood" json:"TemperatureBlood,omitempty"`
  TemperaturePeripheral *float64 `thrift:"TemperaturePeripheral,6" db:"TemperaturePeripheral" json:"TemperaturePeripheral,omitempty"`
  Ecg *THEcg `thrift:"Ecg,7" db:"Ecg" json:"Ecg,omitempty"`
  Eyes *THEyes `thrift:"Eyes,8" db:"Eyes" json:"Eyes,omitempty"`
  AirwayObstruction *THAirwayObstruction `thrift:"AirwayObstruction,9" db:"AirwayObstruction" json:"AirwayObstruction,omitempty"`
  LungSounds *THLungSounds `thrift:"LungSounds,10" db:"LungSounds" json:"LungSounds,omitempty"`
  HeartSounds *THHeartSounds `thrift:"HeartSounds,11" db:"HeartSounds" json:"HeartSounds,omitempty"`
  BowelSounds *THBowelSounds `thrift:"BowelSounds,12" db:"BowelSounds" json:"BowelSounds,omitempty"`
  Pulses *THPulses `thrift:"Pulses,13" db:"Pulses" json:"Pulses,omitempty"`
}

func NewTHVitalsTemplateSpec() *THVitalsTemplateSpec {
  return &THVitalsTemplateSpec{}
}

var THVitalsTemplateSpec_RespiratoryRate_DEFAULT int64
func (p *THVitalsTemplateSpec) GetRespiratoryRate() int64 {
  if !p.IsSetRespiratoryRate() {
    return THVitalsTemplateSpec_RespiratoryRate_DEFAULT
  }
return *p.RespiratoryRate
}
var THVitalsTemplateSpec_SpO2_DEFAULT int64
func (p *THVitalsTemplateSpec) GetSpO2() int64 {
  if !p.IsSetSpO2() {
    return THVitalsTemplateSpec_SpO2_DEFAULT
  }
return *p.SpO2
}
var THVitalsTemplateSpec_BloodPressure_DEFAULT *THBloodPressure
func (p *THVitalsTemplateSpec) GetBloodPressure() *THBloodPressure {
  if !p.IsSetBloodPressure() {
    return THVitalsTemplateSpec_BloodPressure_DEFAULT
  }
return p.BloodPressure
}
var THVitalsTemplateSpec_EtCO2_DEFAULT int64
func (p *THVitalsTemplateSpec) GetEtCO2() int64 {
  if !p.IsSetEtCO2() {
    return THVitalsTemplateSpec_EtCO2_DEFAULT
  }
return *p.EtCO2
}
var THVitalsTemplateSpec_TemperatureBlood_DEFAULT float64
func (p *THVitalsTemplateSpec) GetTemperatureBlood() float64 {
  if !p.IsSetTemperatureBlood() {
    return THVitalsTemplateSpec_TemperatureBlood_DEFAULT
  }
return *p.TemperatureBlood
}
var THVitalsTemplateSpec_TemperaturePeripheral_DEFAULT float64
func (p *THVitalsTemplateSpec) GetTemperaturePeripheral() float64 {
  if !p.IsSetTemperaturePeripheral() {
    return THVitalsTemplateSpec_TemperaturePeripheral_DEFAULT
  }
return *p.TemperaturePeripheral
}
var THVitalsTemplateSpec_Ecg_DEFAULT *THEcg
func (p *THVitalsTemplateSpec) GetEcg() *THEcg {
  if !p.IsSetEcg() {
    return THVitalsTemplateSpec_Ecg_DEFAULT
  }
return p.Ecg
}
var THVitalsTemplateSpec_Eyes_DEFAULT *THEyes
func (p *THVitalsTemplateSpec) GetEyes() *THEyes {
  if !p.IsSetEyes() {
    return THVitalsTemplateSpec_Eyes_DEFAULT
  }
return p.Eyes
}
var THVitalsTemplateSpec_AirwayObstruction_DEFAULT *THAirwayObstruction
func (p *THVitalsTemplateSpec) GetAirwayObstruction() *THAirwayObstruction {
  if !p.IsSetAirwayObstruction() {
    return THVitalsTemplateSpec_AirwayObstruction_DEFAULT
  }
return p.AirwayObstruction
}
var THVitalsTemplateSpec_LungSounds_DEFAULT *THLungSounds
func (p *THVitalsTemplateSpec) GetLungSounds() *THLungSounds {
  if !p.IsSetLungSounds() {
    return THVitalsTemplateSpec_LungSounds_DEFAULT
  }
return p.LungSounds
}
var THVitalsTemplateSpec_HeartSounds_DEFAULT *THHeartSounds
func (p *THVitalsTemplateSpec) GetHeartSounds() *THHeartSounds {
  if !p.IsSetHeartSounds() {
    return THVitalsTemplateSpec_HeartSounds_DEFAULT
  }
return p.HeartSounds
}
var THVitalsTemplateSpec_BowelSounds_DEFAULT *THBowelSounds
func (p *THVitalsTemplateSpec) GetBowelSounds() *THBowelSounds {
  if !p.IsSetBowelSounds() {
    return THVitalsTemplateSpec_BowelSounds_DEFAULT
  }
return p.BowelSounds
}
var THVitalsTemplateSpec_Pulses_DEFAULT *THPulses
func (p *THVitalsTemplateSpec) GetPulses() *THPulses {
  if !p.IsSetPulses() {
    return THVitalsTemplateSpec_Pulses_DEFAULT
  }
return p.Pulses
}
func (p *THVitalsTemplateSpec) IsSetRespiratoryRate() bool {
  return p.RespiratoryRate != nil
}

func (p *THVitalsTemplateSpec) IsSetSpO2() bool {
  return p.SpO2 != nil
}

func (p *THVitalsTemplateSpec) IsSetBloodPressure() bool {
  return p.BloodPressure != nil
}

func (p *THVitalsTemplateSpec) IsSetEtCO2() bool {
  return p.EtCO2 != nil
}

func (p *THVitalsTemplateSpec) IsSetTemperatureBlood() bool {
  return p.TemperatureBlood != nil
}

func (p *THVitalsTemplateSpec) IsSetTemperaturePeripheral() bool {
  return p.TemperaturePeripheral != nil
}

func (p *THVitalsTemplateSpec) IsSetEcg() bool {
  return p.Ecg != nil
}

func (p *THVitalsTemplateSpec) IsSetEyes() bool {
  return p.Eyes != nil
}

func (p *THVitalsTemplateSpec) IsSetAirwayObstruction() bool {
  return p.AirwayObstruction != nil
}

func (p *THVitalsTemplateSpec) IsSetLungSounds() bool {
  return p.LungSounds != nil
}

func (p *THVitalsTemplateSpec) IsSetHeartSounds() bool {
  return p.HeartSounds != nil
}

func (p *THVitalsTemplateSpec) IsSetBowelSounds() bool {
  return p.BowelSounds != nil
}

func (p *THVitalsTemplateSpec) IsSetPulses() bool {
  return p.Pulses != nil
}

func (p *THVitalsTemplateSpec) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *THVitalsTemplateSpec)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RespiratoryRate = &v
}
  return nil
}

func (p *THVitalsTemplateSpec)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SpO2 = &v
}
  return nil
}

func (p *THVitalsTemplateSpec)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.BloodPressure = &THBloodPressure{}
  if err := p.BloodPressure.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BloodPressure), err)
  }
  return nil
}

func (p *THVitalsTemplateSpec)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.EtCO2 = &v
}
  return nil
}

func (p *THVitalsTemplateSpec)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.TemperatureBlood = &v
}
  return nil
}

func (p *THVitalsTemplateSpec)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.TemperaturePeripheral = &v
}
  return nil
}

func (p *THVitalsTemplateSpec)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ecg = &THEcg{}
  if err := p.Ecg.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ecg), err)
  }
  return nil
}

func (p *THVitalsTemplateSpec)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  p.Eyes = &THEyes{}
  if err := p.Eyes.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Eyes), err)
  }
  return nil
}

func (p *THVitalsTemplateSpec)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  p.AirwayObstruction = &THAirwayObstruction{}
  if err := p.AirwayObstruction.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AirwayObstruction), err)
  }
  return nil
}

func (p *THVitalsTemplateSpec)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  p.LungSounds = &THLungSounds{}
  if err := p.LungSounds.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LungSounds), err)
  }
  return nil
}

func (p *THVitalsTemplateSpec)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  p.HeartSounds = &THHeartSounds{}
  if err := p.HeartSounds.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HeartSounds), err)
  }
  return nil
}

func (p *THVitalsTemplateSpec)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  p.BowelSounds = &THBowelSounds{}
  if err := p.BowelSounds.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BowelSounds), err)
  }
  return nil
}

func (p *THVitalsTemplateSpec)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  p.Pulses = &THPulses{}
  if err := p.Pulses.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Pulses), err)
  }
  return nil
}

func (p *THVitalsTemplateSpec) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "THVitalsTemplateSpec"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THVitalsTemplateSpec) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRespiratoryRate() {
    if err := oprot.WriteFieldBegin(ctx, "RespiratoryRate", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:RespiratoryRate: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.RespiratoryRate)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.RespiratoryRate (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:RespiratoryRate: ", p), err) }
  }
  return err
}

func (p *THVitalsTemplateSpec) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSpO2() {
    if err := oprot.WriteFieldBegin(ctx, "SpO2", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:SpO2: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.SpO2)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.SpO2 (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:SpO2: ", p), err) }
  }
  return err
}

func (p *THVitalsTemplateSpec) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBloodPressure() {
    if err := oprot.WriteFieldBegin(ctx, "BloodPressure", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:BloodPressure: ", p), err) }
    if err := p.BloodPressure.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BloodPressure), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:BloodPressure: ", p), err) }
  }
  return err
}

func (p *THVitalsTemplateSpec) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEtCO2() {
    if err := oprot.WriteFieldBegin(ctx, "EtCO2", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:EtCO2: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.EtCO2)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.EtCO2 (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:EtCO2: ", p), err) }
  }
  return err
}

func (p *THVitalsTemplateSpec) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTemperatureBlood() {
    if err := oprot.WriteFieldBegin(ctx, "TemperatureBlood", thrift.DOUBLE, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:TemperatureBlood: ", p), err) }
    if err := oprot.WriteDouble(ctx, float64(*p.TemperatureBlood)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.TemperatureBlood (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:TemperatureBlood: ", p), err) }
  }
  return err
}

func (p *THVitalsTemplateSpec) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTemperaturePeripheral() {
    if err := oprot.WriteFieldBegin(ctx, "TemperaturePeripheral", thrift.DOUBLE, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:TemperaturePeripheral: ", p), err) }
    if err := oprot.WriteDouble(ctx, float64(*p.TemperaturePeripheral)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.TemperaturePeripheral (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:TemperaturePeripheral: ", p), err) }
  }
  return err
}

func (p *THVitalsTemplateSpec) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEcg() {
    if err := oprot.WriteFieldBegin(ctx, "Ecg", thrift.STRUCT, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:Ecg: ", p), err) }
    if err := p.Ecg.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ecg), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:Ecg: ", p), err) }
  }
  return err
}

func (p *THVitalsTemplateSpec) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEyes() {
    if err := oprot.WriteFieldBegin(ctx, "Eyes", thrift.STRUCT, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:Eyes: ", p), err) }
    if err := p.Eyes.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Eyes), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:Eyes: ", p), err) }
  }
  return err
}

func (p *THVitalsTemplateSpec) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAirwayObstruction() {
    if err := oprot.WriteFieldBegin(ctx, "AirwayObstruction", thrift.STRUCT, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:AirwayObstruction: ", p), err) }
    if err := p.AirwayObstruction.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AirwayObstruction), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:AirwayObstruction: ", p), err) }
  }
  return err
}

func (p *THVitalsTemplateSpec) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLungSounds() {
    if err := oprot.WriteFieldBegin(ctx, "LungSounds", thrift.STRUCT, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:LungSounds: ", p), err) }
    if err := p.LungSounds.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LungSounds), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:LungSounds: ", p), err) }
  }
  return err
}

func (p *THVitalsTemplateSpec) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetHeartSounds() {
    if err := oprot.WriteFieldBegin(ctx, "HeartSounds", thrift.STRUCT, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:HeartSounds: ", p), err) }
    if err := p.HeartSounds.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HeartSounds), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:HeartSounds: ", p), err) }
  }
  return err
}

func (p *THVitalsTemplateSpec) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBowelSounds() {
    if err := oprot.WriteFieldBegin(ctx, "BowelSounds", thrift.STRUCT, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:BowelSounds: ", p), err) }
    if err := p.BowelSounds.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BowelSounds), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:BowelSounds: ", p), err) }
  }
  return err
}

func (p *THVitalsTemplateSpec) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPulses() {
    if err := oprot.WriteFieldBegin(ctx, "Pulses", thrift.STRUCT, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:Pulses: ", p), err) }
    if err := p.Pulses.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Pulses), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:Pulses: ", p), err) }
  }
  return err
}

func (p *THVitalsTemplateSpec) Equals(other *THVitalsTemplateSpec) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RespiratoryRate != other.RespiratoryRate {
    if p.RespiratoryRate == nil || other.RespiratoryRate == nil {
      return false
    }
    if (*p.RespiratoryRate) != (*other.RespiratoryRate) { return false }
  }
  if p.SpO2 != other.SpO2 {
    if p.SpO2 == nil || other.SpO2 == nil {
      return false
    }
    if (*p.SpO2) != (*other.SpO2) { return false }
  }
  if !p.BloodPressure.Equals(other.BloodPressure) { return false }
  if p.EtCO2 != other.EtCO2 {
    if p.EtCO2 == nil || other.EtCO2 == nil {
      return false
    }
    if (*p.EtCO2) != (*other.EtCO2) { return false }
  }
  if p.TemperatureBlood != other.TemperatureBlood {
    if p.TemperatureBlood == nil || other.TemperatureBlood == nil {
      return false
    }
    if (*p.TemperatureBlood) != (*other.TemperatureBlood) { return false }
  }
  if p.TemperaturePeripheral != other.TemperaturePeripheral {
    if p.TemperaturePeripheral == nil || other.TemperaturePeripheral == nil {
      return false
    }
    if (*p.TemperaturePeripheral) != (*other.TemperaturePeripheral) { return false }
  }
  if !p.Ecg.Equals(other.Ecg) { return false }
  if !p.Eyes.Equals(other.Eyes) { return false }
  if !p.AirwayObstruction.Equals(other.AirwayObstruction) { return false }
  if !p.LungSounds.Equals(other.LungSounds) { return false }
  if !p.HeartSounds.Equals(other.HeartSounds) { return false }
  if !p.BowelSounds.Equals(other.BowelSounds) { return false }
  if !p.Pulses.Equals(other.Pulses) { return false }
  return true
}

func (p *THVitalsTemplateSpec) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THVitalsTemplateSpec(%+v)", *p)
}

// Attributes:
//  - Systolic
//  - Diastolic
type THBloodPressure struct {
  Systolic *int64 `thrift:"Systolic,1" db:"Systolic" json:"Systolic,omitempty"`
  Diastolic *int64 `thrift:"Diastolic,2" db:"Diastolic" json:"Diastolic,omitempty"`
}

func NewTHBloodPressure() *THBloodPressure {
  return &THBloodPressure{}
}

var THBloodPressure_Systolic_DEFAULT int64
func (p *THBloodPressure) GetSystolic() int64 {
  if !p.IsSetSystolic() {
    return THBloodPressure_Systolic_DEFAULT
  }
return *p.Systolic
}
var THBloodPressure_Diastolic_DEFAULT int64
func (p *THBloodPressure) GetDiastolic() int64 {
  if !p.IsSetDiastolic() {
    return THBloodPressure_Diastolic_DEFAULT
  }
return *p.Diastolic
}
func (p *THBloodPressure) IsSetSystolic() bool {
  return p.Systolic != nil
}

func (p *THBloodPressure) IsSetDiastolic() bool {
  return p.Diastolic != nil
}

func (p *THBloodPressure) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *THBloodPressure)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Systolic = &v
}
  return nil
}

func (p *THBloodPressure)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Diastolic = &v
}
  return nil
}

func (p *THBloodPressure) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "THBloodPressure"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THBloodPressure) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSystolic() {
    if err := oprot.WriteFieldBegin(ctx, "Systolic", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Systolic: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Systolic)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.Systolic (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Systolic: ", p), err) }
  }
  return err
}

func (p *THBloodPressure) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDiastolic() {
    if err := oprot.WriteFieldBegin(ctx, "Diastolic", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Diastolic: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Diastolic)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.Diastolic (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Diastolic: ", p), err) }
  }
  return err
}

func (p *THBloodPressure) Equals(other *THBloodPressure) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Systolic != other.Systolic {
    if p.Systolic == nil || other.Systolic == nil {
      return false
    }
    if (*p.Systolic) != (*other.Systolic) { return false }
  }
  if p.Diastolic != other.Diastolic {
    if p.Diastolic == nil || other.Diastolic == nil {
      return false
    }
    if (*p.Diastolic) != (*other.Diastolic) { return false }
  }
  return true
}

func (p *THBloodPressure) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THBloodPressure(%+v)", *p)
}

// Attributes:
//  - HeartRate
//  - BasicRhythm
//  - Extrasystole
//  - Severity
//  - AllowPacing
//  - EmdPea
type THEcg struct {
  HeartRate *int64 `thrift:"HeartRate,1" db:"HeartRate" json:"HeartRate,omitempty"`
  BasicRhythm *string `thrift:"BasicRhythm,2" db:"BasicRhythm" json:"BasicRhythm,omitempty"`
  Extrasystole *THExtrasystole `thrift:"Extrasystole,3" db:"Extrasystole" json:"Extrasystole,omitempty"`
  Severity *int64 `thrift:"Severity,4" db:"Severity" json:"Severity,omitempty"`
  AllowPacing *bool `thrift:"AllowPacing,5" db:"AllowPacing" json:"AllowPacing,omitempty"`
  EmdPea *bool `thrift:"EmdPea,6" db:"EmdPea" json:"EmdPea,omitempty"`
}

func NewTHEcg() *THEcg {
  return &THEcg{}
}

var THEcg_HeartRate_DEFAULT int64
func (p *THEcg) GetHeartRate() int64 {
  if !p.IsSetHeartRate() {
    return THEcg_HeartRate_DEFAULT
  }
return *p.HeartRate
}
var THEcg_BasicRhythm_DEFAULT string
func (p *THEcg) GetBasicRhythm() string {
  if !p.IsSetBasicRhythm() {
    return THEcg_BasicRhythm_DEFAULT
  }
return *p.BasicRhythm
}
var THEcg_Extrasystole_DEFAULT *THExtrasystole
func (p *THEcg) GetExtrasystole() *THExtrasystole {
  if !p.IsSetExtrasystole() {
    return THEcg_Extrasystole_DEFAULT
  }
return p.Extrasystole
}
var THEcg_Severity_DEFAULT int64
func (p *THEcg) GetSeverity() int64 {
  if !p.IsSetSeverity() {
    return THEcg_Severity_DEFAULT
  }
return *p.Severity
}
var THEcg_AllowPacing_DEFAULT bool
func (p *THEcg) GetAllowPacing() bool {
  if !p.IsSetAllowPacing() {
    return THEcg_AllowPacing_DEFAULT
  }
return *p.AllowPacing
}
var THEcg_EmdPea_DEFAULT bool
func (p *THEcg) GetEmdPea() bool {
  if !p.IsSetEmdPea() {
    return THEcg_EmdPea_DEFAULT
  }
return *p.EmdPea
}
func (p *THEcg) IsSetHeartRate() bool {
  return p.HeartRate != nil
}

func (p *THEcg) IsSetBasicRhythm() bool {
  return p.BasicRhythm != nil
}

func (p *THEcg) IsSetExtrasystole() bool {
  return p.Extrasystole != nil
}

func (p *THEcg) IsSetSeverity() bool {
  return p.Severity != nil
}

func (p *THEcg) IsSetAllowPacing() bool {
  return p.AllowPacing != nil
}

func (p *THEcg) IsSetEmdPea() bool {
  return p.EmdPea != nil
}

func (p *THEcg) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *THEcg)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.HeartRate = &v
}
  return nil
}

func (p *THEcg)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.BasicRhythm = &v
}
  return nil
}

func (p *THEcg)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Extrasystole = &THExtrasystole{}
  if err := p.Extrasystole.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Extrasystole), err)
  }
  return nil
}

func (p *THEcg)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Severity = &v
}
  return nil
}

func (p *THEcg)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.AllowPacing = &v
}
  return nil
}

func (p *THEcg)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.EmdPea = &v
}
  return nil
}

func (p *THEcg) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "THEcg"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THEcg) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetHeartRate() {
    if err := oprot.WriteFieldBegin(ctx, "HeartRate", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:HeartRate: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.HeartRate)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.HeartRate (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:HeartRate: ", p), err) }
  }
  return err
}

func (p *THEcg) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBasicRhythm() {
    if err := oprot.WriteFieldBegin(ctx, "BasicRhythm", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:BasicRhythm: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.BasicRhythm)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.BasicRhythm (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:BasicRhythm: ", p), err) }
  }
  return err
}

func (p *THEcg) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExtrasystole() {
    if err := oprot.WriteFieldBegin(ctx, "Extrasystole", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Extrasystole: ", p), err) }
    if err := p.Extrasystole.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Extrasystole), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Extrasystole: ", p), err) }
  }
  return err
}

func (p *THEcg) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSeverity() {
    if err := oprot.WriteFieldBegin(ctx, "Severity", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Severity: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Severity)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.Severity (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Severity: ", p), err) }
  }
  return err
}

func (p *THEcg) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAllowPacing() {
    if err := oprot.WriteFieldBegin(ctx, "AllowPacing", thrift.BOOL, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:AllowPacing: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.AllowPacing)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.AllowPacing (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:AllowPacing: ", p), err) }
  }
  return err
}

func (p *THEcg) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEmdPea() {
    if err := oprot.WriteFieldBegin(ctx, "EmdPea", thrift.BOOL, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:EmdPea: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.EmdPea)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.EmdPea (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:EmdPea: ", p), err) }
  }
  return err
}

func (p *THEcg) Equals(other *THEcg) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.HeartRate != other.HeartRate {
    if p.HeartRate == nil || other.HeartRate == nil {
      return false
    }
    if (*p.HeartRate) != (*other.HeartRate) { return false }
  }
  if p.BasicRhythm != other.BasicRhythm {
    if p.BasicRhythm == nil || other.BasicRhythm == nil {
      return false
    }
    if (*p.BasicRhythm) != (*other.BasicRhythm) { return false }
  }
  if !p.Extrasystole.Equals(other.Extrasystole) { return false }
  if p.Severity != other.Severity {
    if p.Severity == nil || other.Severity == nil {
      return false
    }
    if (*p.Severity) != (*other.Severity) { return false }
  }
  if p.AllowPacing != other.AllowPacing {
    if p.AllowPacing == nil || other.AllowPacing == nil {
      return false
    }
    if (*p.AllowPacing) != (*other.AllowPacing) { return false }
  }
  if p.EmdPea != other.EmdPea {
    if p.EmdPea == nil || other.EmdPea == nil {
      return false
    }
    if (*p.EmdPea) != (*other.EmdPea) { return false }
  }
  return true
}

func (p *THEcg) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THEcg(%+v)", *p)
}

// Attributes:
//  - Type
//  - Probability
type THExtrasystole struct {
  Type *string `thrift:"Type,1" db:"Type" json:"Type,omitempty"`
  Probability *int64 `thrift:"Probability,2" db:"Probability" json:"Probability,omitempty"`
}

func NewTHExtrasystole() *THExtrasystole {
  return &THExtrasystole{}
}

var THExtrasystole_Type_DEFAULT string
func (p *THExtrasystole) GetType() string {
  if !p.IsSetType() {
    return THExtrasystole_Type_DEFAULT
  }
return *p.Type
}
var THExtrasystole_Probability_DEFAULT int64
func (p *THExtrasystole) GetProbability() int64 {
  if !p.IsSetProbability() {
    return THExtrasystole_Probability_DEFAULT
  }
return *p.Probability
}
func (p *THExtrasystole) IsSetType() bool {
  return p.Type != nil
}

func (p *THExtrasystole) IsSetProbability() bool {
  return p.Probability != nil
}

func (p *THExtrasystole) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *THExtrasystole)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Type = &v
}
  return nil
}

func (p *THExtrasystole)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Probability = &v
}
  return nil
}

func (p *THExtrasystole) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "THExtrasystole"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THExtrasystole) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetType() {
    if err := oprot.WriteFieldBegin(ctx, "Type", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Type: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Type)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.Type (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Type: ", p), err) }
  }
  return err
}

func (p *THExtrasystole) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetProbability() {
    if err := oprot.WriteFieldBegin(ctx, "Probability", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Probability: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Probability)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.Probability (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Probability: ", p), err) }
  }
  return err
}

func (p *THExtrasystole) Equals(other *THExtrasystole) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Type != other.Type {
    if p.Type == nil || other.Type == nil {
      return false
    }
    if (*p.Type) != (*other.Type) { return false }
  }
  if p.Probability != other.Probability {
    if p.Probability == nil || other.Probability == nil {
      return false
    }
    if (*p.Probability) != (*other.Probability) { return false }
  }
  return true
}

func (p *THExtrasystole) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THExtrasystole(%+v)", *p)
}

// Attributes:
//  - Left
//  - Right
//  - BlinkRate
type THEyes struct {
  Left *THEye `thrift:"Left,1" db:"Left" json:"Left,omitempty"`
  Right *THEye `thrift:"Right,2" db:"Right" json:"Right,omitempty"`
  BlinkRate *string `thrift:"BlinkRate,3" db:"BlinkRate" json:"BlinkRate,omitempty"`
}

func NewTHEyes() *THEyes {
  return &THEyes{}
}

var THEyes_Left_DEFAULT *THEye
func (p *THEyes) GetLeft() *THEye {
  if !p.IsSetLeft() {
    return THEyes_Left_DEFAULT
  }
return p.Left
}
var THEyes_Right_DEFAULT *THEye
func (p *THEyes) GetRight() *THEye {
  if !p.IsSetRight() {
    return THEyes_Right_DEFAULT
  }
return p.Right
}
var THEyes_BlinkRate_DEFAULT string
func (p *THEyes) GetBlinkRate() string {
  if !p.IsSetBlinkRate() {
    return THEyes_BlinkRate_DEFAULT
  }
return *p.BlinkRate
}
func (p *THEyes) IsSetLeft() bool {
  return p.Left != nil
}

func (p *THEyes) IsSetRight() bool {
  return p.Right != nil
}

func (p *THEyes) IsSetBlinkRate() bool {
  return p.BlinkRate != nil
}

func (p *THEyes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *THEyes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Left = &THEye{}
  if err := p.Left.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Left), err)
  }
  return nil
}

func (p *THEyes)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Right = &THEye{}
  if err := p.Right.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Right), err)
  }
  return nil
}

func (p *THEyes)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.BlinkRate = &v
}
  return nil
}

func (p *THEyes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "THEyes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THEyes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLeft() {
    if err := oprot.WriteFieldBegin(ctx, "Left", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Left: ", p), err) }
    if err := p.Left.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Left), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Left: ", p), err) }
  }
  return err
}

func (p *THEyes) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRight() {
    if err := oprot.WriteFieldBegin(ctx, "Right", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Right: ", p), err) }
    if err := p.Right.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Right), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Right: ", p), err) }
  }
  return err
}

func (p *THEyes) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBlinkRate() {
    if err := oprot.WriteFieldBegin(ctx, "BlinkRate", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:BlinkRate: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.BlinkRate)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.BlinkRate (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:BlinkRate: ", p), err) }
  }
  return err
}

func (p *THEyes) Equals(other *THEyes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Left.Equals(other.Left) { return false }
  if !p.Right.Equals(other.Right) { return false }
  if p.BlinkRate != other.BlinkRate {
    if p.BlinkRate == nil || other.BlinkRate == nil {
      return false
    }
    if (*p.BlinkRate) != (*other.BlinkRate) { return false }
  }
  return true
}

func (p *THEyes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THEyes(%+v)", *p)
}

// Attributes:
//  - Aortic
//  - AorticVolume
//  - Pulmonary
//  - PulmonaryVolume
//  - Tricuspid
//  - TricuspidVolume
//  - Mitral
//  - MitralVolume
type THHeartSounds struct {
  Aortic *string `thrift:"Aortic,1" db:"Aortic" json:"Aortic,omitempty"`
  AorticVolume *int64 `thrift:"AorticVolume,2" db:"AorticVolume" json:"AorticVolume,omitempty"`
  Pulmonary *string `thrift:"Pulmonary,3" db:"Pulmonary" json:"Pulmonary,omitempty"`
  PulmonaryVolume *int64 `thrift:"PulmonaryVolume,4" db:"PulmonaryVolume" json:"PulmonaryVolume,omitempty"`
  Tricuspid *string `thrift:"Tricuspid,5" db:"Tricuspid" json:"Tricuspid,omitempty"`
  TricuspidVolume *int64 `thrift:"TricuspidVolume,6" db:"TricuspidVolume" json:"TricuspidVolume,omitempty"`
  Mitral *string `thrift:"Mitral,7" db:"Mitral" json:"Mitral,omitempty"`
  MitralVolume *int64 `thrift:"MitralVolume,8" db:"MitralVolume" json:"MitralVolume,omitempty"`
}

func NewTHHeartSounds() *THHeartSounds {
  return &THHeartSounds{}
}

var THHeartSounds_Aortic_DEFAULT string
func (p *THHeartSounds) GetAortic() string {
  if !p.IsSetAortic() {
    return THHeartSounds_Aortic_DEFAULT
  }
return *p.Aortic
}
var THHeartSounds_AorticVolume_DEFAULT int64
func (p *THHeartSounds) GetAorticVolume() int64 {
  if !p.IsSetAorticVolume() {
    return THHeartSounds_AorticVolume_DEFAULT
  }
return *p.AorticVolume
}
var THHeartSounds_Pulmonary_DEFAULT string
func (p *THHeartSounds) GetPulmonary() string {
  if !p.IsSetPulmonary() {
    return THHeartSounds_Pulmonary_DEFAULT
  }
return *p.Pulmonary
}
var THHeartSounds_PulmonaryVolume_DEFAULT int64
func (p *THHeartSounds) GetPulmonaryVolume() int64 {
  if !p.IsSetPulmonaryVolume() {
    return THHeartSounds_PulmonaryVolume_DEFAULT
  }
return *p.PulmonaryVolume
}
var THHeartSounds_Tricuspid_DEFAULT string
func (p *THHeartSounds) GetTricuspid() string {
  if !p.IsSetTricuspid() {
    return THHeartSounds_Tricuspid_DEFAULT
  }
return *p.Tricuspid
}
var THHeartSounds_TricuspidVolume_DEFAULT int64
func (p *THHeartSounds) GetTricuspidVolume() int64 {
  if !p.IsSetTricuspidVolume() {
    return THHeartSounds_TricuspidVolume_DEFAULT
  }
return *p.TricuspidVolume
}
var THHeartSounds_Mitral_DEFAULT string
func (p *THHeartSounds) GetMitral() string {
  if !p.IsSetMitral() {
    return THHeartSounds_Mitral_DEFAULT
  }
return *p.Mitral
}
var THHeartSounds_MitralVolume_DEFAULT int64
func (p *THHeartSounds) GetMitralVolume() int64 {
  if !p.IsSetMitralVolume() {
    return THHeartSounds_MitralVolume_DEFAULT
  }
return *p.MitralVolume
}
func (p *THHeartSounds) IsSetAortic() bool {
  return p.Aortic != nil
}

func (p *THHeartSounds) IsSetAorticVolume() bool {
  return p.AorticVolume != nil
}

func (p *THHeartSounds) IsSetPulmonary() bool {
  return p.Pulmonary != nil
}

func (p *THHeartSounds) IsSetPulmonaryVolume() bool {
  return p.PulmonaryVolume != nil
}

func (p *THHeartSounds) IsSetTricuspid() bool {
  return p.Tricuspid != nil
}

func (p *THHeartSounds) IsSetTricuspidVolume() bool {
  return p.TricuspidVolume != nil
}

func (p *THHeartSounds) IsSetMitral() bool {
  return p.Mitral != nil
}

func (p *THHeartSounds) IsSetMitralVolume() bool {
  return p.MitralVolume != nil
}

func (p *THHeartSounds) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *THHeartSounds)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Aortic = &v
}
  return nil
}

func (p *THHeartSounds)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AorticVolume = &v
}
  return nil
}

func (p *THHeartSounds)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Pulmonary = &v
}
  return nil
}

func (p *THHeartSounds)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PulmonaryVolume = &v
}
  return nil
}

func (p *THHeartSounds)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Tricuspid = &v
}
  return nil
}

func (p *THHeartSounds)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.TricuspidVolume = &v
}
  return nil
}

func (p *THHeartSounds)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Mitral = &v
}
  return nil
}

func (p *THHeartSounds)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.MitralVolume = &v
}
  return nil
}

func (p *THHeartSounds) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "THHeartSounds"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THHeartSounds) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAortic() {
    if err := oprot.WriteFieldBegin(ctx, "Aortic", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Aortic: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Aortic)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.Aortic (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Aortic: ", p), err) }
  }
  return err
}

func (p *THHeartSounds) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAorticVolume() {
    if err := oprot.WriteFieldBegin(ctx, "AorticVolume", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:AorticVolume: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.AorticVolume)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.AorticVolume (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:AorticVolume: ", p), err) }
  }
  return err
}

func (p *THHeartSounds) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPulmonary() {
    if err := oprot.WriteFieldBegin(ctx, "Pulmonary", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Pulmonary: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Pulmonary)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.Pulmonary (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Pulmonary: ", p), err) }
  }
  return err
}

func (p *THHeartSounds) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPulmonaryVolume() {
    if err := oprot.WriteFieldBegin(ctx, "PulmonaryVolume", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:PulmonaryVolume: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.PulmonaryVolume)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.PulmonaryVolume (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:PulmonaryVolume: ", p), err) }
  }
  return err
}

func (p *THHeartSounds) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTricuspid() {
    if err := oprot.WriteFieldBegin(ctx, "Tricuspid", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Tricuspid: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Tricuspid)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.Tricuspid (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Tricuspid: ", p), err) }
  }
  return err
}

func (p *THHeartSounds) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTricuspidVolume() {
    if err := oprot.WriteFieldBegin(ctx, "TricuspidVolume", thrift.I64, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:TricuspidVolume: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.TricuspidVolume)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.TricuspidVolume (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:TricuspidVolume: ", p), err) }
  }
  return err
}

func (p *THHeartSounds) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMitral() {
    if err := oprot.WriteFieldBegin(ctx, "Mitral", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:Mitral: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Mitral)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.Mitral (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:Mitral: ", p), err) }
  }
  return err
}

func (p *THHeartSounds) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMitralVolume() {
    if err := oprot.WriteFieldBegin(ctx, "MitralVolume", thrift.I64, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:MitralVolume: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.MitralVolume)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.MitralVolume (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:MitralVolume: ", p), err) }
  }
  return err
}

func (p *THHeartSounds) Equals(other *THHeartSounds) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Aortic != other.Aortic {
    if p.Aortic == nil || other.Aortic == nil {
      return false
    }
    if (*p.Aortic) != (*other.Aortic) { return false }
  }
  if p.AorticVolume != other.AorticVolume {
    if p.AorticVolume == nil || other.AorticVolume == nil {
      return false
    }
    if (*p.AorticVolume) != (*other.AorticVolume) { return false }
  }
  if p.Pulmonary != other.Pulmonary {
    if p.Pulmonary == nil || other.Pulmonary == nil {
      return false
    }
    if (*p.Pulmonary) != (*other.Pulmonary) { return false }
  }
  if p.PulmonaryVolume != other.PulmonaryVolume {
    if p.PulmonaryVolume == nil || other.PulmonaryVolume == nil {
      return false
    }
    if (*p.PulmonaryVolume) != (*other.PulmonaryVolume) { return false }
  }
  if p.Tricuspid != other.Tricuspid {
    if p.Tricuspid == nil || other.Tricuspid == nil {
      return false
    }
    if (*p.Tricuspid) != (*other.Tricuspid) { return false }
  }
  if p.TricuspidVolume != other.TricuspidVolume {
    if p.TricuspidVolume == nil || other.TricuspidVolume == nil {
      return false
    }
    if (*p.TricuspidVolume) != (*other.TricuspidVolume) { return false }
  }
  if p.Mitral != other.Mitral {
    if p.Mitral == nil || other.Mitral == nil {
      return false
    }
    if (*p.Mitral) != (*other.Mitral) { return false }
  }
  if p.MitralVolume != other.MitralVolume {
    if p.MitralVolume == nil || other.MitralVolume == nil {
      return false
    }
    if (*p.MitralVolume) != (*other.MitralVolume) { return false }
  }
  return true
}

func (p *THHeartSounds) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THHeartSounds(%+v)", *p)
}

// Attributes:
//  - EyelidPosition
//  - PupilSize
//  - PupilResponsiveness
type THEye struct {
  EyelidPosition *string `thrift:"EyelidPosition,1" db:"EyelidPosition" json:"EyelidPosition,omitempty"`
  PupilSize *int64 `thrift:"PupilSize,2" db:"PupilSize" json:"PupilSize,omitempty"`
  PupilResponsiveness *string `thrift:"PupilResponsiveness,3" db:"PupilResponsiveness" json:"PupilResponsiveness,omitempty"`
}

func NewTHEye() *THEye {
  return &THEye{}
}

var THEye_EyelidPosition_DEFAULT string
func (p *THEye) GetEyelidPosition() string {
  if !p.IsSetEyelidPosition() {
    return THEye_EyelidPosition_DEFAULT
  }
return *p.EyelidPosition
}
var THEye_PupilSize_DEFAULT int64
func (p *THEye) GetPupilSize() int64 {
  if !p.IsSetPupilSize() {
    return THEye_PupilSize_DEFAULT
  }
return *p.PupilSize
}
var THEye_PupilResponsiveness_DEFAULT string
func (p *THEye) GetPupilResponsiveness() string {
  if !p.IsSetPupilResponsiveness() {
    return THEye_PupilResponsiveness_DEFAULT
  }
return *p.PupilResponsiveness
}
func (p *THEye) IsSetEyelidPosition() bool {
  return p.EyelidPosition != nil
}

func (p *THEye) IsSetPupilSize() bool {
  return p.PupilSize != nil
}

func (p *THEye) IsSetPupilResponsiveness() bool {
  return p.PupilResponsiveness != nil
}

func (p *THEye) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *THEye)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.EyelidPosition = &v
}
  return nil
}

func (p *THEye)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PupilSize = &v
}
  return nil
}

func (p *THEye)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PupilResponsiveness = &v
}
  return nil
}

func (p *THEye) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "THEye"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THEye) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEyelidPosition() {
    if err := oprot.WriteFieldBegin(ctx, "EyelidPosition", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:EyelidPosition: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.EyelidPosition)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.EyelidPosition (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:EyelidPosition: ", p), err) }
  }
  return err
}

func (p *THEye) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPupilSize() {
    if err := oprot.WriteFieldBegin(ctx, "PupilSize", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:PupilSize: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.PupilSize)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.PupilSize (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:PupilSize: ", p), err) }
  }
  return err
}

func (p *THEye) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPupilResponsiveness() {
    if err := oprot.WriteFieldBegin(ctx, "PupilResponsiveness", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:PupilResponsiveness: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.PupilResponsiveness)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.PupilResponsiveness (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:PupilResponsiveness: ", p), err) }
  }
  return err
}

func (p *THEye) Equals(other *THEye) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.EyelidPosition != other.EyelidPosition {
    if p.EyelidPosition == nil || other.EyelidPosition == nil {
      return false
    }
    if (*p.EyelidPosition) != (*other.EyelidPosition) { return false }
  }
  if p.PupilSize != other.PupilSize {
    if p.PupilSize == nil || other.PupilSize == nil {
      return false
    }
    if (*p.PupilSize) != (*other.PupilSize) { return false }
  }
  if p.PupilResponsiveness != other.PupilResponsiveness {
    if p.PupilResponsiveness == nil || other.PupilResponsiveness == nil {
      return false
    }
    if (*p.PupilResponsiveness) != (*other.PupilResponsiveness) { return false }
  }
  return true
}

func (p *THEye) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THEye(%+v)", *p)
}

// Attributes:
//  - TongueEdema
type THAirwayObstruction struct {
  TongueEdema *string `thrift:"TongueEdema,1" db:"TongueEdema" json:"TongueEdema,omitempty"`
}

func NewTHAirwayObstruction() *THAirwayObstruction {
  return &THAirwayObstruction{}
}

var THAirwayObstruction_TongueEdema_DEFAULT string
func (p *THAirwayObstruction) GetTongueEdema() string {
  if !p.IsSetTongueEdema() {
    return THAirwayObstruction_TongueEdema_DEFAULT
  }
return *p.TongueEdema
}
func (p *THAirwayObstruction) IsSetTongueEdema() bool {
  return p.TongueEdema != nil
}

func (p *THAirwayObstruction) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *THAirwayObstruction)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TongueEdema = &v
}
  return nil
}

func (p *THAirwayObstruction) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "THAirwayObstruction"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THAirwayObstruction) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTongueEdema() {
    if err := oprot.WriteFieldBegin(ctx, "TongueEdema", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:TongueEdema: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.TongueEdema)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.TongueEdema (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:TongueEdema: ", p), err) }
  }
  return err
}

func (p *THAirwayObstruction) Equals(other *THAirwayObstruction) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.TongueEdema != other.TongueEdema {
    if p.TongueEdema == nil || other.TongueEdema == nil {
      return false
    }
    if (*p.TongueEdema) != (*other.TongueEdema) { return false }
  }
  return true
}

func (p *THAirwayObstruction) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THAirwayObstruction(%+v)", *p)
}

// Attributes:
//  - Left
//  - Right
type THLungSounds struct {
  Left *THSingleLungSounds `thrift:"Left,1" db:"Left" json:"Left,omitempty"`
  Right *THSingleLungSounds `thrift:"Right,2" db:"Right" json:"Right,omitempty"`
}

func NewTHLungSounds() *THLungSounds {
  return &THLungSounds{}
}

var THLungSounds_Left_DEFAULT *THSingleLungSounds
func (p *THLungSounds) GetLeft() *THSingleLungSounds {
  if !p.IsSetLeft() {
    return THLungSounds_Left_DEFAULT
  }
return p.Left
}
var THLungSounds_Right_DEFAULT *THSingleLungSounds
func (p *THLungSounds) GetRight() *THSingleLungSounds {
  if !p.IsSetRight() {
    return THLungSounds_Right_DEFAULT
  }
return p.Right
}
func (p *THLungSounds) IsSetLeft() bool {
  return p.Left != nil
}

func (p *THLungSounds) IsSetRight() bool {
  return p.Right != nil
}

func (p *THLungSounds) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *THLungSounds)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Left = &THSingleLungSounds{}
  if err := p.Left.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Left), err)
  }
  return nil
}

func (p *THLungSounds)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Right = &THSingleLungSounds{}
  if err := p.Right.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Right), err)
  }
  return nil
}

func (p *THLungSounds) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "THLungSounds"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THLungSounds) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLeft() {
    if err := oprot.WriteFieldBegin(ctx, "Left", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Left: ", p), err) }
    if err := p.Left.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Left), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Left: ", p), err) }
  }
  return err
}

func (p *THLungSounds) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRight() {
    if err := oprot.WriteFieldBegin(ctx, "Right", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Right: ", p), err) }
    if err := p.Right.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Right), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Right: ", p), err) }
  }
  return err
}

func (p *THLungSounds) Equals(other *THLungSounds) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Left.Equals(other.Left) { return false }
  if !p.Right.Equals(other.Right) { return false }
  return true
}

func (p *THLungSounds) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THLungSounds(%+v)", *p)
}

// Attributes:
//  - Aortic
//  - AorticVolume
//  - Pulmonary
//  - PulmonaryVolume
//  - Tricuspid
//  - TricuspidVolume
//  - Mitral
//  - MitralVolume
type THstring struct {
  Aortic *string `thrift:"Aortic,1" db:"Aortic" json:"Aortic,omitempty"`
  AorticVolume *int64 `thrift:"AorticVolume,2" db:"AorticVolume" json:"AorticVolume,omitempty"`
  Pulmonary *string `thrift:"Pulmonary,3" db:"Pulmonary" json:"Pulmonary,omitempty"`
  PulmonaryVolume *int64 `thrift:"PulmonaryVolume,4" db:"PulmonaryVolume" json:"PulmonaryVolume,omitempty"`
  Tricuspid *string `thrift:"Tricuspid,5" db:"Tricuspid" json:"Tricuspid,omitempty"`
  TricuspidVolume *int64 `thrift:"TricuspidVolume,6" db:"TricuspidVolume" json:"TricuspidVolume,omitempty"`
  Mitral *string `thrift:"Mitral,7" db:"Mitral" json:"Mitral,omitempty"`
  MitralVolume *int64 `thrift:"MitralVolume,8" db:"MitralVolume" json:"MitralVolume,omitempty"`
}

func NewTHstring() *THstring {
  return &THstring{}
}

var THstring_Aortic_DEFAULT string
func (p *THstring) GetAortic() string {
  if !p.IsSetAortic() {
    return THstring_Aortic_DEFAULT
  }
return *p.Aortic
}
var THstring_AorticVolume_DEFAULT int64
func (p *THstring) GetAorticVolume() int64 {
  if !p.IsSetAorticVolume() {
    return THstring_AorticVolume_DEFAULT
  }
return *p.AorticVolume
}
var THstring_Pulmonary_DEFAULT string
func (p *THstring) GetPulmonary() string {
  if !p.IsSetPulmonary() {
    return THstring_Pulmonary_DEFAULT
  }
return *p.Pulmonary
}
var THstring_PulmonaryVolume_DEFAULT int64
func (p *THstring) GetPulmonaryVolume() int64 {
  if !p.IsSetPulmonaryVolume() {
    return THstring_PulmonaryVolume_DEFAULT
  }
return *p.PulmonaryVolume
}
var THstring_Tricuspid_DEFAULT string
func (p *THstring) GetTricuspid() string {
  if !p.IsSetTricuspid() {
    return THstring_Tricuspid_DEFAULT
  }
return *p.Tricuspid
}
var THstring_TricuspidVolume_DEFAULT int64
func (p *THstring) GetTricuspidVolume() int64 {
  if !p.IsSetTricuspidVolume() {
    return THstring_TricuspidVolume_DEFAULT
  }
return *p.TricuspidVolume
}
var THstring_Mitral_DEFAULT string
func (p *THstring) GetMitral() string {
  if !p.IsSetMitral() {
    return THstring_Mitral_DEFAULT
  }
return *p.Mitral
}
var THstring_MitralVolume_DEFAULT int64
func (p *THstring) GetMitralVolume() int64 {
  if !p.IsSetMitralVolume() {
    return THstring_MitralVolume_DEFAULT
  }
return *p.MitralVolume
}
func (p *THstring) IsSetAortic() bool {
  return p.Aortic != nil
}

func (p *THstring) IsSetAorticVolume() bool {
  return p.AorticVolume != nil
}

func (p *THstring) IsSetPulmonary() bool {
  return p.Pulmonary != nil
}

func (p *THstring) IsSetPulmonaryVolume() bool {
  return p.PulmonaryVolume != nil
}

func (p *THstring) IsSetTricuspid() bool {
  return p.Tricuspid != nil
}

func (p *THstring) IsSetTricuspidVolume() bool {
  return p.TricuspidVolume != nil
}

func (p *THstring) IsSetMitral() bool {
  return p.Mitral != nil
}

func (p *THstring) IsSetMitralVolume() bool {
  return p.MitralVolume != nil
}

func (p *THstring) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *THstring)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Aortic = &v
}
  return nil
}

func (p *THstring)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AorticVolume = &v
}
  return nil
}

func (p *THstring)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Pulmonary = &v
}
  return nil
}

func (p *THstring)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PulmonaryVolume = &v
}
  return nil
}

func (p *THstring)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Tricuspid = &v
}
  return nil
}

func (p *THstring)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.TricuspidVolume = &v
}
  return nil
}

func (p *THstring)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Mitral = &v
}
  return nil
}

func (p *THstring)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.MitralVolume = &v
}
  return nil
}

func (p *THstring) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "THstring"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THstring) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAortic() {
    if err := oprot.WriteFieldBegin(ctx, "Aortic", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Aortic: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Aortic)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.Aortic (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Aortic: ", p), err) }
  }
  return err
}

func (p *THstring) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAorticVolume() {
    if err := oprot.WriteFieldBegin(ctx, "AorticVolume", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:AorticVolume: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.AorticVolume)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.AorticVolume (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:AorticVolume: ", p), err) }
  }
  return err
}

func (p *THstring) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPulmonary() {
    if err := oprot.WriteFieldBegin(ctx, "Pulmonary", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Pulmonary: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Pulmonary)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.Pulmonary (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Pulmonary: ", p), err) }
  }
  return err
}

func (p *THstring) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPulmonaryVolume() {
    if err := oprot.WriteFieldBegin(ctx, "PulmonaryVolume", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:PulmonaryVolume: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.PulmonaryVolume)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.PulmonaryVolume (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:PulmonaryVolume: ", p), err) }
  }
  return err
}

func (p *THstring) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTricuspid() {
    if err := oprot.WriteFieldBegin(ctx, "Tricuspid", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Tricuspid: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Tricuspid)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.Tricuspid (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Tricuspid: ", p), err) }
  }
  return err
}

func (p *THstring) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTricuspidVolume() {
    if err := oprot.WriteFieldBegin(ctx, "TricuspidVolume", thrift.I64, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:TricuspidVolume: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.TricuspidVolume)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.TricuspidVolume (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:TricuspidVolume: ", p), err) }
  }
  return err
}

func (p *THstring) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMitral() {
    if err := oprot.WriteFieldBegin(ctx, "Mitral", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:Mitral: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Mitral)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.Mitral (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:Mitral: ", p), err) }
  }
  return err
}

func (p *THstring) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMitralVolume() {
    if err := oprot.WriteFieldBegin(ctx, "MitralVolume", thrift.I64, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:MitralVolume: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.MitralVolume)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.MitralVolume (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:MitralVolume: ", p), err) }
  }
  return err
}

func (p *THstring) Equals(other *THstring) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Aortic != other.Aortic {
    if p.Aortic == nil || other.Aortic == nil {
      return false
    }
    if (*p.Aortic) != (*other.Aortic) { return false }
  }
  if p.AorticVolume != other.AorticVolume {
    if p.AorticVolume == nil || other.AorticVolume == nil {
      return false
    }
    if (*p.AorticVolume) != (*other.AorticVolume) { return false }
  }
  if p.Pulmonary != other.Pulmonary {
    if p.Pulmonary == nil || other.Pulmonary == nil {
      return false
    }
    if (*p.Pulmonary) != (*other.Pulmonary) { return false }
  }
  if p.PulmonaryVolume != other.PulmonaryVolume {
    if p.PulmonaryVolume == nil || other.PulmonaryVolume == nil {
      return false
    }
    if (*p.PulmonaryVolume) != (*other.PulmonaryVolume) { return false }
  }
  if p.Tricuspid != other.Tricuspid {
    if p.Tricuspid == nil || other.Tricuspid == nil {
      return false
    }
    if (*p.Tricuspid) != (*other.Tricuspid) { return false }
  }
  if p.TricuspidVolume != other.TricuspidVolume {
    if p.TricuspidVolume == nil || other.TricuspidVolume == nil {
      return false
    }
    if (*p.TricuspidVolume) != (*other.TricuspidVolume) { return false }
  }
  if p.Mitral != other.Mitral {
    if p.Mitral == nil || other.Mitral == nil {
      return false
    }
    if (*p.Mitral) != (*other.Mitral) { return false }
  }
  if p.MitralVolume != other.MitralVolume {
    if p.MitralVolume == nil || other.MitralVolume == nil {
      return false
    }
    if (*p.MitralVolume) != (*other.MitralVolume) { return false }
  }
  return true
}

func (p *THstring) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THstring(%+v)", *p)
}

// Attributes:
//  - AnteriorUpper
//  - AnteriorUpperVolume
//  - AnteriorLower
//  - AnteriorLowerVolume
//  - AnteriorMiddle
//  - AnteriorMiddleVolume
//  - PosteriorUpper
//  - PosteriorUpperVolume
//  - PosteriorLower
//  - PosteriorLowerVolume
type THSingleLungSounds struct {
  AnteriorUpper *string `thrift:"AnteriorUpper,1" db:"AnteriorUpper" json:"AnteriorUpper,omitempty"`
  AnteriorUpperVolume *int64 `thrift:"AnteriorUpperVolume,2" db:"AnteriorUpperVolume" json:"AnteriorUpperVolume,omitempty"`
  AnteriorLower *string `thrift:"AnteriorLower,3" db:"AnteriorLower" json:"AnteriorLower,omitempty"`
  AnteriorLowerVolume *int64 `thrift:"AnteriorLowerVolume,4" db:"AnteriorLowerVolume" json:"AnteriorLowerVolume,omitempty"`
  AnteriorMiddle *string `thrift:"AnteriorMiddle,5" db:"AnteriorMiddle" json:"AnteriorMiddle,omitempty"`
  AnteriorMiddleVolume *int64 `thrift:"AnteriorMiddleVolume,6" db:"AnteriorMiddleVolume" json:"AnteriorMiddleVolume,omitempty"`
  PosteriorUpper *string `thrift:"PosteriorUpper,7" db:"PosteriorUpper" json:"PosteriorUpper,omitempty"`
  PosteriorUpperVolume *int64 `thrift:"PosteriorUpperVolume,8" db:"PosteriorUpperVolume" json:"PosteriorUpperVolume,omitempty"`
  PosteriorLower *string `thrift:"PosteriorLower,9" db:"PosteriorLower" json:"PosteriorLower,omitempty"`
  PosteriorLowerVolume *int64 `thrift:"PosteriorLowerVolume,10" db:"PosteriorLowerVolume" json:"PosteriorLowerVolume,omitempty"`
}

func NewTHSingleLungSounds() *THSingleLungSounds {
  return &THSingleLungSounds{}
}

var THSingleLungSounds_AnteriorUpper_DEFAULT string
func (p *THSingleLungSounds) GetAnteriorUpper() string {
  if !p.IsSetAnteriorUpper() {
    return THSingleLungSounds_AnteriorUpper_DEFAULT
  }
return *p.AnteriorUpper
}
var THSingleLungSounds_AnteriorUpperVolume_DEFAULT int64
func (p *THSingleLungSounds) GetAnteriorUpperVolume() int64 {
  if !p.IsSetAnteriorUpperVolume() {
    return THSingleLungSounds_AnteriorUpperVolume_DEFAULT
  }
return *p.AnteriorUpperVolume
}
var THSingleLungSounds_AnteriorLower_DEFAULT string
func (p *THSingleLungSounds) GetAnteriorLower() string {
  if !p.IsSetAnteriorLower() {
    return THSingleLungSounds_AnteriorLower_DEFAULT
  }
return *p.AnteriorLower
}
var THSingleLungSounds_AnteriorLowerVolume_DEFAULT int64
func (p *THSingleLungSounds) GetAnteriorLowerVolume() int64 {
  if !p.IsSetAnteriorLowerVolume() {
    return THSingleLungSounds_AnteriorLowerVolume_DEFAULT
  }
return *p.AnteriorLowerVolume
}
var THSingleLungSounds_AnteriorMiddle_DEFAULT string
func (p *THSingleLungSounds) GetAnteriorMiddle() string {
  if !p.IsSetAnteriorMiddle() {
    return THSingleLungSounds_AnteriorMiddle_DEFAULT
  }
return *p.AnteriorMiddle
}
var THSingleLungSounds_AnteriorMiddleVolume_DEFAULT int64
func (p *THSingleLungSounds) GetAnteriorMiddleVolume() int64 {
  if !p.IsSetAnteriorMiddleVolume() {
    return THSingleLungSounds_AnteriorMiddleVolume_DEFAULT
  }
return *p.AnteriorMiddleVolume
}
var THSingleLungSounds_PosteriorUpper_DEFAULT string
func (p *THSingleLungSounds) GetPosteriorUpper() string {
  if !p.IsSetPosteriorUpper() {
    return THSingleLungSounds_PosteriorUpper_DEFAULT
  }
return *p.PosteriorUpper
}
var THSingleLungSounds_PosteriorUpperVolume_DEFAULT int64
func (p *THSingleLungSounds) GetPosteriorUpperVolume() int64 {
  if !p.IsSetPosteriorUpperVolume() {
    return THSingleLungSounds_PosteriorUpperVolume_DEFAULT
  }
return *p.PosteriorUpperVolume
}
var THSingleLungSounds_PosteriorLower_DEFAULT string
func (p *THSingleLungSounds) GetPosteriorLower() string {
  if !p.IsSetPosteriorLower() {
    return THSingleLungSounds_PosteriorLower_DEFAULT
  }
return *p.PosteriorLower
}
var THSingleLungSounds_PosteriorLowerVolume_DEFAULT int64
func (p *THSingleLungSounds) GetPosteriorLowerVolume() int64 {
  if !p.IsSetPosteriorLowerVolume() {
    return THSingleLungSounds_PosteriorLowerVolume_DEFAULT
  }
return *p.PosteriorLowerVolume
}
func (p *THSingleLungSounds) IsSetAnteriorUpper() bool {
  return p.AnteriorUpper != nil
}

func (p *THSingleLungSounds) IsSetAnteriorUpperVolume() bool {
  return p.AnteriorUpperVolume != nil
}

func (p *THSingleLungSounds) IsSetAnteriorLower() bool {
  return p.AnteriorLower != nil
}

func (p *THSingleLungSounds) IsSetAnteriorLowerVolume() bool {
  return p.AnteriorLowerVolume != nil
}

func (p *THSingleLungSounds) IsSetAnteriorMiddle() bool {
  return p.AnteriorMiddle != nil
}

func (p *THSingleLungSounds) IsSetAnteriorMiddleVolume() bool {
  return p.AnteriorMiddleVolume != nil
}

func (p *THSingleLungSounds) IsSetPosteriorUpper() bool {
  return p.PosteriorUpper != nil
}

func (p *THSingleLungSounds) IsSetPosteriorUpperVolume() bool {
  return p.PosteriorUpperVolume != nil
}

func (p *THSingleLungSounds) IsSetPosteriorLower() bool {
  return p.PosteriorLower != nil
}

func (p *THSingleLungSounds) IsSetPosteriorLowerVolume() bool {
  return p.PosteriorLowerVolume != nil
}

func (p *THSingleLungSounds) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *THSingleLungSounds)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AnteriorUpper = &v
}
  return nil
}

func (p *THSingleLungSounds)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AnteriorUpperVolume = &v
}
  return nil
}

func (p *THSingleLungSounds)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AnteriorLower = &v
}
  return nil
}

func (p *THSingleLungSounds)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.AnteriorLowerVolume = &v
}
  return nil
}

func (p *THSingleLungSounds)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.AnteriorMiddle = &v
}
  return nil
}

func (p *THSingleLungSounds)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.AnteriorMiddleVolume = &v
}
  return nil
}

func (p *THSingleLungSounds)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.PosteriorUpper = &v
}
  return nil
}

func (p *THSingleLungSounds)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.PosteriorUpperVolume = &v
}
  return nil
}

func (p *THSingleLungSounds)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.PosteriorLower = &v
}
  return nil
}

func (p *THSingleLungSounds)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.PosteriorLowerVolume = &v
}
  return nil
}

func (p *THSingleLungSounds) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "THSingleLungSounds"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THSingleLungSounds) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAnteriorUpper() {
    if err := oprot.WriteFieldBegin(ctx, "AnteriorUpper", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:AnteriorUpper: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.AnteriorUpper)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.AnteriorUpper (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:AnteriorUpper: ", p), err) }
  }
  return err
}

func (p *THSingleLungSounds) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAnteriorUpperVolume() {
    if err := oprot.WriteFieldBegin(ctx, "AnteriorUpperVolume", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:AnteriorUpperVolume: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.AnteriorUpperVolume)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.AnteriorUpperVolume (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:AnteriorUpperVolume: ", p), err) }
  }
  return err
}

func (p *THSingleLungSounds) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAnteriorLower() {
    if err := oprot.WriteFieldBegin(ctx, "AnteriorLower", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:AnteriorLower: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.AnteriorLower)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.AnteriorLower (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:AnteriorLower: ", p), err) }
  }
  return err
}

func (p *THSingleLungSounds) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAnteriorLowerVolume() {
    if err := oprot.WriteFieldBegin(ctx, "AnteriorLowerVolume", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:AnteriorLowerVolume: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.AnteriorLowerVolume)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.AnteriorLowerVolume (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:AnteriorLowerVolume: ", p), err) }
  }
  return err
}

func (p *THSingleLungSounds) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAnteriorMiddle() {
    if err := oprot.WriteFieldBegin(ctx, "AnteriorMiddle", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:AnteriorMiddle: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.AnteriorMiddle)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.AnteriorMiddle (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:AnteriorMiddle: ", p), err) }
  }
  return err
}

func (p *THSingleLungSounds) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAnteriorMiddleVolume() {
    if err := oprot.WriteFieldBegin(ctx, "AnteriorMiddleVolume", thrift.I64, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:AnteriorMiddleVolume: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.AnteriorMiddleVolume)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.AnteriorMiddleVolume (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:AnteriorMiddleVolume: ", p), err) }
  }
  return err
}

func (p *THSingleLungSounds) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPosteriorUpper() {
    if err := oprot.WriteFieldBegin(ctx, "PosteriorUpper", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:PosteriorUpper: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.PosteriorUpper)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.PosteriorUpper (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:PosteriorUpper: ", p), err) }
  }
  return err
}

func (p *THSingleLungSounds) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPosteriorUpperVolume() {
    if err := oprot.WriteFieldBegin(ctx, "PosteriorUpperVolume", thrift.I64, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:PosteriorUpperVolume: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.PosteriorUpperVolume)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.PosteriorUpperVolume (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:PosteriorUpperVolume: ", p), err) }
  }
  return err
}

func (p *THSingleLungSounds) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPosteriorLower() {
    if err := oprot.WriteFieldBegin(ctx, "PosteriorLower", thrift.STRING, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:PosteriorLower: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.PosteriorLower)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.PosteriorLower (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:PosteriorLower: ", p), err) }
  }
  return err
}

func (p *THSingleLungSounds) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPosteriorLowerVolume() {
    if err := oprot.WriteFieldBegin(ctx, "PosteriorLowerVolume", thrift.I64, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:PosteriorLowerVolume: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.PosteriorLowerVolume)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.PosteriorLowerVolume (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:PosteriorLowerVolume: ", p), err) }
  }
  return err
}

func (p *THSingleLungSounds) Equals(other *THSingleLungSounds) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AnteriorUpper != other.AnteriorUpper {
    if p.AnteriorUpper == nil || other.AnteriorUpper == nil {
      return false
    }
    if (*p.AnteriorUpper) != (*other.AnteriorUpper) { return false }
  }
  if p.AnteriorUpperVolume != other.AnteriorUpperVolume {
    if p.AnteriorUpperVolume == nil || other.AnteriorUpperVolume == nil {
      return false
    }
    if (*p.AnteriorUpperVolume) != (*other.AnteriorUpperVolume) { return false }
  }
  if p.AnteriorLower != other.AnteriorLower {
    if p.AnteriorLower == nil || other.AnteriorLower == nil {
      return false
    }
    if (*p.AnteriorLower) != (*other.AnteriorLower) { return false }
  }
  if p.AnteriorLowerVolume != other.AnteriorLowerVolume {
    if p.AnteriorLowerVolume == nil || other.AnteriorLowerVolume == nil {
      return false
    }
    if (*p.AnteriorLowerVolume) != (*other.AnteriorLowerVolume) { return false }
  }
  if p.AnteriorMiddle != other.AnteriorMiddle {
    if p.AnteriorMiddle == nil || other.AnteriorMiddle == nil {
      return false
    }
    if (*p.AnteriorMiddle) != (*other.AnteriorMiddle) { return false }
  }
  if p.AnteriorMiddleVolume != other.AnteriorMiddleVolume {
    if p.AnteriorMiddleVolume == nil || other.AnteriorMiddleVolume == nil {
      return false
    }
    if (*p.AnteriorMiddleVolume) != (*other.AnteriorMiddleVolume) { return false }
  }
  if p.PosteriorUpper != other.PosteriorUpper {
    if p.PosteriorUpper == nil || other.PosteriorUpper == nil {
      return false
    }
    if (*p.PosteriorUpper) != (*other.PosteriorUpper) { return false }
  }
  if p.PosteriorUpperVolume != other.PosteriorUpperVolume {
    if p.PosteriorUpperVolume == nil || other.PosteriorUpperVolume == nil {
      return false
    }
    if (*p.PosteriorUpperVolume) != (*other.PosteriorUpperVolume) { return false }
  }
  if p.PosteriorLower != other.PosteriorLower {
    if p.PosteriorLower == nil || other.PosteriorLower == nil {
      return false
    }
    if (*p.PosteriorLower) != (*other.PosteriorLower) { return false }
  }
  if p.PosteriorLowerVolume != other.PosteriorLowerVolume {
    if p.PosteriorLowerVolume == nil || other.PosteriorLowerVolume == nil {
      return false
    }
    if (*p.PosteriorLowerVolume) != (*other.PosteriorLowerVolume) { return false }
  }
  return true
}

func (p *THSingleLungSounds) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THSingleLungSounds(%+v)", *p)
}

// Attributes:
//  - Bowel
//  - BowelVolume
type THBowelSounds struct {
  Bowel *string `thrift:"Bowel,1" db:"Bowel" json:"Bowel,omitempty"`
  BowelVolume *int64 `thrift:"BowelVolume,2" db:"BowelVolume" json:"BowelVolume,omitempty"`
}

func NewTHBowelSounds() *THBowelSounds {
  return &THBowelSounds{}
}

var THBowelSounds_Bowel_DEFAULT string
func (p *THBowelSounds) GetBowel() string {
  if !p.IsSetBowel() {
    return THBowelSounds_Bowel_DEFAULT
  }
return *p.Bowel
}
var THBowelSounds_BowelVolume_DEFAULT int64
func (p *THBowelSounds) GetBowelVolume() int64 {
  if !p.IsSetBowelVolume() {
    return THBowelSounds_BowelVolume_DEFAULT
  }
return *p.BowelVolume
}
func (p *THBowelSounds) IsSetBowel() bool {
  return p.Bowel != nil
}

func (p *THBowelSounds) IsSetBowelVolume() bool {
  return p.BowelVolume != nil
}

func (p *THBowelSounds) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *THBowelSounds)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Bowel = &v
}
  return nil
}

func (p *THBowelSounds)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.BowelVolume = &v
}
  return nil
}

func (p *THBowelSounds) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "THBowelSounds"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THBowelSounds) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBowel() {
    if err := oprot.WriteFieldBegin(ctx, "Bowel", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Bowel: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Bowel)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.Bowel (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Bowel: ", p), err) }
  }
  return err
}

func (p *THBowelSounds) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBowelVolume() {
    if err := oprot.WriteFieldBegin(ctx, "BowelVolume", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:BowelVolume: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.BowelVolume)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.BowelVolume (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:BowelVolume: ", p), err) }
  }
  return err
}

func (p *THBowelSounds) Equals(other *THBowelSounds) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Bowel != other.Bowel {
    if p.Bowel == nil || other.Bowel == nil {
      return false
    }
    if (*p.Bowel) != (*other.Bowel) { return false }
  }
  if p.BowelVolume != other.BowelVolume {
    if p.BowelVolume == nil || other.BowelVolume == nil {
      return false
    }
    if (*p.BowelVolume) != (*other.BowelVolume) { return false }
  }
  return true
}

func (p *THBowelSounds) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THBowelSounds(%+v)", *p)
}

// Attributes:
//  - Central
//  - CentralLimited
//  - RightLeg
//  - RightLegLimited
//  - LeftLeg
//  - LeftLegLimited
//  - RightFoot
//  - RightFootLimited
//  - LeftFoot
//  - LeftFootLimited
//  - RightArm
//  - RightArmLimited
//  - LeftArm
//  - LeftArmLimited
//  - RightHand
//  - RightHandLimited
//  - LeftHand
//  - LeftHandLimited
type THPulses struct {
  Central *string `thrift:"Central,1" db:"Central" json:"Central,omitempty"`
  CentralLimited *string `thrift:"CentralLimited,2" db:"CentralLimited" json:"CentralLimited,omitempty"`
  RightLeg *string `thrift:"RightLeg,3" db:"RightLeg" json:"RightLeg,omitempty"`
  RightLegLimited *string `thrift:"RightLegLimited,4" db:"RightLegLimited" json:"RightLegLimited,omitempty"`
  LeftLeg *string `thrift:"LeftLeg,5" db:"LeftLeg" json:"LeftLeg,omitempty"`
  LeftLegLimited *string `thrift:"LeftLegLimited,6" db:"LeftLegLimited" json:"LeftLegLimited,omitempty"`
  RightFoot *string `thrift:"RightFoot,7" db:"RightFoot" json:"RightFoot,omitempty"`
  RightFootLimited *string `thrift:"RightFootLimited,8" db:"RightFootLimited" json:"RightFootLimited,omitempty"`
  LeftFoot *string `thrift:"LeftFoot,9" db:"LeftFoot" json:"LeftFoot,omitempty"`
  LeftFootLimited *string `thrift:"LeftFootLimited,10" db:"LeftFootLimited" json:"LeftFootLimited,omitempty"`
  RightArm *string `thrift:"RightArm,11" db:"RightArm" json:"RightArm,omitempty"`
  RightArmLimited *string `thrift:"RightArmLimited,12" db:"RightArmLimited" json:"RightArmLimited,omitempty"`
  LeftArm *string `thrift:"LeftArm,13" db:"LeftArm" json:"LeftArm,omitempty"`
  LeftArmLimited *string `thrift:"LeftArmLimited,14" db:"LeftArmLimited" json:"LeftArmLimited,omitempty"`
  RightHand *string `thrift:"RightHand,15" db:"RightHand" json:"RightHand,omitempty"`
  RightHandLimited *string `thrift:"RightHandLimited,16" db:"RightHandLimited" json:"RightHandLimited,omitempty"`
  LeftHand *string `thrift:"LeftHand,17" db:"LeftHand" json:"LeftHand,omitempty"`
  LeftHandLimited *string `thrift:"LeftHandLimited,18" db:"LeftHandLimited" json:"LeftHandLimited,omitempty"`
}

func NewTHPulses() *THPulses {
  return &THPulses{}
}

var THPulses_Central_DEFAULT string
func (p *THPulses) GetCentral() string {
  if !p.IsSetCentral() {
    return THPulses_Central_DEFAULT
  }
return *p.Central
}
var THPulses_CentralLimited_DEFAULT string
func (p *THPulses) GetCentralLimited() string {
  if !p.IsSetCentralLimited() {
    return THPulses_CentralLimited_DEFAULT
  }
return *p.CentralLimited
}
var THPulses_RightLeg_DEFAULT string
func (p *THPulses) GetRightLeg() string {
  if !p.IsSetRightLeg() {
    return THPulses_RightLeg_DEFAULT
  }
return *p.RightLeg
}
var THPulses_RightLegLimited_DEFAULT string
func (p *THPulses) GetRightLegLimited() string {
  if !p.IsSetRightLegLimited() {
    return THPulses_RightLegLimited_DEFAULT
  }
return *p.RightLegLimited
}
var THPulses_LeftLeg_DEFAULT string
func (p *THPulses) GetLeftLeg() string {
  if !p.IsSetLeftLeg() {
    return THPulses_LeftLeg_DEFAULT
  }
return *p.LeftLeg
}
var THPulses_LeftLegLimited_DEFAULT string
func (p *THPulses) GetLeftLegLimited() string {
  if !p.IsSetLeftLegLimited() {
    return THPulses_LeftLegLimited_DEFAULT
  }
return *p.LeftLegLimited
}
var THPulses_RightFoot_DEFAULT string
func (p *THPulses) GetRightFoot() string {
  if !p.IsSetRightFoot() {
    return THPulses_RightFoot_DEFAULT
  }
return *p.RightFoot
}
var THPulses_RightFootLimited_DEFAULT string
func (p *THPulses) GetRightFootLimited() string {
  if !p.IsSetRightFootLimited() {
    return THPulses_RightFootLimited_DEFAULT
  }
return *p.RightFootLimited
}
var THPulses_LeftFoot_DEFAULT string
func (p *THPulses) GetLeftFoot() string {
  if !p.IsSetLeftFoot() {
    return THPulses_LeftFoot_DEFAULT
  }
return *p.LeftFoot
}
var THPulses_LeftFootLimited_DEFAULT string
func (p *THPulses) GetLeftFootLimited() string {
  if !p.IsSetLeftFootLimited() {
    return THPulses_LeftFootLimited_DEFAULT
  }
return *p.LeftFootLimited
}
var THPulses_RightArm_DEFAULT string
func (p *THPulses) GetRightArm() string {
  if !p.IsSetRightArm() {
    return THPulses_RightArm_DEFAULT
  }
return *p.RightArm
}
var THPulses_RightArmLimited_DEFAULT string
func (p *THPulses) GetRightArmLimited() string {
  if !p.IsSetRightArmLimited() {
    return THPulses_RightArmLimited_DEFAULT
  }
return *p.RightArmLimited
}
var THPulses_LeftArm_DEFAULT string
func (p *THPulses) GetLeftArm() string {
  if !p.IsSetLeftArm() {
    return THPulses_LeftArm_DEFAULT
  }
return *p.LeftArm
}
var THPulses_LeftArmLimited_DEFAULT string
func (p *THPulses) GetLeftArmLimited() string {
  if !p.IsSetLeftArmLimited() {
    return THPulses_LeftArmLimited_DEFAULT
  }
return *p.LeftArmLimited
}
var THPulses_RightHand_DEFAULT string
func (p *THPulses) GetRightHand() string {
  if !p.IsSetRightHand() {
    return THPulses_RightHand_DEFAULT
  }
return *p.RightHand
}
var THPulses_RightHandLimited_DEFAULT string
func (p *THPulses) GetRightHandLimited() string {
  if !p.IsSetRightHandLimited() {
    return THPulses_RightHandLimited_DEFAULT
  }
return *p.RightHandLimited
}
var THPulses_LeftHand_DEFAULT string
func (p *THPulses) GetLeftHand() string {
  if !p.IsSetLeftHand() {
    return THPulses_LeftHand_DEFAULT
  }
return *p.LeftHand
}
var THPulses_LeftHandLimited_DEFAULT string
func (p *THPulses) GetLeftHandLimited() string {
  if !p.IsSetLeftHandLimited() {
    return THPulses_LeftHandLimited_DEFAULT
  }
return *p.LeftHandLimited
}
func (p *THPulses) IsSetCentral() bool {
  return p.Central != nil
}

func (p *THPulses) IsSetCentralLimited() bool {
  return p.CentralLimited != nil
}

func (p *THPulses) IsSetRightLeg() bool {
  return p.RightLeg != nil
}

func (p *THPulses) IsSetRightLegLimited() bool {
  return p.RightLegLimited != nil
}

func (p *THPulses) IsSetLeftLeg() bool {
  return p.LeftLeg != nil
}

func (p *THPulses) IsSetLeftLegLimited() bool {
  return p.LeftLegLimited != nil
}

func (p *THPulses) IsSetRightFoot() bool {
  return p.RightFoot != nil
}

func (p *THPulses) IsSetRightFootLimited() bool {
  return p.RightFootLimited != nil
}

func (p *THPulses) IsSetLeftFoot() bool {
  return p.LeftFoot != nil
}

func (p *THPulses) IsSetLeftFootLimited() bool {
  return p.LeftFootLimited != nil
}

func (p *THPulses) IsSetRightArm() bool {
  return p.RightArm != nil
}

func (p *THPulses) IsSetRightArmLimited() bool {
  return p.RightArmLimited != nil
}

func (p *THPulses) IsSetLeftArm() bool {
  return p.LeftArm != nil
}

func (p *THPulses) IsSetLeftArmLimited() bool {
  return p.LeftArmLimited != nil
}

func (p *THPulses) IsSetRightHand() bool {
  return p.RightHand != nil
}

func (p *THPulses) IsSetRightHandLimited() bool {
  return p.RightHandLimited != nil
}

func (p *THPulses) IsSetLeftHand() bool {
  return p.LeftHand != nil
}

func (p *THPulses) IsSetLeftHandLimited() bool {
  return p.LeftHandLimited != nil
}

func (p *THPulses) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField16(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField17(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField18(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *THPulses)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Central = &v
}
  return nil
}

func (p *THPulses)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CentralLimited = &v
}
  return nil
}

func (p *THPulses)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RightLeg = &v
}
  return nil
}

func (p *THPulses)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.RightLegLimited = &v
}
  return nil
}

func (p *THPulses)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.LeftLeg = &v
}
  return nil
}

func (p *THPulses)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.LeftLegLimited = &v
}
  return nil
}

func (p *THPulses)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.RightFoot = &v
}
  return nil
}

func (p *THPulses)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.RightFootLimited = &v
}
  return nil
}

func (p *THPulses)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.LeftFoot = &v
}
  return nil
}

func (p *THPulses)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.LeftFootLimited = &v
}
  return nil
}

func (p *THPulses)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.RightArm = &v
}
  return nil
}

func (p *THPulses)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.RightArmLimited = &v
}
  return nil
}

func (p *THPulses)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.LeftArm = &v
}
  return nil
}

func (p *THPulses)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.LeftArmLimited = &v
}
  return nil
}

func (p *THPulses)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.RightHand = &v
}
  return nil
}

func (p *THPulses)  ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.RightHandLimited = &v
}
  return nil
}

func (p *THPulses)  ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.LeftHand = &v
}
  return nil
}

func (p *THPulses)  ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.LeftHandLimited = &v
}
  return nil
}

func (p *THPulses) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "THPulses"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField16(ctx, oprot); err != nil { return err }
    if err := p.writeField17(ctx, oprot); err != nil { return err }
    if err := p.writeField18(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THPulses) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCentral() {
    if err := oprot.WriteFieldBegin(ctx, "Central", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Central: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Central)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.Central (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Central: ", p), err) }
  }
  return err
}

func (p *THPulses) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCentralLimited() {
    if err := oprot.WriteFieldBegin(ctx, "CentralLimited", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:CentralLimited: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.CentralLimited)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.CentralLimited (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:CentralLimited: ", p), err) }
  }
  return err
}

func (p *THPulses) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRightLeg() {
    if err := oprot.WriteFieldBegin(ctx, "RightLeg", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:RightLeg: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.RightLeg)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.RightLeg (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:RightLeg: ", p), err) }
  }
  return err
}

func (p *THPulses) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRightLegLimited() {
    if err := oprot.WriteFieldBegin(ctx, "RightLegLimited", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:RightLegLimited: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.RightLegLimited)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.RightLegLimited (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:RightLegLimited: ", p), err) }
  }
  return err
}

func (p *THPulses) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLeftLeg() {
    if err := oprot.WriteFieldBegin(ctx, "LeftLeg", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:LeftLeg: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.LeftLeg)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.LeftLeg (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:LeftLeg: ", p), err) }
  }
  return err
}

func (p *THPulses) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLeftLegLimited() {
    if err := oprot.WriteFieldBegin(ctx, "LeftLegLimited", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:LeftLegLimited: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.LeftLegLimited)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.LeftLegLimited (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:LeftLegLimited: ", p), err) }
  }
  return err
}

func (p *THPulses) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRightFoot() {
    if err := oprot.WriteFieldBegin(ctx, "RightFoot", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:RightFoot: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.RightFoot)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.RightFoot (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:RightFoot: ", p), err) }
  }
  return err
}

func (p *THPulses) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRightFootLimited() {
    if err := oprot.WriteFieldBegin(ctx, "RightFootLimited", thrift.STRING, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:RightFootLimited: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.RightFootLimited)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.RightFootLimited (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:RightFootLimited: ", p), err) }
  }
  return err
}

func (p *THPulses) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLeftFoot() {
    if err := oprot.WriteFieldBegin(ctx, "LeftFoot", thrift.STRING, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:LeftFoot: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.LeftFoot)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.LeftFoot (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:LeftFoot: ", p), err) }
  }
  return err
}

func (p *THPulses) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLeftFootLimited() {
    if err := oprot.WriteFieldBegin(ctx, "LeftFootLimited", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:LeftFootLimited: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.LeftFootLimited)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.LeftFootLimited (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:LeftFootLimited: ", p), err) }
  }
  return err
}

func (p *THPulses) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRightArm() {
    if err := oprot.WriteFieldBegin(ctx, "RightArm", thrift.STRING, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:RightArm: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.RightArm)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.RightArm (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:RightArm: ", p), err) }
  }
  return err
}

func (p *THPulses) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRightArmLimited() {
    if err := oprot.WriteFieldBegin(ctx, "RightArmLimited", thrift.STRING, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:RightArmLimited: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.RightArmLimited)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.RightArmLimited (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:RightArmLimited: ", p), err) }
  }
  return err
}

func (p *THPulses) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLeftArm() {
    if err := oprot.WriteFieldBegin(ctx, "LeftArm", thrift.STRING, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:LeftArm: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.LeftArm)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.LeftArm (13) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:LeftArm: ", p), err) }
  }
  return err
}

func (p *THPulses) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLeftArmLimited() {
    if err := oprot.WriteFieldBegin(ctx, "LeftArmLimited", thrift.STRING, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:LeftArmLimited: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.LeftArmLimited)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.LeftArmLimited (14) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:LeftArmLimited: ", p), err) }
  }
  return err
}

func (p *THPulses) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRightHand() {
    if err := oprot.WriteFieldBegin(ctx, "RightHand", thrift.STRING, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:RightHand: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.RightHand)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.RightHand (15) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:RightHand: ", p), err) }
  }
  return err
}

func (p *THPulses) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRightHandLimited() {
    if err := oprot.WriteFieldBegin(ctx, "RightHandLimited", thrift.STRING, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:RightHandLimited: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.RightHandLimited)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.RightHandLimited (16) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:RightHandLimited: ", p), err) }
  }
  return err
}

func (p *THPulses) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLeftHand() {
    if err := oprot.WriteFieldBegin(ctx, "LeftHand", thrift.STRING, 17); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:LeftHand: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.LeftHand)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.LeftHand (17) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 17:LeftHand: ", p), err) }
  }
  return err
}

func (p *THPulses) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLeftHandLimited() {
    if err := oprot.WriteFieldBegin(ctx, "LeftHandLimited", thrift.STRING, 18); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:LeftHandLimited: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.LeftHandLimited)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.LeftHandLimited (18) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 18:LeftHandLimited: ", p), err) }
  }
  return err
}

func (p *THPulses) Equals(other *THPulses) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Central != other.Central {
    if p.Central == nil || other.Central == nil {
      return false
    }
    if (*p.Central) != (*other.Central) { return false }
  }
  if p.CentralLimited != other.CentralLimited {
    if p.CentralLimited == nil || other.CentralLimited == nil {
      return false
    }
    if (*p.CentralLimited) != (*other.CentralLimited) { return false }
  }
  if p.RightLeg != other.RightLeg {
    if p.RightLeg == nil || other.RightLeg == nil {
      return false
    }
    if (*p.RightLeg) != (*other.RightLeg) { return false }
  }
  if p.RightLegLimited != other.RightLegLimited {
    if p.RightLegLimited == nil || other.RightLegLimited == nil {
      return false
    }
    if (*p.RightLegLimited) != (*other.RightLegLimited) { return false }
  }
  if p.LeftLeg != other.LeftLeg {
    if p.LeftLeg == nil || other.LeftLeg == nil {
      return false
    }
    if (*p.LeftLeg) != (*other.LeftLeg) { return false }
  }
  if p.LeftLegLimited != other.LeftLegLimited {
    if p.LeftLegLimited == nil || other.LeftLegLimited == nil {
      return false
    }
    if (*p.LeftLegLimited) != (*other.LeftLegLimited) { return false }
  }
  if p.RightFoot != other.RightFoot {
    if p.RightFoot == nil || other.RightFoot == nil {
      return false
    }
    if (*p.RightFoot) != (*other.RightFoot) { return false }
  }
  if p.RightFootLimited != other.RightFootLimited {
    if p.RightFootLimited == nil || other.RightFootLimited == nil {
      return false
    }
    if (*p.RightFootLimited) != (*other.RightFootLimited) { return false }
  }
  if p.LeftFoot != other.LeftFoot {
    if p.LeftFoot == nil || other.LeftFoot == nil {
      return false
    }
    if (*p.LeftFoot) != (*other.LeftFoot) { return false }
  }
  if p.LeftFootLimited != other.LeftFootLimited {
    if p.LeftFootLimited == nil || other.LeftFootLimited == nil {
      return false
    }
    if (*p.LeftFootLimited) != (*other.LeftFootLimited) { return false }
  }
  if p.RightArm != other.RightArm {
    if p.RightArm == nil || other.RightArm == nil {
      return false
    }
    if (*p.RightArm) != (*other.RightArm) { return false }
  }
  if p.RightArmLimited != other.RightArmLimited {
    if p.RightArmLimited == nil || other.RightArmLimited == nil {
      return false
    }
    if (*p.RightArmLimited) != (*other.RightArmLimited) { return false }
  }
  if p.LeftArm != other.LeftArm {
    if p.LeftArm == nil || other.LeftArm == nil {
      return false
    }
    if (*p.LeftArm) != (*other.LeftArm) { return false }
  }
  if p.LeftArmLimited != other.LeftArmLimited {
    if p.LeftArmLimited == nil || other.LeftArmLimited == nil {
      return false
    }
    if (*p.LeftArmLimited) != (*other.LeftArmLimited) { return false }
  }
  if p.RightHand != other.RightHand {
    if p.RightHand == nil || other.RightHand == nil {
      return false
    }
    if (*p.RightHand) != (*other.RightHand) { return false }
  }
  if p.RightHandLimited != other.RightHandLimited {
    if p.RightHandLimited == nil || other.RightHandLimited == nil {
      return false
    }
    if (*p.RightHandLimited) != (*other.RightHandLimited) { return false }
  }
  if p.LeftHand != other.LeftHand {
    if p.LeftHand == nil || other.LeftHand == nil {
      return false
    }
    if (*p.LeftHand) != (*other.LeftHand) { return false }
  }
  if p.LeftHandLimited != other.LeftHandLimited {
    if p.LeftHandLimited == nil || other.LeftHandLimited == nil {
      return false
    }
    if (*p.LeftHandLimited) != (*other.LeftHandLimited) { return false }
  }
  return true
}

func (p *THPulses) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THPulses(%+v)", *p)
}

