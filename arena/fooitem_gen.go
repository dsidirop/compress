package arena

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *FooItem) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.ID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "email":
			z.Email, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Email")
				return
			}
		case "roles":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Roles")
				return
			}
			if cap(z.Roles) >= int(zb0002) {
				z.Roles = (z.Roles)[:zb0002]
			} else {
				z.Roles = make([]string, zb0002)
			}
			for za0001 := range z.Roles {
				z.Roles[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Roles", za0001)
					return
				}
			}
		case "apiKey":
			z.APIKey, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "APIKey")
				return
			}
		case "profile":
			err = z.Profile.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Profile")
				return
			}
		case "username":
			z.Username, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Username")
				return
			}
		case "createdAt":
			z.CreatedAt, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "CreatedAt")
				return
			}
		case "updatedAt":
			z.UpdatedAt, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "UpdatedAt")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *FooItem) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 8
	// write "id"
	err = en.Append(0x88, 0xa2, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "email"
	err = en.Append(0xa5, 0x65, 0x6d, 0x61, 0x69, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteString(z.Email)
	if err != nil {
		err = msgp.WrapError(err, "Email")
		return
	}
	// write "roles"
	err = en.Append(0xa5, 0x72, 0x6f, 0x6c, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Roles)))
	if err != nil {
		err = msgp.WrapError(err, "Roles")
		return
	}
	for za0001 := range z.Roles {
		err = en.WriteString(z.Roles[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Roles", za0001)
			return
		}
	}
	// write "apiKey"
	err = en.Append(0xa6, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.APIKey)
	if err != nil {
		err = msgp.WrapError(err, "APIKey")
		return
	}
	// write "profile"
	err = en.Append(0xa7, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = z.Profile.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Profile")
		return
	}
	// write "username"
	err = en.Append(0xa8, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Username)
	if err != nil {
		err = msgp.WrapError(err, "Username")
		return
	}
	// write "createdAt"
	err = en.Append(0xa9, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74)
	if err != nil {
		return
	}
	err = en.WriteTime(z.CreatedAt)
	if err != nil {
		err = msgp.WrapError(err, "CreatedAt")
		return
	}
	// write "updatedAt"
	err = en.Append(0xa9, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74)
	if err != nil {
		return
	}
	err = en.WriteTime(z.UpdatedAt)
	if err != nil {
		err = msgp.WrapError(err, "UpdatedAt")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *FooItem) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 8
	// string "id"
	o = append(o, 0x88, 0xa2, 0x69, 0x64)
	o = msgp.AppendString(o, z.ID)
	// string "email"
	o = append(o, 0xa5, 0x65, 0x6d, 0x61, 0x69, 0x6c)
	o = msgp.AppendString(o, z.Email)
	// string "roles"
	o = append(o, 0xa5, 0x72, 0x6f, 0x6c, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Roles)))
	for za0001 := range z.Roles {
		o = msgp.AppendString(o, z.Roles[za0001])
	}
	// string "apiKey"
	o = append(o, 0xa6, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79)
	o = msgp.AppendString(o, z.APIKey)
	// string "profile"
	o = append(o, 0xa7, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65)
	o, err = z.Profile.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Profile")
		return
	}
	// string "username"
	o = append(o, 0xa8, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Username)
	// string "createdAt"
	o = append(o, 0xa9, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74)
	o = msgp.AppendTime(o, z.CreatedAt)
	// string "updatedAt"
	o = append(o, 0xa9, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74)
	o = msgp.AppendTime(o, z.UpdatedAt)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *FooItem) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.ID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "email":
			z.Email, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Email")
				return
			}
		case "roles":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Roles")
				return
			}
			if cap(z.Roles) >= int(zb0002) {
				z.Roles = (z.Roles)[:zb0002]
			} else {
				z.Roles = make([]string, zb0002)
			}
			for za0001 := range z.Roles {
				z.Roles[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Roles", za0001)
					return
				}
			}
		case "apiKey":
			z.APIKey, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "APIKey")
				return
			}
		case "profile":
			bts, err = z.Profile.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Profile")
				return
			}
		case "username":
			z.Username, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Username")
				return
			}
		case "createdAt":
			z.CreatedAt, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CreatedAt")
				return
			}
		case "updatedAt":
			z.UpdatedAt, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UpdatedAt")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *FooItem) Msgsize() (s int) {
	s = 1 + 3 + msgp.StringPrefixSize + len(z.ID) + 6 + msgp.StringPrefixSize + len(z.Email) + 6 + msgp.ArrayHeaderSize
	for za0001 := range z.Roles {
		s += msgp.StringPrefixSize + len(z.Roles[za0001])
	}
	s += 7 + msgp.StringPrefixSize + len(z.APIKey) + 8 + z.Profile.Msgsize() + 9 + msgp.StringPrefixSize + len(z.Username) + 10 + msgp.TimeSize + 10 + msgp.TimeSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *FooLocation) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "lat":
			z.Lat, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Lat")
				return
			}
		case "long":
			z.Long, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Long")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z FooLocation) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "lat"
	err = en.Append(0x82, 0xa3, 0x6c, 0x61, 0x74)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Lat)
	if err != nil {
		err = msgp.WrapError(err, "Lat")
		return
	}
	// write "long"
	err = en.Append(0xa4, 0x6c, 0x6f, 0x6e, 0x67)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Long)
	if err != nil {
		err = msgp.WrapError(err, "Long")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z FooLocation) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "lat"
	o = append(o, 0x82, 0xa3, 0x6c, 0x61, 0x74)
	o = msgp.AppendFloat64(o, z.Lat)
	// string "long"
	o = append(o, 0xa4, 0x6c, 0x6f, 0x6e, 0x67)
	o = msgp.AppendFloat64(o, z.Long)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *FooLocation) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "lat":
			z.Lat, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Lat")
				return
			}
		case "long":
			z.Long, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Long")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z FooLocation) Msgsize() (s int) {
	s = 1 + 4 + msgp.Float64Size + 5 + msgp.Float64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *FooProfile) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "dob":
			z.Dob, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Dob")
				return
			}
		case "name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "about":
			z.About, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "About")
				return
			}
		case "address":
			z.Address, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		case "company":
			z.Company, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Company")
				return
			}
		case "location":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Location")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "Location")
					return
				}
				switch msgp.UnsafeString(field) {
				case "lat":
					z.Location.Lat, err = dc.ReadFloat64()
					if err != nil {
						err = msgp.WrapError(err, "Location", "Lat")
						return
					}
				case "long":
					z.Location.Long, err = dc.ReadFloat64()
					if err != nil {
						err = msgp.WrapError(err, "Location", "Long")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "Location")
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *FooProfile) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "dob"
	err = en.Append(0x86, 0xa3, 0x64, 0x6f, 0x62)
	if err != nil {
		return
	}
	err = en.WriteString(z.Dob)
	if err != nil {
		err = msgp.WrapError(err, "Dob")
		return
	}
	// write "name"
	err = en.Append(0xa4, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "about"
	err = en.Append(0xa5, 0x61, 0x62, 0x6f, 0x75, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.About)
	if err != nil {
		err = msgp.WrapError(err, "About")
		return
	}
	// write "address"
	err = en.Append(0xa7, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.Address)
	if err != nil {
		err = msgp.WrapError(err, "Address")
		return
	}
	// write "company"
	err = en.Append(0xa7, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.Company)
	if err != nil {
		err = msgp.WrapError(err, "Company")
		return
	}
	// write "location"
	err = en.Append(0xa8, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	// map header, size 2
	// write "lat"
	err = en.Append(0x82, 0xa3, 0x6c, 0x61, 0x74)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Location.Lat)
	if err != nil {
		err = msgp.WrapError(err, "Location", "Lat")
		return
	}
	// write "long"
	err = en.Append(0xa4, 0x6c, 0x6f, 0x6e, 0x67)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Location.Long)
	if err != nil {
		err = msgp.WrapError(err, "Location", "Long")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *FooProfile) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "dob"
	o = append(o, 0x86, 0xa3, 0x64, 0x6f, 0x62)
	o = msgp.AppendString(o, z.Dob)
	// string "name"
	o = append(o, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "about"
	o = append(o, 0xa5, 0x61, 0x62, 0x6f, 0x75, 0x74)
	o = msgp.AppendString(o, z.About)
	// string "address"
	o = append(o, 0xa7, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	o = msgp.AppendString(o, z.Address)
	// string "company"
	o = append(o, 0xa7, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79)
	o = msgp.AppendString(o, z.Company)
	// string "location"
	o = append(o, 0xa8, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e)
	// map header, size 2
	// string "lat"
	o = append(o, 0x82, 0xa3, 0x6c, 0x61, 0x74)
	o = msgp.AppendFloat64(o, z.Location.Lat)
	// string "long"
	o = append(o, 0xa4, 0x6c, 0x6f, 0x6e, 0x67)
	o = msgp.AppendFloat64(o, z.Location.Long)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *FooProfile) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "dob":
			z.Dob, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Dob")
				return
			}
		case "name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "about":
			z.About, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "About")
				return
			}
		case "address":
			z.Address, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		case "company":
			z.Company, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Company")
				return
			}
		case "location":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Location")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Location")
					return
				}
				switch msgp.UnsafeString(field) {
				case "lat":
					z.Location.Lat, bts, err = msgp.ReadFloat64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Location", "Lat")
						return
					}
				case "long":
					z.Location.Long, bts, err = msgp.ReadFloat64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Location", "Long")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Location")
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *FooProfile) Msgsize() (s int) {
	s = 1 + 4 + msgp.StringPrefixSize + len(z.Dob) + 5 + msgp.StringPrefixSize + len(z.Name) + 6 + msgp.StringPrefixSize + len(z.About) + 8 + msgp.StringPrefixSize + len(z.Address) + 8 + msgp.StringPrefixSize + len(z.Company) + 9 + 1 + 4 + msgp.Float64Size + 5 + msgp.Float64Size
	return
}
