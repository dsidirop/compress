// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package arena

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE51a18b2DecodeGithubComKlauspostCompressArena(in *jlexer.Lexer, out *Tag) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tm":
			out.TagTime = int64(in.Int64())
		case "tp":
			out.TagType = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE51a18b2EncodeGithubComKlauspostCompressArena(out *jwriter.Writer, in Tag) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tm\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.TagTime))
	}
	{
		const prefix string = ",\"tp\":"
		out.RawString(prefix)
		out.Int64(int64(in.TagType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Tag) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE51a18b2EncodeGithubComKlauspostCompressArena(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Tag) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE51a18b2EncodeGithubComKlauspostCompressArena(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Tag) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE51a18b2DecodeGithubComKlauspostCompressArena(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Tag) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE51a18b2DecodeGithubComKlauspostCompressArena(l, v)
}
func easyjsonE51a18b2DecodeGithubComKlauspostCompressArena1(in *jlexer.Lexer, out *CurveSpecificationV1) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "simulator_name":
			out.SimulatorName = string(in.String())
		case "tenant":
			out.Tenant = string(in.String())
		case "start_time":
			out.StartTime = int64(in.Int64())
		case "end_time":
			out.EndTime = int64(in.Int64())
		case "sample_interval":
			out.SampleInterval = int64(in.Int64())
		case "curve_types":
			out.CurveTypes = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE51a18b2EncodeGithubComKlauspostCompressArena1(out *jwriter.Writer, in CurveSpecificationV1) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"simulator_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.SimulatorName))
	}
	{
		const prefix string = ",\"tenant\":"
		out.RawString(prefix)
		out.String(string(in.Tenant))
	}
	{
		const prefix string = ",\"start_time\":"
		out.RawString(prefix)
		out.Int64(int64(in.StartTime))
	}
	{
		const prefix string = ",\"end_time\":"
		out.RawString(prefix)
		out.Int64(int64(in.EndTime))
	}
	{
		const prefix string = ",\"sample_interval\":"
		out.RawString(prefix)
		out.Int64(int64(in.SampleInterval))
	}
	{
		const prefix string = ",\"curve_types\":"
		out.RawString(prefix)
		out.Int64(int64(in.CurveTypes))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CurveSpecificationV1) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE51a18b2EncodeGithubComKlauspostCompressArena1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CurveSpecificationV1) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE51a18b2EncodeGithubComKlauspostCompressArena1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CurveSpecificationV1) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE51a18b2DecodeGithubComKlauspostCompressArena1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CurveSpecificationV1) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE51a18b2DecodeGithubComKlauspostCompressArena1(l, v)
}
func easyjsonE51a18b2DecodeGithubComKlauspostCompressArena2(in *jlexer.Lexer, out *CurveGenReplyV1) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "client_id":
			out.ClientId = string(in.String())
		case "spec":
			(out.Spec).UnmarshalEasyJSON(in)
		case "ECG_LEAD_1":
			if in.IsNull() {
				in.Skip()
				out.Lead1 = nil
			} else {
				in.Delim('[')
				if out.Lead1 == nil {
					if !in.IsDelim(']') {
						out.Lead1 = make([]int64, 0, 8)
					} else {
						out.Lead1 = []int64{}
					}
				} else {
					out.Lead1 = (out.Lead1)[:0]
				}
				for !in.IsDelim(']') {
					var v1 int64
					v1 = int64(in.Int64())
					out.Lead1 = append(out.Lead1, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ECG_LEAD_2":
			if in.IsNull() {
				in.Skip()
				out.Lead2 = nil
			} else {
				in.Delim('[')
				if out.Lead2 == nil {
					if !in.IsDelim(']') {
						out.Lead2 = make([]int64, 0, 8)
					} else {
						out.Lead2 = []int64{}
					}
				} else {
					out.Lead2 = (out.Lead2)[:0]
				}
				for !in.IsDelim(']') {
					var v2 int64
					v2 = int64(in.Int64())
					out.Lead2 = append(out.Lead2, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ECG_LEAD_3":
			if in.IsNull() {
				in.Skip()
				out.Lead3 = nil
			} else {
				in.Delim('[')
				if out.Lead3 == nil {
					if !in.IsDelim(']') {
						out.Lead3 = make([]int64, 0, 8)
					} else {
						out.Lead3 = []int64{}
					}
				} else {
					out.Lead3 = (out.Lead3)[:0]
				}
				for !in.IsDelim(']') {
					var v3 int64
					v3 = int64(in.Int64())
					out.Lead3 = append(out.Lead3, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ECG_LEAD_4":
			if in.IsNull() {
				in.Skip()
				out.Lead4 = nil
			} else {
				in.Delim('[')
				if out.Lead4 == nil {
					if !in.IsDelim(']') {
						out.Lead4 = make([]int64, 0, 8)
					} else {
						out.Lead4 = []int64{}
					}
				} else {
					out.Lead4 = (out.Lead4)[:0]
				}
				for !in.IsDelim(']') {
					var v4 int64
					v4 = int64(in.Int64())
					out.Lead4 = append(out.Lead4, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ECG_LEAD_5":
			if in.IsNull() {
				in.Skip()
				out.Lead5 = nil
			} else {
				in.Delim('[')
				if out.Lead5 == nil {
					if !in.IsDelim(']') {
						out.Lead5 = make([]int64, 0, 8)
					} else {
						out.Lead5 = []int64{}
					}
				} else {
					out.Lead5 = (out.Lead5)[:0]
				}
				for !in.IsDelim(']') {
					var v5 int64
					v5 = int64(in.Int64())
					out.Lead5 = append(out.Lead5, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ECG_LEAD_6":
			if in.IsNull() {
				in.Skip()
				out.Lead6 = nil
			} else {
				in.Delim('[')
				if out.Lead6 == nil {
					if !in.IsDelim(']') {
						out.Lead6 = make([]int64, 0, 8)
					} else {
						out.Lead6 = []int64{}
					}
				} else {
					out.Lead6 = (out.Lead6)[:0]
				}
				for !in.IsDelim(']') {
					var v6 int64
					v6 = int64(in.Int64())
					out.Lead6 = append(out.Lead6, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ECG_LEAD_7":
			if in.IsNull() {
				in.Skip()
				out.Lead7 = nil
			} else {
				in.Delim('[')
				if out.Lead7 == nil {
					if !in.IsDelim(']') {
						out.Lead7 = make([]int64, 0, 8)
					} else {
						out.Lead7 = []int64{}
					}
				} else {
					out.Lead7 = (out.Lead7)[:0]
				}
				for !in.IsDelim(']') {
					var v7 int64
					v7 = int64(in.Int64())
					out.Lead7 = append(out.Lead7, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ECG_LEAD_8":
			if in.IsNull() {
				in.Skip()
				out.Lead8 = nil
			} else {
				in.Delim('[')
				if out.Lead8 == nil {
					if !in.IsDelim(']') {
						out.Lead8 = make([]int64, 0, 8)
					} else {
						out.Lead8 = []int64{}
					}
				} else {
					out.Lead8 = (out.Lead8)[:0]
				}
				for !in.IsDelim(']') {
					var v8 int64
					v8 = int64(in.Int64())
					out.Lead8 = append(out.Lead8, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ECG_LEAD_9":
			if in.IsNull() {
				in.Skip()
				out.Lead9 = nil
			} else {
				in.Delim('[')
				if out.Lead9 == nil {
					if !in.IsDelim(']') {
						out.Lead9 = make([]int64, 0, 8)
					} else {
						out.Lead9 = []int64{}
					}
				} else {
					out.Lead9 = (out.Lead9)[:0]
				}
				for !in.IsDelim(']') {
					var v9 int64
					v9 = int64(in.Int64())
					out.Lead9 = append(out.Lead9, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ECG_LEAD_10":
			if in.IsNull() {
				in.Skip()
				out.Lead10 = nil
			} else {
				in.Delim('[')
				if out.Lead10 == nil {
					if !in.IsDelim(']') {
						out.Lead10 = make([]int64, 0, 8)
					} else {
						out.Lead10 = []int64{}
					}
				} else {
					out.Lead10 = (out.Lead10)[:0]
				}
				for !in.IsDelim(']') {
					var v10 int64
					v10 = int64(in.Int64())
					out.Lead10 = append(out.Lead10, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ECG_LEAD_11":
			if in.IsNull() {
				in.Skip()
				out.Lead11 = nil
			} else {
				in.Delim('[')
				if out.Lead11 == nil {
					if !in.IsDelim(']') {
						out.Lead11 = make([]int64, 0, 8)
					} else {
						out.Lead11 = []int64{}
					}
				} else {
					out.Lead11 = (out.Lead11)[:0]
				}
				for !in.IsDelim(']') {
					var v11 int64
					v11 = int64(in.Int64())
					out.Lead11 = append(out.Lead11, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ECG_LEAD_12":
			if in.IsNull() {
				in.Skip()
				out.Lead12 = nil
			} else {
				in.Delim('[')
				if out.Lead12 == nil {
					if !in.IsDelim(']') {
						out.Lead12 = make([]int64, 0, 8)
					} else {
						out.Lead12 = []int64{}
					}
				} else {
					out.Lead12 = (out.Lead12)[:0]
				}
				for !in.IsDelim(']') {
					var v12 int64
					v12 = int64(in.Int64())
					out.Lead12 = append(out.Lead12, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ABP":
			if in.IsNull() {
				in.Skip()
				out.Abp = nil
			} else {
				in.Delim('[')
				if out.Abp == nil {
					if !in.IsDelim(']') {
						out.Abp = make([]int64, 0, 8)
					} else {
						out.Abp = []int64{}
					}
				} else {
					out.Abp = (out.Abp)[:0]
				}
				for !in.IsDelim(']') {
					var v13 int64
					v13 = int64(in.Int64())
					out.Abp = append(out.Abp, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "CVP":
			if in.IsNull() {
				in.Skip()
				out.Cvp = nil
			} else {
				in.Delim('[')
				if out.Cvp == nil {
					if !in.IsDelim(']') {
						out.Cvp = make([]int64, 0, 8)
					} else {
						out.Cvp = []int64{}
					}
				} else {
					out.Cvp = (out.Cvp)[:0]
				}
				for !in.IsDelim(']') {
					var v14 int64
					v14 = int64(in.Int64())
					out.Cvp = append(out.Cvp, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "PAP":
			if in.IsNull() {
				in.Skip()
				out.Pap = nil
			} else {
				in.Delim('[')
				if out.Pap == nil {
					if !in.IsDelim(']') {
						out.Pap = make([]int64, 0, 8)
					} else {
						out.Pap = []int64{}
					}
				} else {
					out.Pap = (out.Pap)[:0]
				}
				for !in.IsDelim(']') {
					var v15 int64
					v15 = int64(in.Int64())
					out.Pap = append(out.Pap, v15)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "SPO2":
			if in.IsNull() {
				in.Skip()
				out.Spo2 = nil
			} else {
				in.Delim('[')
				if out.Spo2 == nil {
					if !in.IsDelim(']') {
						out.Spo2 = make([]int64, 0, 8)
					} else {
						out.Spo2 = []int64{}
					}
				} else {
					out.Spo2 = (out.Spo2)[:0]
				}
				for !in.IsDelim(']') {
					var v16 int64
					v16 = int64(in.Int64())
					out.Spo2 = append(out.Spo2, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "WP":
			if in.IsNull() {
				in.Skip()
				out.Wp = nil
			} else {
				in.Delim('[')
				if out.Wp == nil {
					if !in.IsDelim(']') {
						out.Wp = make([]int64, 0, 8)
					} else {
						out.Wp = []int64{}
					}
				} else {
					out.Wp = (out.Wp)[:0]
				}
				for !in.IsDelim(']') {
					var v17 int64
					v17 = int64(in.Int64())
					out.Wp = append(out.Wp, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "TAGS":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]Tag, 0, 4)
					} else {
						out.Tags = []Tag{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v18 Tag
					(v18).UnmarshalEasyJSON(in)
					out.Tags = append(out.Tags, v18)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE51a18b2EncodeGithubComKlauspostCompressArena2(out *jwriter.Writer, in CurveGenReplyV1) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ClientId != "" {
		const prefix string = ",\"client_id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ClientId))
	}
	{
		const prefix string = ",\"spec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Spec).MarshalEasyJSON(out)
	}
	if len(in.Lead1) != 0 {
		const prefix string = ",\"ECG_LEAD_1\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v19, v20 := range in.Lead1 {
				if v19 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v20))
			}
			out.RawByte(']')
		}
	}
	if len(in.Lead2) != 0 {
		const prefix string = ",\"ECG_LEAD_2\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v21, v22 := range in.Lead2 {
				if v21 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v22))
			}
			out.RawByte(']')
		}
	}
	if len(in.Lead3) != 0 {
		const prefix string = ",\"ECG_LEAD_3\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v23, v24 := range in.Lead3 {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v24))
			}
			out.RawByte(']')
		}
	}
	if len(in.Lead4) != 0 {
		const prefix string = ",\"ECG_LEAD_4\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v25, v26 := range in.Lead4 {
				if v25 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v26))
			}
			out.RawByte(']')
		}
	}
	if len(in.Lead5) != 0 {
		const prefix string = ",\"ECG_LEAD_5\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v27, v28 := range in.Lead5 {
				if v27 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v28))
			}
			out.RawByte(']')
		}
	}
	if len(in.Lead6) != 0 {
		const prefix string = ",\"ECG_LEAD_6\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v29, v30 := range in.Lead6 {
				if v29 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v30))
			}
			out.RawByte(']')
		}
	}
	if len(in.Lead7) != 0 {
		const prefix string = ",\"ECG_LEAD_7\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v31, v32 := range in.Lead7 {
				if v31 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v32))
			}
			out.RawByte(']')
		}
	}
	if len(in.Lead8) != 0 {
		const prefix string = ",\"ECG_LEAD_8\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v33, v34 := range in.Lead8 {
				if v33 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v34))
			}
			out.RawByte(']')
		}
	}
	if len(in.Lead9) != 0 {
		const prefix string = ",\"ECG_LEAD_9\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v35, v36 := range in.Lead9 {
				if v35 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v36))
			}
			out.RawByte(']')
		}
	}
	if len(in.Lead10) != 0 {
		const prefix string = ",\"ECG_LEAD_10\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v37, v38 := range in.Lead10 {
				if v37 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v38))
			}
			out.RawByte(']')
		}
	}
	if len(in.Lead11) != 0 {
		const prefix string = ",\"ECG_LEAD_11\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v39, v40 := range in.Lead11 {
				if v39 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v40))
			}
			out.RawByte(']')
		}
	}
	if len(in.Lead12) != 0 {
		const prefix string = ",\"ECG_LEAD_12\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v41, v42 := range in.Lead12 {
				if v41 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v42))
			}
			out.RawByte(']')
		}
	}
	if len(in.Abp) != 0 {
		const prefix string = ",\"ABP\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v43, v44 := range in.Abp {
				if v43 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v44))
			}
			out.RawByte(']')
		}
	}
	if len(in.Cvp) != 0 {
		const prefix string = ",\"CVP\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v45, v46 := range in.Cvp {
				if v45 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v46))
			}
			out.RawByte(']')
		}
	}
	if len(in.Pap) != 0 {
		const prefix string = ",\"PAP\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v47, v48 := range in.Pap {
				if v47 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v48))
			}
			out.RawByte(']')
		}
	}
	if len(in.Spo2) != 0 {
		const prefix string = ",\"SPO2\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v49, v50 := range in.Spo2 {
				if v49 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v50))
			}
			out.RawByte(']')
		}
	}
	if len(in.Wp) != 0 {
		const prefix string = ",\"WP\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v51, v52 := range in.Wp {
				if v51 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v52))
			}
			out.RawByte(']')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"TAGS\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v53, v54 := range in.Tags {
				if v53 > 0 {
					out.RawByte(',')
				}
				(v54).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CurveGenReplyV1) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE51a18b2EncodeGithubComKlauspostCompressArena2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CurveGenReplyV1) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE51a18b2EncodeGithubComKlauspostCompressArena2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CurveGenReplyV1) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE51a18b2DecodeGithubComKlauspostCompressArena2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CurveGenReplyV1) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE51a18b2DecodeGithubComKlauspostCompressArena2(l, v)
}
